[
  {
    "objectID": "data/index.html",
    "href": "data/index.html",
    "title": "Data",
    "section": "",
    "text": "Palmer penguins – install the palmerpenguins package in R. See https://allisonhorst.github.io/palmerpenguins/ for more information.\nAll datasets are rds files and can be read into R with readRDS\nA zip archive will all of these files is here: regdata.zip\n\nNational patient register\nPrescribed drug register (organized by year)\n\nmed-2005-ex.rds\nmed-2006-ex.rds\nmed-2007-ex.rds\nmed-2008-ex.rds\nmed-2009-ex.rds\nmed-2010-ex.rds"
  },
  {
    "objectID": "exercises/data-structures.html",
    "href": "exercises/data-structures.html",
    "title": "Data structures – exercises",
    "section": "",
    "text": "In this lesson you will\n\nPractice working with vectors and matrices\nThing about ways to organize data and output into data structures\nCompare and contrast the base R, data.table, and tibble packages for working with data."
  },
  {
    "objectID": "exercises/data-structures.html#vectors-and-matrices",
    "href": "exercises/data-structures.html#vectors-and-matrices",
    "title": "Data structures – exercises",
    "section": "Vectors and matrices",
    "text": "Vectors and matrices\nThe following code creates a matrix with some integers:\n\nM1 &lt;- matrix(1:16, nrow = 4, ncol = 4)\n\n\nTake the sum of each row of M1\nCreate a new matrix called M2 that is M1 with the diagonal elements replaced by 0s\nCreate a new matrix called M3 that is M1 but with all values less than 4 replaced by -1\nAppend the three matrices into an array with dimensions 4, 4, 3."
  },
  {
    "objectID": "exercises/data-structures.html#organizing-output-from-a-statistical-analysis",
    "href": "exercises/data-structures.html#organizing-output-from-a-statistical-analysis",
    "title": "Data structures – exercises",
    "section": "Organizing output from a statistical analysis",
    "text": "Organizing output from a statistical analysis\nThe Palmer penguins data are available in the package palmerpenguins. Install the package and inspect the data called palmerpenguins. You can read about the data in the help file:\n\nlibrary(palmerpenguins)\nhead(penguins)\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n?palmerpenguins-package\n\nLet’s do some basic analyses on this dataset.\n\nby(penguins$body_mass_g, list(penguins$sex, penguins$species), summary)\n\n: female\n: Adelie\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   2850    3175    3400    3369    3550    3900 \n------------------------------------------------------------ \n: male\n: Adelie\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   3325    3800    4000    4043    4300    4775 \n------------------------------------------------------------ \n: female\n: Chinstrap\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   2700    3362    3550    3527    3694    4150 \n------------------------------------------------------------ \n: male\n: Chinstrap\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   3250    3731    3950    3939    4100    4800 \n------------------------------------------------------------ \n: female\n: Gentoo\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   3950    4462    4700    4680    4875    5200 \n------------------------------------------------------------ \n: male\n: Gentoo\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   4750    5300    5500    5485    5700    6300 \n\nmassfit &lt;- lm(body_mass_g ~ sex * species, data = penguins)\nsummary(massfit)\n\n\nCall:\nlm(formula = body_mass_g ~ sex * species, data = penguins)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-827.21 -213.97   11.03  206.51  861.03 \n\nCoefficients:\n                         Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)               3368.84      36.21  93.030  &lt; 2e-16 ***\nsexmale                    674.66      51.21  13.174  &lt; 2e-16 ***\nspeciesChinstrap           158.37      64.24   2.465  0.01420 *  \nspeciesGentoo             1310.91      54.42  24.088  &lt; 2e-16 ***\nsexmale:speciesChinstrap  -262.89      90.85  -2.894  0.00406 ** \nsexmale:speciesGentoo      130.44      76.44   1.706  0.08886 .  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 309.4 on 327 degrees of freedom\n  (11 observations deleted due to missingness)\nMultiple R-squared:  0.8546,    Adjusted R-squared:  0.8524 \nF-statistic: 384.3 on 5 and 327 DF,  p-value: &lt; 2.2e-16\n\nboxplot(body_mass_g ~ sex * species, data = penguins, \n        col = rep(c(\"slateblue\", \"salmon\"), 3))\nlegend(\"topleft\", fill = c(\"slateblue\", \"salmon\"), \n       legend = c(\"Female\", \"Male\"))\n\n\n\n\nInspect the massfit object. What type of data structure is it, and what does it contain?\nYou are planning a publication about the association/interaction between species and sex on body mass. The paper will include descriptive statistics, statistical inference, and some figures. You will likely present the results at a conference or in a lab meeting.\n\nWhat are some different approaches to save the results?\nDiscuss the pros and cons of your suggested approaches.\n\n\nStop and think\nHow do you plan to use the statistical output, immediately and in the future? Thinking about this question helps guide what and how I will store output from an analysis.\n\nWill I read the data into another program before putting it into tables for my paper?\nIs it a result of a computation that takes a long time to run that will be used in subsequent analyses?\nWhat about figures?"
  },
  {
    "objectID": "exercises/data-structures.html#working-with-data-using-different-structures",
    "href": "exercises/data-structures.html#working-with-data-using-different-structures",
    "title": "Data structures – exercises",
    "section": "Working with data using different structures",
    "text": "Working with data using different structures\nThe penguins data is stored as a tibble, which is a special type of data structure that is an enhanced data frame. That is, a tibble is still a data.frame, but it is also more than that.\n\nlibrary(tibble)\nclass(penguins) \n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\nis.data.frame(penguins)\n\n[1] TRUE\n\nis_tibble(penguins)\n\n[1] TRUE\n\n\n\nTry it yourself\nThere are other packages out there that enhance data frames. In this exercise we will introduce and compare base data frames, data.tables, and tibbles. For these you will need the tibble, dplyr, and data.table packages.\nIf you have used any of these before, try one of the others. Read the help files and try out some other functions.\n\n\nCode\n\nBase Rtibble/dplyrdata.table\n\n\n\noptions(max.print = 48)\n\npeng_df &lt;- as.data.frame(penguins)\nclass(peng_df)\n\n[1] \"data.frame\"\n\n## subset\nsubset(peng_df, !is.na(body_mass_g))\n\n  species    island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n1  Adelie Torgersen           39.1          18.7               181        3750\n2  Adelie Torgersen           39.5          17.4               186        3800\n3  Adelie Torgersen           40.3          18.0               195        3250\n5  Adelie Torgersen           36.7          19.3               193        3450\n6  Adelie Torgersen           39.3          20.6               190        3650\n7  Adelie Torgersen           38.9          17.8               181        3625\n     sex year\n1   male 2007\n2 female 2007\n3 female 2007\n5 female 2007\n6   male 2007\n7 female 2007\n [ reached 'max' / getOption(\"max.print\") -- omitted 336 rows ]\n\nsubset(peng_df, sex == \"male\")\n\n   species    island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n1   Adelie Torgersen           39.1          18.7               181        3750\n6   Adelie Torgersen           39.3          20.6               190        3650\n8   Adelie Torgersen           39.2          19.6               195        4675\n14  Adelie Torgersen           38.6          21.2               191        3800\n15  Adelie Torgersen           34.6          21.1               198        4400\n18  Adelie Torgersen           42.5          20.7               197        4500\n    sex year\n1  male 2007\n6  male 2007\n8  male 2007\n14 male 2007\n15 male 2007\n18 male 2007\n [ reached 'max' / getOption(\"max.print\") -- omitted 162 rows ]\n\npeng_df[1:6, ]\n\n  species    island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n1  Adelie Torgersen           39.1          18.7               181        3750\n2  Adelie Torgersen           39.5          17.4               186        3800\n3  Adelie Torgersen           40.3          18.0               195        3250\n4  Adelie Torgersen             NA            NA                NA          NA\n5  Adelie Torgersen           36.7          19.3               193        3450\n6  Adelie Torgersen           39.3          20.6               190        3650\n     sex year\n1   male 2007\n2 female 2007\n3 female 2007\n4   &lt;NA&gt; 2007\n5 female 2007\n6   male 2007\n\n## sort\npeng_df[order(peng_df$year), ]\n\n  species    island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n1  Adelie Torgersen           39.1          18.7               181        3750\n2  Adelie Torgersen           39.5          17.4               186        3800\n3  Adelie Torgersen           40.3          18.0               195        3250\n4  Adelie Torgersen             NA            NA                NA          NA\n5  Adelie Torgersen           36.7          19.3               193        3450\n6  Adelie Torgersen           39.3          20.6               190        3650\n     sex year\n1   male 2007\n2 female 2007\n3 female 2007\n4   &lt;NA&gt; 2007\n5 female 2007\n6   male 2007\n [ reached 'max' / getOption(\"max.print\") -- omitted 338 rows ]\n\npeng_df[order(peng_df$year, decreasing = TRUE), ]\n\n    species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n101  Adelie Biscoe           35.0          17.9               192        3725\n102  Adelie Biscoe           41.0          20.0               203        4725\n103  Adelie Biscoe           37.7          16.0               183        3075\n104  Adelie Biscoe           37.8          20.0               190        4250\n105  Adelie Biscoe           37.9          18.6               193        2925\n106  Adelie Biscoe           39.7          18.9               184        3550\n       sex year\n101 female 2009\n102   male 2009\n103 female 2009\n104   male 2009\n105 female 2009\n106   male 2009\n [ reached 'max' / getOption(\"max.print\") -- omitted 338 rows ]\n\n## select columns\npeng_df[c(\"species\", \"sex\", \"year\")]\n\n   species    sex year\n1   Adelie   male 2007\n2   Adelie female 2007\n3   Adelie female 2007\n4   Adelie   &lt;NA&gt; 2007\n5   Adelie female 2007\n6   Adelie   male 2007\n7   Adelie female 2007\n8   Adelie   male 2007\n9   Adelie   &lt;NA&gt; 2007\n10  Adelie   &lt;NA&gt; 2007\n11  Adelie   &lt;NA&gt; 2007\n12  Adelie   &lt;NA&gt; 2007\n13  Adelie female 2007\n14  Adelie   male 2007\n15  Adelie   male 2007\n16  Adelie female 2007\n [ reached 'max' / getOption(\"max.print\") -- omitted 328 rows ]\n\npeng_df[grep(\"^bill\", names(peng_df), value = TRUE)]\n\n   bill_length_mm bill_depth_mm\n1            39.1          18.7\n2            39.5          17.4\n3            40.3          18.0\n4              NA            NA\n5            36.7          19.3\n6            39.3          20.6\n7            38.9          17.8\n8            39.2          19.6\n9            34.1          18.1\n10           42.0          20.2\n11           37.8          17.1\n12           37.8          17.3\n13           41.1          17.6\n14           38.6          21.2\n15           34.6          21.1\n16           36.6          17.8\n17           38.7          19.0\n18           42.5          20.7\n19           34.4          18.4\n20           46.0          21.5\n21           37.8          18.3\n22           37.7          18.7\n23           35.9          19.2\n24           38.2          18.1\n [ reached 'max' / getOption(\"max.print\") -- omitted 320 rows ]\n\nsubset(peng_df, select = bill_length_mm:body_mass_g)\n\n   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n1            39.1          18.7               181        3750\n2            39.5          17.4               186        3800\n3            40.3          18.0               195        3250\n4              NA            NA                NA          NA\n5            36.7          19.3               193        3450\n6            39.3          20.6               190        3650\n7            38.9          17.8               181        3625\n8            39.2          19.6               195        4675\n9            34.1          18.1               193        3475\n10           42.0          20.2               190        4250\n11           37.8          17.1               186        3300\n12           37.8          17.3               180        3700\n [ reached 'max' / getOption(\"max.print\") -- omitted 332 rows ]\n\n## create new columns\npeng_df$bill_ratio &lt;- with(peng_df, bill_length_mm / bill_depth_mm)\n# or\npeng_df &lt;- within(peng_df, {\n  bill_ratio &lt;- bill_length_mm / bill_depth_mm\n})\n#or\npeng_df &lt;- transform(peng_df, bill_ratio = bill_length_mm / bill_depth_mm)\n\n# reorder\npeng_df[c(\"species\", \"island\", \"bill_length_mm\", \n                     \"bill_depth_mm\", \"bill_ratio\", \"flipper_length_mm\", \n                     \"body_mass_g\", \"sex\", \"year\")]\n\n  species    island bill_length_mm bill_depth_mm bill_ratio flipper_length_mm\n1  Adelie Torgersen           39.1          18.7   2.090909               181\n2  Adelie Torgersen           39.5          17.4   2.270115               186\n3  Adelie Torgersen           40.3          18.0   2.238889               195\n4  Adelie Torgersen             NA            NA         NA                NA\n5  Adelie Torgersen           36.7          19.3   1.901554               193\n  body_mass_g    sex year\n1        3750   male 2007\n2        3800 female 2007\n3        3250 female 2007\n4          NA   &lt;NA&gt; 2007\n5        3450 female 2007\n [ reached 'max' / getOption(\"max.print\") -- omitted 339 rows ]\n\n\n\n\nTibble is often paired with dplyr, which is another package for data manipulation.\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n## subset\nfilter(penguins, !is.na(body_mass_g))\n\n# A tibble: 342 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           36.7          19.3               193        3450\n 5 Adelie  Torgersen           39.3          20.6               190        3650\n 6 Adelie  Torgersen           38.9          17.8               181        3625\n 7 Adelie  Torgersen           39.2          19.6               195        4675\n 8 Adelie  Torgersen           34.1          18.1               193        3475\n 9 Adelie  Torgersen           42            20.2               190        4250\n10 Adelie  Torgersen           37.8          17.1               186        3300\n# ℹ 332 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\nfilter(penguins, sex == \"male\")\n\n# A tibble: 168 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.3          20.6               190        3650\n 3 Adelie  Torgersen           39.2          19.6               195        4675\n 4 Adelie  Torgersen           38.6          21.2               191        3800\n 5 Adelie  Torgersen           34.6          21.1               198        4400\n 6 Adelie  Torgersen           42.5          20.7               197        4500\n 7 Adelie  Torgersen           46            21.5               194        4200\n 8 Adelie  Biscoe              37.7          18.7               180        3600\n 9 Adelie  Biscoe              38.2          18.1               185        3950\n10 Adelie  Biscoe              38.8          17.2               180        3800\n# ℹ 158 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\nslice(penguins, 1:6)\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n## sort\narrange(penguins, year)\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\narrange(penguins, desc(year))\n\n# A tibble: 344 × 8\n   species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Biscoe           35            17.9               192        3725\n 2 Adelie  Biscoe           41            20                 203        4725\n 3 Adelie  Biscoe           37.7          16                 183        3075\n 4 Adelie  Biscoe           37.8          20                 190        4250\n 5 Adelie  Biscoe           37.9          18.6               193        2925\n 6 Adelie  Biscoe           39.7          18.9               184        3550\n 7 Adelie  Biscoe           38.6          17.2               199        3750\n 8 Adelie  Biscoe           38.2          20                 190        3900\n 9 Adelie  Biscoe           38.1          17                 181        3175\n10 Adelie  Biscoe           43.2          19                 197        4775\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n## select columns\nselect(penguins, species, sex, year)\n\n# A tibble: 344 × 3\n   species sex     year\n   &lt;fct&gt;   &lt;fct&gt;  &lt;int&gt;\n 1 Adelie  male    2007\n 2 Adelie  female  2007\n 3 Adelie  female  2007\n 4 Adelie  &lt;NA&gt;    2007\n 5 Adelie  female  2007\n 6 Adelie  male    2007\n 7 Adelie  female  2007\n 8 Adelie  male    2007\n 9 Adelie  &lt;NA&gt;    2007\n10 Adelie  &lt;NA&gt;    2007\n# ℹ 334 more rows\n\nselect(penguins, starts_with(\"bill\"))\n\n# A tibble: 344 × 2\n   bill_length_mm bill_depth_mm\n            &lt;dbl&gt;         &lt;dbl&gt;\n 1           39.1          18.7\n 2           39.5          17.4\n 3           40.3          18  \n 4           NA            NA  \n 5           36.7          19.3\n 6           39.3          20.6\n 7           38.9          17.8\n 8           39.2          19.6\n 9           34.1          18.1\n10           42            20.2\n# ℹ 334 more rows\n\nselect(penguins, bill_length_mm:body_mass_g)\n\n# A tibble: 344 × 4\n   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n            &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1           39.1          18.7               181        3750\n 2           39.5          17.4               186        3800\n 3           40.3          18                 195        3250\n 4           NA            NA                  NA          NA\n 5           36.7          19.3               193        3450\n 6           39.3          20.6               190        3650\n 7           38.9          17.8               181        3625\n 8           39.2          19.6               195        4675\n 9           34.1          18.1               193        3475\n10           42            20.2               190        4250\n# ℹ 334 more rows\n\n## create new columns\nmutate(penguins, bill_ratio = bill_length_mm / bill_depth_mm) |&gt;\n  select(starts_with(\"bill\"))\n\n# A tibble: 344 × 3\n   bill_length_mm bill_depth_mm bill_ratio\n            &lt;dbl&gt;         &lt;dbl&gt;      &lt;dbl&gt;\n 1           39.1          18.7       2.09\n 2           39.5          17.4       2.27\n 3           40.3          18         2.24\n 4           NA            NA        NA   \n 5           36.7          19.3       1.90\n 6           39.3          20.6       1.91\n 7           38.9          17.8       2.19\n 8           39.2          19.6       2   \n 9           34.1          18.1       1.88\n10           42            20.2       2.08\n# ℹ 334 more rows\n\nmutate(penguins, bill_ratio = bill_length_mm / bill_depth_mm) |&gt;\n  relocate(bill_ratio, .after = bill_depth_mm)\n\n# A tibble: 344 × 9\n   species island    bill_length_mm bill_depth_mm bill_ratio flipper_length_mm\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;      &lt;dbl&gt;             &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7       2.09               181\n 2 Adelie  Torgersen           39.5          17.4       2.27               186\n 3 Adelie  Torgersen           40.3          18         2.24               195\n 4 Adelie  Torgersen           NA            NA        NA                   NA\n 5 Adelie  Torgersen           36.7          19.3       1.90               193\n 6 Adelie  Torgersen           39.3          20.6       1.91               190\n 7 Adelie  Torgersen           38.9          17.8       2.19               181\n 8 Adelie  Torgersen           39.2          19.6       2                  195\n 9 Adelie  Torgersen           34.1          18.1       1.88               193\n10 Adelie  Torgersen           42            20.2       2.08               190\n# ℹ 334 more rows\n# ℹ 3 more variables: body_mass_g &lt;int&gt;, sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n\n\nlibrary(data.table)\n\n\nAttaching package: 'data.table'\n\n\nThe following objects are masked from 'package:dplyr':\n\n    between, first, last\n\npeng_dt &lt;- data.table(penguins)\n\n## subset\npeng_dt[!is.na(body_mass_g)]\n\n       species    island bill_length_mm bill_depth_mm flipper_length_mm\n  1:    Adelie Torgersen           39.1          18.7               181\n  2:    Adelie Torgersen           39.5          17.4               186\n  3:    Adelie Torgersen           40.3          18.0               195\n  4:    Adelie Torgersen           36.7          19.3               193\n  5:    Adelie Torgersen           39.3          20.6               190\n ---                                                                   \n     body_mass_g    sex year\n  1:        3750   male 2007\n  2:        3800 female 2007\n  3:        3250 female 2007\n  4:        3450 female 2007\n  5:        3650   male 2007\n ---                        \n [ reached getOption(\"max.print\") -- omitted 5 rows ]\n\npeng_dt[sex == \"male\"]\n\n       species    island bill_length_mm bill_depth_mm flipper_length_mm\n  1:    Adelie Torgersen           39.1          18.7               181\n  2:    Adelie Torgersen           39.3          20.6               190\n  3:    Adelie Torgersen           39.2          19.6               195\n  4:    Adelie Torgersen           38.6          21.2               191\n  5:    Adelie Torgersen           34.6          21.1               198\n ---                                                                   \n     body_mass_g  sex year\n  1:        3750 male 2007\n  2:        3650 male 2007\n  3:        4675 male 2007\n  4:        3800 male 2007\n  5:        4400 male 2007\n ---                      \n [ reached getOption(\"max.print\") -- omitted 5 rows ]\n\npeng_dt[1:6]\n\n   species    island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n1:  Adelie Torgersen           39.1          18.7               181        3750\n2:  Adelie Torgersen           39.5          17.4               186        3800\n3:  Adelie Torgersen           40.3          18.0               195        3250\n4:  Adelie Torgersen             NA            NA                NA          NA\n5:  Adelie Torgersen           36.7          19.3               193        3450\n6:  Adelie Torgersen           39.3          20.6               190        3650\n      sex year\n1:   male 2007\n2: female 2007\n3: female 2007\n4:   &lt;NA&gt; 2007\n5: female 2007\n6:   male 2007\n\n## sort\nsetorder(peng_dt, year) # doesn't return anything but modifies the table\npeng_dt\n\n       species    island bill_length_mm bill_depth_mm flipper_length_mm\n  1:    Adelie Torgersen           39.1          18.7               181\n  2:    Adelie Torgersen           39.5          17.4               186\n  3:    Adelie Torgersen           40.3          18.0               195\n  4:    Adelie Torgersen             NA            NA                NA\n  5:    Adelie Torgersen           36.7          19.3               193\n ---                                                                   \n     body_mass_g    sex year\n  1:        3750   male 2007\n  2:        3800 female 2007\n  3:        3250 female 2007\n  4:          NA   &lt;NA&gt; 2007\n  5:        3450 female 2007\n ---                        \n [ reached getOption(\"max.print\") -- omitted 5 rows ]\n\nsetorder(peng_dt, -year)\npeng_dt\n\n       species island bill_length_mm bill_depth_mm flipper_length_mm\n  1:    Adelie Biscoe           35.0          17.9               192\n  2:    Adelie Biscoe           41.0          20.0               203\n  3:    Adelie Biscoe           37.7          16.0               183\n  4:    Adelie Biscoe           37.8          20.0               190\n  5:    Adelie Biscoe           37.9          18.6               193\n ---                                                                \n     body_mass_g    sex year\n  1:        3725 female 2009\n  2:        4725   male 2009\n  3:        3075 female 2009\n  4:        4250   male 2009\n  5:        2925 female 2009\n ---                        \n [ reached getOption(\"max.print\") -- omitted 5 rows ]\n\n## select columns\npeng_dt[, .(species, sex, year)]\n\n       species    sex year\n  1:    Adelie female 2009\n  2:    Adelie   male 2009\n  3:    Adelie female 2009\n  4:    Adelie   male 2009\n  5:    Adelie female 2009\n ---                      \n340: Chinstrap   male 2007\n341: Chinstrap female 2007\n342: Chinstrap   male 2007\n343: Chinstrap female 2007\n344: Chinstrap   male 2007\n\npeng_dt[, grep(\"^bill\", names(peng_dt)), with = FALSE]\n\n     bill_length_mm bill_depth_mm\n  1:           35.0          17.9\n  2:           41.0          20.0\n  3:           37.7          16.0\n  4:           37.8          20.0\n  5:           37.9          18.6\n ---                             \n340:           48.5          17.5\n341:           43.2          16.6\n342:           50.6          19.4\n343:           46.7          17.9\n344:           52.0          19.0\n\npeng_dt[, bill_length_mm:body_mass_g]\n\n     bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  1:           35.0          17.9               192        3725\n  2:           41.0          20.0               203        4725\n  3:           37.7          16.0               183        3075\n  4:           37.8          20.0               190        4250\n  5:           37.9          18.6               193        2925\n ---                                                           \n340:           48.5          17.5               191        3400\n341:           43.2          16.6               187        2900\n342:           50.6          19.4               193        3800\n343:           46.7          17.9               195        3300\n344:           52.0          19.0               197        4150\n\n## create new columns\npeng_dt[, bill_ratio := bill_length_mm / bill_depth_mm]\npeng_dt\n\n       species island bill_length_mm bill_depth_mm flipper_length_mm\n  1:    Adelie Biscoe           35.0          17.9               192\n  2:    Adelie Biscoe           41.0          20.0               203\n  3:    Adelie Biscoe           37.7          16.0               183\n  4:    Adelie Biscoe           37.8          20.0               190\n  5:    Adelie Biscoe           37.9          18.6               193\n     body_mass_g    sex year bill_ratio\n  1:        3725 female 2009   1.955307\n  2:        4725   male 2009   2.050000\n  3:        3075 female 2009   2.356250\n  4:        4250   male 2009   1.890000\n  5:        2925 female 2009   2.037634\n [ reached getOption(\"max.print\") -- omitted 6 rows ]\n\n# transform but doesn't modify the dt\npeng_dt[, .(bill_ratio = bill_length_mm / bill_depth_mm)]\n\n     bill_ratio\n  1:   1.955307\n  2:   2.050000\n  3:   2.356250\n  4:   1.890000\n  5:   2.037634\n ---           \n340:   2.771429\n341:   2.602410\n342:   2.608247\n343:   2.608939\n344:   2.736842\n\n# returns a vector\npeng_dt[, (bill_ratio = bill_length_mm / bill_depth_mm)]\n\n [1] 1.955307 2.050000 2.356250 1.890000 2.037634 2.100529 2.244186 1.910000\n [9] 2.241176 2.273684 2.309091 2.246305 2.242938 2.164103 1.913043 2.333333\n[17] 2.270588 1.819512 2.100000 2.209677 2.104651 1.904040 2.364706 2.237838\n[25] 2.213836 2.136842 2.204545 2.267760 2.280702 2.450000 2.150838 2.244792\n[33] 1.989189 2.027027 2.164773 2.348571 2.034286 2.000000 2.242424 2.217877\n[41] 2.350877 2.360465 2.070968 2.394118 2.220238 2.085561 2.107527 1.989130\n [ reached getOption(\"max.print\") -- omitted 296 entries ]\n\n# reorder columns\n\nsetcolorder(peng_dt, c(\"species\", \"island\", \"bill_length_mm\", \n                     \"bill_depth_mm\", \"bill_ratio\"))\npeng_dt\n\n       species island bill_length_mm bill_depth_mm bill_ratio flipper_length_mm\n  1:    Adelie Biscoe           35.0          17.9   1.955307               192\n  2:    Adelie Biscoe           41.0          20.0   2.050000               203\n  3:    Adelie Biscoe           37.7          16.0   2.356250               183\n  4:    Adelie Biscoe           37.8          20.0   1.890000               190\n  5:    Adelie Biscoe           37.9          18.6   2.037634               193\n     body_mass_g    sex year\n  1:        3725 female 2009\n  2:        4725   male 2009\n  3:        3075 female 2009\n  4:        4250   male 2009\n  5:        2925 female 2009\n [ reached getOption(\"max.print\") -- omitted 6 rows ]\n\n\n\n\n\n\n\nNotes\nIn the above we used the function grep(\"^bill\", names(penguins)). The first string is called a ‘regular expression’, and in this case \"^bill\" can be translated to “starts with bill”. This defines a pattern that is checked against the names(penguins) which contains species, island, bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g, sex, year. Which column names match the pattern?\nRegular expressions are very flexible in terms of how you can define patterns. We will use them again in more depth when we talk about working with character data."
  },
  {
    "objectID": "exercises/dataviz.html",
    "href": "exercises/dataviz.html",
    "title": "Data visualization – exercises",
    "section": "",
    "text": "In this lesson you will\n\nUnderstand how R creates images with base graphics and ggplot2\nPractice using ggplot2 to customize figures\nPractice creating reusable tools for plotting"
  },
  {
    "objectID": "exercises/dataviz.html#create-your-own-theme",
    "href": "exercises/dataviz.html#create-your-own-theme",
    "title": "Data visualization – exercises",
    "section": "Create your own theme",
    "text": "Create your own theme\nLoad the ggplot2 package and customize your own theme. Look at the built-in themes and the ggthemes package for inspiration.\n\nTips\n\nYou can save your customization using the theme(), but that will only modify the current theme\n\n\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\nmytheme &lt;- theme(strip.background = element_rect(fill = \"steelblue\"), \n        text = element_text(family = \"Comic sans\"), \n        plot.background = element_rect(fill = \"grey81\"), \n        legend.background = element_rect(fill = NA), \n        legend.position = \"bottom\"\n        ) \n\nggplot(penguins, aes(x = body_mass_g, y = bill_length_mm, color = species)) + \n  geom_point() + facet_wrap(~ year) + mytheme\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\ntheme_set(theme_bw())\nggplot(penguins, aes(x = body_mass_g, y = bill_length_mm, color = species)) + \n  geom_point() + facet_wrap(~ year) + mytheme\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\nTo make a fully custom theme, start with an existing one, and modify it\n\n\nmy_fulltheme &lt;- theme_grey() + mytheme\n\nggplot(penguins, aes(x = body_mass_g, y = bill_length_mm, color = species)) + \n  geom_point() + facet_wrap(~ year) + my_fulltheme\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\nSave your favorite color scales as a function for easy reuse. Use discrete_scale or continuous_scale.\n\n\nmy_qual_scale &lt;- function(...) {\n  discrete_scale(\"color\", scale_name = \"OI\", \n                 palette = function(x) {\n                   res &lt;- palette.colors(x, \"Okabe-Ito\")[1:x]\n                   names(res) &lt;- NULL\n                   res\n                 }, ...)\n}\n\nggplot(penguins, aes(x = body_mass_g, y = bill_length_mm, color = species)) + \n  geom_point() + facet_wrap(~ year) + my_fulltheme + my_qual_scale()\n\nWarning: Removed 2 rows containing missing values (`geom_point()`)."
  },
  {
    "objectID": "exercises/dataviz.html#make-a-better-plot-than-before",
    "href": "exercises/dataviz.html#make-a-better-plot-than-before",
    "title": "Data visualization – exercises",
    "section": "Make a better plot than before",
    "text": "Make a better plot than before\nUse a figure from a recent analysis or publication that you would like to reproduce or enhance. Use tidy data principles to set yourself up for success."
  },
  {
    "objectID": "exercises/dataviz.html#complex-figures-with-base-graphics",
    "href": "exercises/dataviz.html#complex-figures-with-base-graphics",
    "title": "Data visualization – exercises",
    "section": "Complex figures with base graphics",
    "text": "Complex figures with base graphics\nCheck out this violin plot\n\nggplot(penguins, aes(x = species, y = body_mass_g)) + geom_violin() + geom_jitter()\n\nWarning: Removed 2 rows containing non-finite values (`stat_ydensity()`).\n\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nHow would you produce a similar plot using base graphics? After doing so, reflect, do you appreciate to convenience and flexibility of ggplot2?\n\n\nHints\n\nUse the density function to calculate the densities by species. The results are stored in a list with elements x and y. Then transform by rotating 90 degrees and mirroring. Plot the result using the polygon function.\n\ndens_by_species &lt;- split(penguins$body_mass_g, penguins$species) |&gt; \n  lapply(density, na.rm = TRUE, cut = 0)\n\nplot(body_mass_g ~ jitter(as.numeric(as.factor(species))), \n     data = penguins)\n\n\n\n## rotate, scale, and mirror the densities, then add with polygon"
  },
  {
    "objectID": "exercises/dates-and-strings.html",
    "href": "exercises/dates-and-strings.html",
    "title": "Dates and character strings – exercises",
    "section": "",
    "text": "In this lesson you will\n\nManipulate dates and times with lubridate\nLearn some basic regular expressions for matching ICD-10/ATC codes"
  },
  {
    "objectID": "exercises/dates-and-strings.html#read-in-the-data",
    "href": "exercises/dates-and-strings.html#read-in-the-data",
    "title": "Dates and character strings – exercises",
    "section": "Read in the data",
    "text": "Read in the data\nFrom the data, download and read in the file “med-2005-ex.rds”.\n\nlibrary(here)\n\nhere() starts at /home/sachsmc/Teaching/Courses/r-programming\n\nmed2005 &lt;- readRDS(here(\"data\", \"med-2005-ex.rds\"))"
  },
  {
    "objectID": "exercises/dates-and-strings.html#dates",
    "href": "exercises/dates-and-strings.html#dates",
    "title": "Dates and character strings – exercises",
    "section": "Dates",
    "text": "Dates\n\nUse the lubridate package (try the function wday) to calculate the day of the week when the dispensation occurred. Do dispensations occur less frequently on weekends?\nCalculate the month of the dispensation. Is there a seasonal trend on the number of dispensations?\nUse dplyr or data.table to create a new variable that is the last dispensation for each individual during the year (using group_by then mutate or := with by). Then calculate the number of days between each dispensation and the last one. What is the average number of days?"
  },
  {
    "objectID": "exercises/dates-and-strings.html#regular-expressions",
    "href": "exercises/dates-and-strings.html#regular-expressions",
    "title": "Dates and character strings – exercises",
    "section": "Regular expressions",
    "text": "Regular expressions\nThe “atc” variable contains the ATC code for the drug that was dispensed. This is a standardized classification system for drugs, see https://www.whocc.no/atc/structure_and_principles/.\n\nCount how many dispensations there were for drugs in the class “J01”. Use the grepl function with a pattern.\nAre there any “invalid” ATC codes in the dataset?"
  },
  {
    "objectID": "exercises/dynamic-documents.html",
    "href": "exercises/dynamic-documents.html",
    "title": "Dynamic documents – exercises",
    "section": "",
    "text": "In this lesson you will\n\nLearn how to set up a quarto or rmarkdown document\nPractice managing code chunks to get output to look the way you want\nPractice and get help with everything you learned in the course"
  },
  {
    "objectID": "exercises/dynamic-documents.html#testing-out-quarto",
    "href": "exercises/dynamic-documents.html#testing-out-quarto",
    "title": "Dynamic documents – exercises",
    "section": "Testing out Quarto",
    "text": "Testing out Quarto\n\nIf you can, download and install Quarto from here: https://quarto.org/docs/get-started/\nIn Rstudio, click on “New” and then “Quarto document”. Give it a name, and choose an output format (the format that you will view the rendered document in).\nAdd a title, insert a code chunk, and write some prose. Example: print out the first six rows of the palmerpenguins dataset.\nClick on “Render” and see what happens\nExperiment with changing the yaml header options, click on Render again and see what changes. Example, if you are using the html output format, try changing the theme.\nExperiment with changing one of the code chunks in the document, Re-render and see what changes."
  },
  {
    "objectID": "exercises/flow-and-loops.html",
    "href": "exercises/flow-and-loops.html",
    "title": "Flow control and loops – exercises",
    "section": "",
    "text": "In this lesson you will\n\nPractice working with if and else statements for conditional execution\nPractice working with loops for repeated execution"
  },
  {
    "objectID": "exercises/flow-and-loops.html#simple-loops-and-conditional-statements",
    "href": "exercises/flow-and-loops.html#simple-loops-and-conditional-statements",
    "title": "Flow control and loops – exercises",
    "section": "Simple loops and conditional statements",
    "text": "Simple loops and conditional statements\n\nUse a loop to print every number from 1 to 10\nModify the loop to print every even number from 1 to 10 (hint: add an if statement and use (i %% 2) == 0 to check whether i is divisible by 2)."
  },
  {
    "objectID": "exercises/flow-and-loops.html#loops-for-statistical-analysis",
    "href": "exercises/flow-and-loops.html#loops-for-statistical-analysis",
    "title": "Flow control and loops – exercises",
    "section": "Loops for statistical analysis",
    "text": "Loops for statistical analysis\nLoad the palmerpenguins dataset:\n\nlibrary(palmerpenguins)\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\nWrite a loop that calculates and prints out the mean for each numeric variable in the penguins dataset\n\n\n\nHints\n\n\nHow do you determine if a variable is numeric? You can use the is.numeric function, which returns TRUE or FALSE\nInside a loop, sometimes R does not print things to the console, so you need to wrap them in the print function, e.g., print(mean(x)) inside the loop.\n\n\n\nModify your loop in 1 so that it prints out the mean, standard deviation, median, and interquartile range for each numeric variable in penguins.\n\n\n\nHints\n\n\nUse a nested loop where one of the iterators is the name of a function. To retrieve a function by name, use the get function, e.g., get(\"mean\") returns the mean function, which can then saved as an intermediate object and be used like any other function.\n\n\n\nWrite a loop to compute 500 bootstrap replicates of the means of bill length, bill depth, and flipper length. Remember to pre-allocate a data structure to store the 500 times 3 values. Provide an estimate of the correlation of the sample means.\n\n\n\nHints\n\n\nTo get a bootstrap sample of a vector, use the sample function with the argument replace = TRUE.\nYou can store the replicates in a matrix with 500 rows and 3 columns. Refer to the data structures lecture for information about indexing matrices."
  },
  {
    "objectID": "exercises/flow-and-loops.html#loops-for-numeric-calculation",
    "href": "exercises/flow-and-loops.html#loops-for-numeric-calculation",
    "title": "Flow control and loops – exercises",
    "section": "Loops for numeric calculation",
    "text": "Loops for numeric calculation\nLoops are sometimes unavoidable if a calculation depends on the value at one or more of the previous iterations.\nOne way to compute the Kaplan-Meier curve for right censored data is to loop through the death times and accumulate the product of 1 minus the number of deaths at each time over the number at risk at that time. Complete the following code to compute the KM curve and compare to the result from the survival package.\n\namldat &lt;- survival::aml\nlibrary(survival)\n\ndeathtimes &lt;- c(0, sort(unique(amldat$time[amldat$status == 1])))\nsurv &lt;- c(1, numeric(length(deathtimes) - 1))\n\nfor(i in 2:length(deathtimes)) {\n  \n  ## n_i = number still at risk\n  atrisk &lt;- subset(amldat, time &gt; deathtimes[i - 1])\n  \n  ## count the number of deaths at time ti, call it d_i\n  \n  ## then compute 1 - d_i / n_i and multiply it by the previous survival probability\n  \n}\n\n## plot(surv ~ deathtimes)\n## lines(survfit(Surv(time, status) ~ 1, data = amldat))"
  },
  {
    "objectID": "exercises/flow-and-loops.html#optional-loops-to-do-data-manipulation",
    "href": "exercises/flow-and-loops.html#optional-loops-to-do-data-manipulation",
    "title": "Flow control and loops – exercises",
    "section": "Optional: Loops to do data manipulation",
    "text": "Optional: Loops to do data manipulation\n\n\n\n\n\n\nImportant\n\n\n\nThis exercises uses some concepts from functional programming, which we have not covered yet. Try it if you have time, but if not you can return to this after the functions lecture.\n\n\nYou may notice that some of the variables have missing values. We would like to replace the missing values with the “typical” value that is observed.\n\nWrite a loop that contains an if then else statement that goes through the variables in penguins and replaces missing values with the mean for numeric double variables, and the most frequent value for characters or factors.\n\n\n\nHints\n\n\nUse this function to calculate the mode in a way that returns the same data type.\n\n\nmy_mode &lt;- function(x) {\n  \n  converter &lt;- get(paste0(\"as.\", class(x)))\n  tab &lt;- table(x) |&gt; sort(decreasing = TRUE) \n  names(tab)[1] |&gt; converter()\n  \n}\n\n\nInside the loop you will need to check whether the variable is of type “double”. Do this using the is.double function, which returns a TRUE or FALSE.\nTo assign a new value m to only the missing elements of a vector x, you can do the following x[is.na(x)] &lt;- m. Refer to the data structures lecture for information about indexing vectors"
  },
  {
    "objectID": "exercises/functions.html",
    "href": "exercises/functions.html",
    "title": "Functions – exercises",
    "section": "",
    "text": "In this lesson you will\n\nLearn how the apply family of functions works, and the alternatives using dplyr and data.table\nPractice writing and reusing your own functions"
  },
  {
    "objectID": "exercises/functions.html#iterating-over-data-with-functions",
    "href": "exercises/functions.html#iterating-over-data-with-functions",
    "title": "Functions – exercises",
    "section": "Iterating over data with functions",
    "text": "Iterating over data with functions\n\nLoad the Palmer penguins dataset.\nWrite a function to compute the mean and standard deviation of a numeric vector. We will apply this function to the numeric variables in penguins, and also by different subgroups\n\n\nStop and think\n\nWhat are the components of a function?\nDo I have to worry about missing data? How can I deal with it?\nWhat sort of data structure should I return?"
  },
  {
    "objectID": "exercises/functions.html#using-the-function",
    "href": "exercises/functions.html#using-the-function",
    "title": "Functions – exercises",
    "section": "Using the function",
    "text": "Using the function\n\nUse your function to compute the mean and sd of all the numeric variables in penguins.\nUse your function to compute the mean and sd of body mass by species and sex\n\nTry using one of the apply functions\n\n\n\n\nHints\n\n\nsplit(penguins$body_mass_g, list(penguins$species, penguins$sex)) |&gt;\n  lapply(FUN = mean_sd)\n\nTry sapply instead of lapply. What about tapply?\n\n\nTry using dplyr: check out the functions group_by and summarize\n\n\n\nHints\n\n\nlibrary(dplyr)\npenguins |&gt; group_by(species, sex) |&gt;\n  summarize(mean_sd(body_mass_g))\n\n\n\nTry using data.table: use the .by argument in the [\n\n\n\nHints\n\n\nlibrary(data.table)\npengdt &lt;- data.table(penguins)\n\npengdt[, mean_sd(body_mass_g), by = list(species, sex)]\n## . can be used as shorthand for list in data table\npengdt[, mean_sd(body_mass_g), by = .(species, sex)]"
  },
  {
    "objectID": "exercises/functions.html#classes-and-custom-generics",
    "href": "exercises/functions.html#classes-and-custom-generics",
    "title": "Functions – exercises",
    "section": "Classes and custom generics",
    "text": "Classes and custom generics\nNow that you have some functions to do something interesting, let’s create a “class” to indicate that the object has a specific meaning.\n\nModify your mean and sd function so that the data structure that is returned has class “meansd”. There are two ways to do this:\n\nSay the object you currently return is called res, instead of res, return structure(res, class = \"meansd\")\nAdd the line class(res) &lt;- \"meansd\" before returning `res``\nUse the attr function to create and assign additional information, for example the name of the variable, You can get the name of the object passed to x using deparse1(substitute(x)).\n\n\n\n\nHints\n\n\nmean_sd2 &lt;- function(x, na.rm = TRUE) {\n  res &lt;- c(mean = mean(x, na.rm = na.rm), \n           sd = sd(x, na.rm = na.rm))\n  \n  attr(res, \"variable\") &lt;- deparse1(substitute(x))\n  class(res) &lt;- \"meansd\"\n  res\n}\n\n\n\nWrite a custom print function print.meansd that nicely prints the mean and standard deviation. Use the functions round and paste functions to create a string, then print it out using the cat function.\n\n\n\nHints\n\n\nprint.meansd &lt;- function(x, digits = 2) {\n  \n  msd &lt;- paste0(round(x[\"mean\"], digits = digits), \" (\", \n                round(x[\"sd\"], digits = digits), \")\")\n  \n  cat(\"mean (sd) of \", \n      attr(x, \"variable\"), \":\", \n      msd, \"\\n\")\n  \n}"
  },
  {
    "objectID": "exercises/functions.html#more-functions",
    "href": "exercises/functions.html#more-functions",
    "title": "Functions – exercises",
    "section": "More functions",
    "text": "More functions\n\nWrite another function that constructs a one-sample t-statistic from an estimated mean and standard deviation. Recall that the t-statistic to test the null hypothesis that \\(\\mu = \\mu_0\\) is \\[\nT = \\frac{\\overline{X} - \\mu_0}{\\hat{\\sigma}/\\sqrt{n}}\n\\] where \\(\\overline{X}\\) is the sample mean and \\(\\hat{\\sigma}\\) is the sample standard deviation and \\(n\\) is the sample size.\nWrite another function that takes the t-statistic and calculates a p-value\nCompose your custom functions in order to test the null hypothesis that the mean body mass of penguins is 4000g. Try using the pipe operator |&gt;.\n\n\nIf you have time or on your own\n\nExpand your class to include confidence interval and p-value calculation/printing. Check out the scales::pvalue function.\nLook at the t.test function. What type of object does this return?\nLook at the print method for the class of the object returned by t.test, use the command stats:::print.htest to find the source. How does it work? How would you modify it?\nAre there any other methods are available for that class? Use the methods function to find out. What would be another useful method for this class?"
  },
  {
    "objectID": "exercises/index.html",
    "href": "exercises/index.html",
    "title": "Exercises",
    "section": "",
    "text": "Project organization and workflow – exercises\n\n\nDay 0\n\n\nUnderstanding how R deals with the current working directory, practice using relative paths in R input and output, and testing out the here package for managing file paths in a project\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nDynamic documents – exercises\n\n\nDay 1, A\n\n\nUsing rmarkdown and quarto to create reproducible and dynamic documents for reporting statistical analyses\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nData structures – exercises\n\n\nDay 1, B\n\n\nUnderstanding basic data structures in R, including vectors, arrays, lists, and data frames\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nFlow control and loops – exercises\n\n\nDay 2, A\n\n\nUnderstanding conditional and repeated execution of R expressions\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nFunctions – exercises\n\n\nDay 2, B\n\n\nUnderstanding how to create and use your own functions\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nDates and character strings – exercises\n\n\nDay 3, B\n\n\nUnderstanding the pitfalls of dealing with dates, times, and manipulating strings with regular expressions\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nTidying and reshaping – exercises\n\n\nDay 3, B\n\n\nPractice manipulating data by tidying and reshaping\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nData visualization – exercises\n\n\nDay 4, C\n\n\nUnderstanding how R creates images with base graphics and ggplot2, practice using ggplot2 to customize figures, and practice creating reusable tools for plotting\n\n\n\n\n \n\n\n\n\nNo matching items"
  },
  {
    "objectID": "exercises/projects.html",
    "href": "exercises/projects.html",
    "title": "Project organization and workflow – exercises",
    "section": "",
    "text": "In this lesson you will\n\nUnderstand how R interacts with the current working directory\nPractice using relative paths in R input and output\nTry out using the here package for managing file paths in a project"
  },
  {
    "objectID": "exercises/projects.html#create-your-project-directory",
    "href": "exercises/projects.html#create-your-project-directory",
    "title": "Project organization and workflow – exercises",
    "section": "Create your project directory",
    "text": "Create your project directory\nIn this lesson we will organize a toy project about the Palmer Penguins dataset. In the end you will share the project with your neighbor and ask them to reproduce your results, so keep that in mind.\n\nCreate a new folder on your computer for this project. Name it whatever you want but something short but informative.\nUsing a directory structure of your choice, set it up as a project template. Remember to include a README file. This project will involve some data input, manipulation, and some output of figures.\nAcquire the Palmer Penguins dataset from here"
  },
  {
    "objectID": "exercises/projects.html#do-some-data-manipulation",
    "href": "exercises/projects.html#do-some-data-manipulation",
    "title": "Project organization and workflow – exercises",
    "section": "Do some data manipulation",
    "text": "Do some data manipulation\n\nCreate a new .R script in the appropriate directory of your project.\nOpen up the R script in your favorite integrated development environment (IDE, aka script editor, e.g., Rstudio or vscode)\nRead in the penguins dataset and create a new variable called the “penguin body mass index”. It is the body mass in grams divided by the square of flipper length in millimeters\nSave the results in your project directory, try using the here function."
  },
  {
    "objectID": "exercises/projects.html#do-some-data-analysis",
    "href": "exercises/projects.html#do-some-data-analysis",
    "title": "Project organization and workflow – exercises",
    "section": "Do some data analysis",
    "text": "Do some data analysis\n\nCreate another .R script\nMake a scatterplot of body mass index versus bill length, with color by species\nMake a boxplot of body mass index by sex.\nDo a t-test for body mass index by sex.\nSave the results in your project directory, try using the here function.\n\n\nStop and think\nYou are going to share this project with your friend. In order for them to reproduce the results that you obtained, they will need the same data. Think about different ways that they can obtain the dataset. What are the pros and cons?"
  },
  {
    "objectID": "exercises/projects.html#share-with-your-neighbor",
    "href": "exercises/projects.html#share-with-your-neighbor",
    "title": "Project organization and workflow – exercises",
    "section": "Share with your neighbor",
    "text": "Share with your neighbor\n\nUpdate your README file.\nZip up the project folder and send it to your partner.\nWhen you receive their project, unzip it, open it in a new R session and try to reproduce their results."
  },
  {
    "objectID": "exercises/solutions/data-structures.html",
    "href": "exercises/solutions/data-structures.html",
    "title": "Data structures – exercise solutions",
    "section": "",
    "text": "Take the sum of each row of M1\nCreate a new matrix called M2 that is M1 with the diagonal elements replaced by 0s\nCreate a new matrix called M3 that is M1 but with all values less than 4 replaced by -1\nAppend the three matrices into an array with dimensions 4, 4, 3.\n\n\nM1 &lt;- matrix(1:16, nrow = 4, ncol = 4)\n\n## 1.\nrowSums(M1)\n\n[1] 28 32 36 40\n\n# or the matrix arithmetic way\nM1 %*% matrix(1, nrow = nrow(M1), ncol = 1)\n\n     [,1]\n[1,]   28\n[2,]   32\n[3,]   36\n[4,]   40\n\n## 2. \nM2 &lt;- M1\ndiag(M2) &lt;- 0\n\n## 3.\nM3 &lt;- M1\nM3[M3 &lt; 4] &lt;- -1\n\n## 4. \nA1 &lt;- array(NA, dim = c(4, 4, 3))\nA1[,,1] &lt;- M1\nA1[,,2] &lt;- M2\nA1[,,3] &lt;- M3"
  },
  {
    "objectID": "exercises/solutions/data-structures.html#vectors-and-matrices",
    "href": "exercises/solutions/data-structures.html#vectors-and-matrices",
    "title": "Data structures – exercise solutions",
    "section": "",
    "text": "Take the sum of each row of M1\nCreate a new matrix called M2 that is M1 with the diagonal elements replaced by 0s\nCreate a new matrix called M3 that is M1 but with all values less than 4 replaced by -1\nAppend the three matrices into an array with dimensions 4, 4, 3.\n\n\nM1 &lt;- matrix(1:16, nrow = 4, ncol = 4)\n\n## 1.\nrowSums(M1)\n\n[1] 28 32 36 40\n\n# or the matrix arithmetic way\nM1 %*% matrix(1, nrow = nrow(M1), ncol = 1)\n\n     [,1]\n[1,]   28\n[2,]   32\n[3,]   36\n[4,]   40\n\n## 2. \nM2 &lt;- M1\ndiag(M2) &lt;- 0\n\n## 3.\nM3 &lt;- M1\nM3[M3 &lt; 4] &lt;- -1\n\n## 4. \nA1 &lt;- array(NA, dim = c(4, 4, 3))\nA1[,,1] &lt;- M1\nA1[,,2] &lt;- M2\nA1[,,3] &lt;- M3"
  },
  {
    "objectID": "exercises/solutions/data-structures.html#organizing-output-from-a-statistical-analysis",
    "href": "exercises/solutions/data-structures.html#organizing-output-from-a-statistical-analysis",
    "title": "Data structures – exercise solutions",
    "section": "Organizing output from a statistical analysis",
    "text": "Organizing output from a statistical analysis\n\nlibrary(palmerpenguins)\n\nby(penguins$body_mass_g, list(penguins$sex, penguins$species), summary)\n\n: female\n: Adelie\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   2850    3175    3400    3369    3550    3900 \n------------------------------------------------------------ \n: male\n: Adelie\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   3325    3800    4000    4043    4300    4775 \n------------------------------------------------------------ \n: female\n: Chinstrap\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   2700    3362    3550    3527    3694    4150 \n------------------------------------------------------------ \n: male\n: Chinstrap\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   3250    3731    3950    3939    4100    4800 \n------------------------------------------------------------ \n: female\n: Gentoo\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   3950    4462    4700    4680    4875    5200 \n------------------------------------------------------------ \n: male\n: Gentoo\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   4750    5300    5500    5485    5700    6300 \n\nmassfit &lt;- lm(body_mass_g ~ sex * species, data = penguins)\nsummary(massfit)\n\n\nCall:\nlm(formula = body_mass_g ~ sex * species, data = penguins)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-827.21 -213.97   11.03  206.51  861.03 \n\nCoefficients:\n                         Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)               3368.84      36.21  93.030  &lt; 2e-16 ***\nsexmale                    674.66      51.21  13.174  &lt; 2e-16 ***\nspeciesChinstrap           158.37      64.24   2.465  0.01420 *  \nspeciesGentoo             1310.91      54.42  24.088  &lt; 2e-16 ***\nsexmale:speciesChinstrap  -262.89      90.85  -2.894  0.00406 ** \nsexmale:speciesGentoo      130.44      76.44   1.706  0.08886 .  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 309.4 on 327 degrees of freedom\n  (11 observations deleted due to missingness)\nMultiple R-squared:  0.8546,    Adjusted R-squared:  0.8524 \nF-statistic: 384.3 on 5 and 327 DF,  p-value: &lt; 2.2e-16\n\nboxplot(body_mass_g ~ sex * species, data = penguins, \n        col = rep(c(\"slateblue\", \"salmon\"), 3))\nlegend(\"topleft\", fill = c(\"slateblue\", \"salmon\"), \n       legend = c(\"Female\", \"Male\"))\n\n\n\n\nInspect the massfit object. What type of data structure is it, and what does it contain?\n\nIt is a list with class “lm”. It contains lots of information about the model fit.\n\nYou are planning a publication about the association/interaction between species and sex on body mass. The paper will include descriptive statistics, statistical inference, and some figures. You will likely present the results at a conference or in a lab meeting.\n\nWhat are some different approaches to save the results?\nDiscuss the pros and cons of your suggested approaches.\n\n\nOne approach would be to save is to save the regression fit as an rds file and read it into different R markdown documents to use it for different purposes. Also the figures could be saved as pngs and used in different documents. An alternative is to save the analysis dataset as a file, and the code used to reproduce the analysis, including the figures. The advantage of the 2nd approach is that the output can be tailored to the specific use of the results (e.g., change figure size/resolution for presentation vs manuscript)."
  },
  {
    "objectID": "exercises/solutions/dataviz.html",
    "href": "exercises/solutions/dataviz.html",
    "title": "Data visualization – exercise solutions",
    "section": "",
    "text": "Load the ggplot2 package and customize your own theme. Look at the built-in themes and the ggthemes package for inspiration.\n\n\n\nYou can save your customization using the theme(), but that will only modify the current theme\n\n\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\nmytheme &lt;- theme(strip.background = element_rect(fill = \"steelblue\"), \n        text = element_text(family = \"Comic sans\"), \n        plot.background = element_rect(fill = \"grey81\"), \n        legend.background = element_rect(fill = NA), \n        legend.position = \"bottom\"\n        ) \n\nggplot(penguins, aes(x = body_mass_g, y = bill_length_mm, color = species)) + \n  geom_point() + facet_wrap(~ year) + mytheme\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\ntheme_set(theme_bw())\nggplot(penguins, aes(x = body_mass_g, y = bill_length_mm, color = species)) + \n  geom_point() + facet_wrap(~ year) + mytheme\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\nTo make a fully custom theme, start with an existing one, and modify it\n\n\nmy_fulltheme &lt;- theme_grey() + mytheme\n\nggplot(penguins, aes(x = body_mass_g, y = bill_length_mm, color = species)) + \n  geom_point() + facet_wrap(~ year) + my_fulltheme\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\nSave your favorite color scales as a function for easy reuse. Use discrete_scale or continuous_scale.\n\n\nmy_qual_scale &lt;- function(...) {\n  discrete_scale(\"color\", scale_name = \"OI\", \n                 palette = function(x) {\n                   res &lt;- palette.colors(x, \"Okabe-Ito\")[1:x]\n                   names(res) &lt;- NULL\n                   res\n                 }, ...)\n}\n\nggplot(penguins, aes(x = body_mass_g, y = bill_length_mm, color = species)) + \n  geom_point() + facet_wrap(~ year) + my_fulltheme + my_qual_scale()\n\nWarning: Removed 2 rows containing missing values (`geom_point()`)."
  },
  {
    "objectID": "exercises/solutions/dataviz.html#create-your-own-theme",
    "href": "exercises/solutions/dataviz.html#create-your-own-theme",
    "title": "Data visualization – exercise solutions",
    "section": "",
    "text": "Load the ggplot2 package and customize your own theme. Look at the built-in themes and the ggthemes package for inspiration.\n\n\n\nYou can save your customization using the theme(), but that will only modify the current theme\n\n\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\nmytheme &lt;- theme(strip.background = element_rect(fill = \"steelblue\"), \n        text = element_text(family = \"Comic sans\"), \n        plot.background = element_rect(fill = \"grey81\"), \n        legend.background = element_rect(fill = NA), \n        legend.position = \"bottom\"\n        ) \n\nggplot(penguins, aes(x = body_mass_g, y = bill_length_mm, color = species)) + \n  geom_point() + facet_wrap(~ year) + mytheme\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\ntheme_set(theme_bw())\nggplot(penguins, aes(x = body_mass_g, y = bill_length_mm, color = species)) + \n  geom_point() + facet_wrap(~ year) + mytheme\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\nTo make a fully custom theme, start with an existing one, and modify it\n\n\nmy_fulltheme &lt;- theme_grey() + mytheme\n\nggplot(penguins, aes(x = body_mass_g, y = bill_length_mm, color = species)) + \n  geom_point() + facet_wrap(~ year) + my_fulltheme\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\nSave your favorite color scales as a function for easy reuse. Use discrete_scale or continuous_scale.\n\n\nmy_qual_scale &lt;- function(...) {\n  discrete_scale(\"color\", scale_name = \"OI\", \n                 palette = function(x) {\n                   res &lt;- palette.colors(x, \"Okabe-Ito\")[1:x]\n                   names(res) &lt;- NULL\n                   res\n                 }, ...)\n}\n\nggplot(penguins, aes(x = body_mass_g, y = bill_length_mm, color = species)) + \n  geom_point() + facet_wrap(~ year) + my_fulltheme + my_qual_scale()\n\nWarning: Removed 2 rows containing missing values (`geom_point()`)."
  },
  {
    "objectID": "exercises/solutions/dataviz.html#complex-figures-with-base-graphics",
    "href": "exercises/solutions/dataviz.html#complex-figures-with-base-graphics",
    "title": "Data visualization – exercise solutions",
    "section": "Complex figures with base graphics",
    "text": "Complex figures with base graphics\nCheck out this violin plot\n\nggplot(penguins, aes(x = species, y = body_mass_g)) + geom_violin() + geom_jitter()\n\nWarning: Removed 2 rows containing non-finite values (`stat_ydensity()`).\n\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nHow would you produce a similar plot using base graphics? After doing so, reflect, do you appreciate to convenience and flexibility of ggplot2?\nUse the density function to calculate the densities by species. The results are stored in a list with elements x and y. Then transform by rotating 90 degrees and mirroring. Plot the result using the polygon function.\n\ndens_by_species &lt;- split(penguins$body_mass_g, penguins$species) |&gt; \n  lapply(density, na.rm = TRUE, cut = 0)\n\nplot(body_mass_g ~ jitter(as.numeric(as.factor(species))), \n     data = penguins, xaxt = \"n\", xlab = \"species\")\n\nfor(i in 1:length(dens_by_species)) {\n  \n  den &lt;- dens_by_species[[i]]\n  newx &lt;- c(0.2 * (den$y / max(den$y)) + i, \n            rev(-0.2 * (den$y / max(den$y)) + i))\n  newy &lt;- c(den$x, rev(den$x))\n  \n  polygon(newx,  newy)\n}\naxis(side = 1, at = 1:3, labels = levels(as.factor(penguins$species)))"
  },
  {
    "objectID": "exercises/solutions/dates-and-strings.html",
    "href": "exercises/solutions/dates-and-strings.html",
    "title": "Dates and character strings – exercise solutions",
    "section": "",
    "text": "From the data, download and read in the file “med-2005-ex.rds”.\n\nlibrary(here)\n\nhere() starts at /home/sachsmc/Teaching/Courses/r-programming\n\nmed2005 &lt;- readRDS(here(\"data\", \"med-2005-ex.rds\"))"
  },
  {
    "objectID": "exercises/solutions/dates-and-strings.html#read-in-the-data",
    "href": "exercises/solutions/dates-and-strings.html#read-in-the-data",
    "title": "Dates and character strings – exercise solutions",
    "section": "",
    "text": "From the data, download and read in the file “med-2005-ex.rds”.\n\nlibrary(here)\n\nhere() starts at /home/sachsmc/Teaching/Courses/r-programming\n\nmed2005 &lt;- readRDS(here(\"data\", \"med-2005-ex.rds\"))"
  },
  {
    "objectID": "exercises/solutions/dates-and-strings.html#dates",
    "href": "exercises/solutions/dates-and-strings.html#dates",
    "title": "Dates and character strings – exercise solutions",
    "section": "Dates",
    "text": "Dates\n\nUse the lubridate package (try the function wday) to calculate the day of the week when the dispensation occurred. Do dispensations occur less frequently on weekends?\nCalculate the month of the dispensation. Is there a seasonal trend on the number of dispensations?\n\n\nlibrary(lubridate)\n\n\nAttaching package: 'lubridate'\n\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n\nmed2005$day_of_week &lt;- wday(med2005$date, label = TRUE)\n\ntable(wday(med2005$date, label = TRUE)) |&gt; plot()\n\n\n\ntable(wday(med2005$date, label = FALSE))\n\n\n  1   2   3   4   5   6   7 \n588 557 596 605 565 545 596 \n\ntable(med2005$day_of_week %in% c(\"Sun\", \"Sat\"))\n\n\nFALSE  TRUE \n 2868  1184 \n\nbinom.test(sum(med2005$day_of_week %in% c(\"Sat\", \"Sun\")), nrow(med2005), \n           p = 2 / 7)\n\n\n    Exact binomial test\n\ndata:  sum(med2005$day_of_week %in% c(\"Sat\", \"Sun\")) and nrow(med2005)\nnumber of successes = 1184, number of trials = 4052, p-value = 0.3659\nalternative hypothesis: true probability of success is not equal to 0.2857143\n95 percent confidence interval:\n 0.2782293 0.3064737\nsample estimates:\nprobability of success \n             0.2922014 \n\ntable(month(med2005$date, label = TRUE)) |&gt; plot()\n\n\n\n\n\nUse dplyr or data.table to create a new variable that is the last dispensation for each individual during the year (using group_by then mutate or := with by). Then calculate the number of days between each dispensation and the last one. What is the average number of days?\n\n\ndata.tabledplyr\n\n\n\nlibrary(data.table)\n\n\nAttaching package: 'data.table'\n\n\nThe following objects are masked from 'package:lubridate':\n\n    hour, isoweek, mday, minute, month, quarter, second, wday, week,\n    yday, year\n\nmed2005dt &lt;- data.table(med2005)\n\nmed2005dt[, last_date := max(date), \n          by = .(pid)]\n\n\nmed2005dt[, num_days := as.numeric(date - last_date)]\nmed2005dt[num_days == 0, num_days := NA]\n\nsummary(med2005dt)\n\n     pid                 date                atc                 dose       \n Length:4052        Min.   :2005-01-01   Length:4052        Min.   :   0.0  \n Class :character   1st Qu.:2005-03-30   Class :character   1st Qu.: 119.0  \n Mode  :character   Median :2005-06-29   Mode  :character   Median : 274.0  \n                    Mean   :2005-06-30                      Mean   : 393.9  \n                    3rd Qu.:2005-09-30                      3rd Qu.: 537.2  \n                    Max.   :2005-12-31                      Max.   :3378.0  \n                                                                            \n day_of_week   last_date             num_days     \n Sun:588     Min.   :2005-04-28   Min.   :-364.0  \n Mon:557     1st Qu.:2005-11-16   1st Qu.:-251.0  \n Tue:596     Median :2005-12-08   Median :-165.0  \n Wed:605     Mean   :2005-11-28   Mean   :-167.3  \n Thu:565     3rd Qu.:2005-12-23   3rd Qu.: -84.0  \n Fri:545     Max.   :2005-12-31   Max.   :  -1.0  \n Sat:596                          NA's   :400     \n\nhist(med2005dt$num_days)\n\n\n\n\n\n\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:data.table':\n\n    between, first, last\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nmed2005b &lt;- med2005 |&gt; group_by(pid) |&gt; \n  mutate(last_date = max(date))\n\nmed2005b &lt;- med2005b |&gt; mutate(num_days = as.numeric(date - last_date))\nmed2005b$num_days[med2005b$num_days == 0] &lt;- NA\n\nsummary(med2005b)\n\n     pid                 date                atc                 dose       \n Length:4052        Min.   :2005-01-01   Length:4052        Min.   :   0.0  \n Class :character   1st Qu.:2005-03-30   Class :character   1st Qu.: 119.0  \n Mode  :character   Median :2005-06-29   Mode  :character   Median : 274.0  \n                    Mean   :2005-06-30                      Mean   : 393.9  \n                    3rd Qu.:2005-09-30                      3rd Qu.: 537.2  \n                    Max.   :2005-12-31                      Max.   :3378.0  \n                                                                            \n day_of_week   last_date             num_days     \n Sun:588     Min.   :2005-04-28   Min.   :-364.0  \n Mon:557     1st Qu.:2005-11-16   1st Qu.:-251.0  \n Tue:596     Median :2005-12-08   Median :-165.0  \n Wed:605     Mean   :2005-11-28   Mean   :-167.3  \n Thu:565     3rd Qu.:2005-12-23   3rd Qu.: -84.0  \n Fri:545     Max.   :2005-12-31   Max.   :  -1.0  \n Sat:596                          NA's   :400     \n\nhist(med2005b$num_days)"
  },
  {
    "objectID": "exercises/solutions/dates-and-strings.html#regular-expressions",
    "href": "exercises/solutions/dates-and-strings.html#regular-expressions",
    "title": "Dates and character strings – exercise solutions",
    "section": "Regular expressions",
    "text": "Regular expressions\nThe “atc” variable contains the ATC code for the drug that was dispensed. This is a standardized classification system for drugs, see https://www.whocc.no/atc/structure_and_principles/.\n\nCount how many dispensations there were for drugs in the class “J01”. Use the grepl function with a pattern. 2. Are there any “invalid” ATC codes in the dataset?\n\n\ngrepl(\"^J01\",med2005$atc) |&gt;head()\n\n[1]  TRUE FALSE FALSE  TRUE  TRUE FALSE\n\ngrepl(\"^J01.{4}$\",med2005$atc) |&gt; table()\n\n\nFALSE  TRUE \n 2397  1655 \n\n## replace\ngsub(\"^J01.{4}$\", \"mydrug\", med2005$atc) |&gt;head()\n\n[1] \"mydrug\"  \"C10BX02\" \"C10BX03\" \"mydrug\"  \"mydrug\"  \"H05BX02\"\n\n## check for invalid atcs\ngrepl(\"^[A-Z]{1}[0-9]{2}[A-Z]{2}[0-9]{2}$\", \n      c(med2005$atc[1:5], \"100\", \"J01DD09b\")) \n\n[1]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE\n\n## no invalid atcs\ngrepl(\"^[A-Z]{1}[0-9]{2}[A-Z]{2}[0-9]{2}$\", \n  med2005$atc) |&gt; table()\n\n\nTRUE \n4052"
  },
  {
    "objectID": "exercises/solutions/dynamic-documents.html",
    "href": "exercises/solutions/dynamic-documents.html",
    "title": "Dynamic documents – exercise solutions",
    "section": "",
    "text": "See https://github.com/sachsmc/r-programming/tree/master/exercises/solutions/register-project/ for an example solution."
  },
  {
    "objectID": "exercises/solutions/dynamic-documents.html#a-whole-project",
    "href": "exercises/solutions/dynamic-documents.html#a-whole-project",
    "title": "Dynamic documents – exercise solutions",
    "section": "A whole project",
    "text": "A whole project\nIn this lesson we will work through an entire project using the register data linked in the data directory, where you can download all of the linked files.\nThe objective of this project is to describe the distribution of the number of days between hospitalizations and drug dispensations by age and sex. Your challenge is to do the following:\n\nSet up a project directory with a sensible folder structure, a readme file, and a license.\nWrite one R script that wrangles the data, reading in and merging the datasets.\nCreate the new variables that you need to, and save the results to an intermediate analysis file.\nCreate a dynamic document that reads in the analysis file, and does some simple analyses. Present the results in a readable way using knitr::kable, using figures, and include inline output, e.g., with our print.meansd function from the functions lesson. Include prose describing what you are doing and why.\nIf you have time, make a presentation in addition to a regular document."
  },
  {
    "objectID": "exercises/solutions/flow-and-loops.html",
    "href": "exercises/solutions/flow-and-loops.html",
    "title": "Flow control and loops – exercise solutions",
    "section": "",
    "text": "Use a loop to print every number from 1 to 10\nModify the loop to print every even number from 1 to 10 (hint: add an if statement and use (i %% 2) == 0 to check whether i is divisible by 2).\n\n\n## 1.\nfor(i in 1:10){\n  print(i)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n[1] 6\n[1] 7\n[1] 8\n[1] 9\n[1] 10\n\n## 2. The %% operator is the modulo function.\n##    i %% 2 attempts to divide i by 2, with \n##    whole numbers only and returns the remainder. \nfor(i in 1:10){\n  if((i %% 2) == 0) {\n  print(i)\n  }\n}\n\n[1] 2\n[1] 4\n[1] 6\n[1] 8\n[1] 10"
  },
  {
    "objectID": "exercises/solutions/flow-and-loops.html#simple-loops-and-conditional-statements",
    "href": "exercises/solutions/flow-and-loops.html#simple-loops-and-conditional-statements",
    "title": "Flow control and loops – exercise solutions",
    "section": "",
    "text": "Use a loop to print every number from 1 to 10\nModify the loop to print every even number from 1 to 10 (hint: add an if statement and use (i %% 2) == 0 to check whether i is divisible by 2).\n\n\n## 1.\nfor(i in 1:10){\n  print(i)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n[1] 6\n[1] 7\n[1] 8\n[1] 9\n[1] 10\n\n## 2. The %% operator is the modulo function.\n##    i %% 2 attempts to divide i by 2, with \n##    whole numbers only and returns the remainder. \nfor(i in 1:10){\n  if((i %% 2) == 0) {\n  print(i)\n  }\n}\n\n[1] 2\n[1] 4\n[1] 6\n[1] 8\n[1] 10"
  },
  {
    "objectID": "exercises/solutions/flow-and-loops.html#loops-for-statistical-analysis",
    "href": "exercises/solutions/flow-and-loops.html#loops-for-statistical-analysis",
    "title": "Flow control and loops – exercise solutions",
    "section": "Loops for statistical analysis",
    "text": "Loops for statistical analysis\n\nlibrary(palmerpenguins)\n\n\nWrite a loop that calculates and prints out the mean for each numeric variable in the penguins dataset\n\n\nfor(i in 1:ncol(penguins)) {\n  ## cat prints to the console without quotes\n  cat(names(penguins)[i], \" - \", sep = \"\")\n  vari &lt;- penguins[[i]] ## this iterates through the columns of penguins\n  if(is.numeric(vari)) { ## check whether it is numeric\n    cat(\"Mean:\", mean(vari, na.rm = TRUE))\n  } else {\n    cat(\"not numeric\")\n  }\n  cat(\"\\n\") # new line\n}\n\nspecies - not numeric\nisland - not numeric\nbill_length_mm - Mean: 43.92193\nbill_depth_mm - Mean: 17.15117\nflipper_length_mm - Mean: 200.9152\nbody_mass_g - Mean: 4201.754\nsex - not numeric\nyear - Mean: 2008.029\n\n\n\nModify your loop in 1 so that it prints out the mean, standard deviation, median, and interquartile range for each numeric variable in penguins.\n\n\nf.names &lt;- c(\"mean\", \"std dev\", \"median\", \"interquartile range\")\nfunctions &lt;- list(mean, sd, median, IQR)\n## we will add an inner loop that iterates through these function and names\n\nfor(i in 1:ncol(penguins)) {\n  cat(names(penguins)[i], \":\\n\", sep = \"\")\n  vari &lt;- penguins[[i]]\n  \n  if(is.numeric(vari)) { \n    for(fn in 1:length(f.names)) {\n      cat(f.names[fn], functions[[fn]](vari, na.rm = TRUE), \"\\n\")\n    }\n  } else {\n    cat(\"not numeric\\n\")\n  }\n  cat(\"--------\\n\") # new line\n}\n\nspecies:\nnot numeric\n--------\nisland:\nnot numeric\n--------\nbill_length_mm:\nmean 43.92193 \nstd dev 5.459584 \nmedian 44.45 \ninterquartile range 9.275 \n--------\nbill_depth_mm:\nmean 17.15117 \nstd dev 1.974793 \nmedian 17.3 \ninterquartile range 3.1 \n--------\nflipper_length_mm:\nmean 200.9152 \nstd dev 14.06171 \nmedian 197 \ninterquartile range 23 \n--------\nbody_mass_g:\nmean 4201.754 \nstd dev 801.9545 \nmedian 4050 \ninterquartile range 1200 \n--------\nsex:\nnot numeric\n--------\nyear:\nmean 2008.029 \nstd dev 0.8183559 \nmedian 2008 \ninterquartile range 2 \n--------\n\n\n\nWrite a loop to compute 500 bootstrap replicates of the means of bill length, bill depth, and flipper length. Remember to pre-allocate a data structure to store the 500 times 3 values. Provide an estimate of the correlation of the sample means.\n\n\nbootmeans &lt;- matrix(NA, nrow = 500, ncol = 3, \n                    dimnames = list(NULL, c(\"bill_length\", \"bill_depth\", \"flipper_length\")))\nfor(i in 1:nrow(bootmeans)){\n  bootindex &lt;- sample(1:nrow(penguins), replace = TRUE)\n  peng.star &lt;- penguins[bootindex, ]\n  \n  bootmeans[i, 1] &lt;- mean(peng.star$bill_length_mm, na.rm = TRUE)\n  bootmeans[i, 2] &lt;- mean(peng.star$bill_depth_mm, na.rm = TRUE)\n  bootmeans[i, 3] &lt;- mean(peng.star$flipper_length_mm, na.rm = TRUE)\n}\n\nsummary(bootmeans)\n\n  bill_length      bill_depth    flipper_length \n Min.   :42.91   Min.   :16.88   Min.   :198.9  \n 1st Qu.:43.74   1st Qu.:17.08   1st Qu.:200.4  \n Median :43.94   Median :17.16   Median :200.9  \n Mean   :43.92   Mean   :17.15   Mean   :200.9  \n 3rd Qu.:44.12   3rd Qu.:17.23   3rd Qu.:201.5  \n Max.   :44.75   Max.   :17.39   Max.   :203.3  \n\ncor(bootmeans)\n\n               bill_length bill_depth flipper_length\nbill_length      1.0000000 -0.2029797      0.6786520\nbill_depth      -0.2029797  1.0000000     -0.5534294\nflipper_length   0.6786520 -0.5534294      1.0000000"
  },
  {
    "objectID": "exercises/solutions/flow-and-loops.html#loops-for-numeric-calculation",
    "href": "exercises/solutions/flow-and-loops.html#loops-for-numeric-calculation",
    "title": "Flow control and loops – exercise solutions",
    "section": "Loops for numeric calculation",
    "text": "Loops for numeric calculation\nLoops are sometimes unavoidable if a calculation depends on the value at one or more of the previous iterations.\nOne way to compute the Kaplan-Meier curve for right censored data is to loop through the death times and accumulate the product of 1 minus the number of deaths at each time over the number at risk at that time. Complete the following code to compute the KM curve and compare to the result from the survival package.\n\namldat &lt;- survival::aml\nlibrary(survival)\n\ndeathtimes &lt;- c(0, sort(unique(amldat$time[amldat$status == 1])))\nsurv &lt;- c(1, numeric(length(deathtimes) - 1))\n\nfor(i in 2:length(deathtimes)) {\n  \n  atrisk &lt;- subset(amldat, time &gt; deathtimes[i - 1])\n  \n  deaths_at_ti &lt;- sum(atrisk$status[atrisk$time == deathtimes[i]] == 1)\n  \n  surv[i] &lt;- surv[i - 1] * (1 - (deaths_at_ti / \n                                     nrow(atrisk)))\n  \n}\n\nplot(surv ~ deathtimes)\nlines(survfit(Surv(time, status) ~ 1, data = amldat))"
  },
  {
    "objectID": "exercises/solutions/flow-and-loops.html#loops-to-do-data-manipulation",
    "href": "exercises/solutions/flow-and-loops.html#loops-to-do-data-manipulation",
    "title": "Flow control and loops – exercise solutions",
    "section": "Loops to do data manipulation",
    "text": "Loops to do data manipulation\n\nWrite a loop that contains an if then else statement that goes through the variables in penguins and replaces missing values with the mean for numeric double variables, and the most frequent value for characters or factors.\n\n\nmy_mode &lt;- function(x) {\n  \n  converter &lt;- get(paste0(\"as.\", class(x)))\n  tab &lt;- table(x) |&gt; sort(decreasing = TRUE) \n  names(tab)[1] |&gt; converter()\n  \n}\n\n\nfor(colnum in 1:ncol(penguins)){\n  \n  thiscol &lt;- penguins[[colnum]]\n  if(is.double(thiscol)) {\n    \n    thismean &lt;- mean(thiscol, na.rm = TRUE)\n    penguins[is.na(thiscol), colnum] &lt;- thismean\n    \n  } else {\n    \n    penguins[is.na(thiscol), colnum] &lt;- my_mode(thiscol)\n    \n  } \n}\n\nsummary(penguins)\n\n      species          island    bill_length_mm  bill_depth_mm  \n Adelie   :152   Biscoe   :168   Min.   :32.10   Min.   :13.10  \n Chinstrap: 68   Dream    :124   1st Qu.:39.27   1st Qu.:15.60  \n Gentoo   :124   Torgersen: 52   Median :44.25   Median :17.30  \n                                 Mean   :43.92   Mean   :17.15  \n                                 3rd Qu.:48.50   3rd Qu.:18.70  \n                                 Max.   :59.60   Max.   :21.50  \n flipper_length_mm  body_mass_g       sex           year     \n Min.   :172.0     Min.   :2700   female:165   Min.   :2007  \n 1st Qu.:190.0     1st Qu.:3550   male  :179   1st Qu.:2007  \n Median :197.0     Median :4025                Median :2008  \n Mean   :200.9     Mean   :4199                Mean   :2008  \n 3rd Qu.:213.0     3rd Qu.:4750                3rd Qu.:2009  \n Max.   :231.0     Max.   :6300                Max.   :2009"
  },
  {
    "objectID": "exercises/solutions/functions.html",
    "href": "exercises/solutions/functions.html",
    "title": "Functions – exercise solutions",
    "section": "",
    "text": "Load the Palmer penguins dataset.\nWrite a function to compute the mean and standard deviation of a numeric vector. We will apply this function to the numeric variables in penguins, and also by different subgroups\n\n\nlibrary(palmerpenguins)\n\n\nmean_sd1 &lt;- function(x, na.rm = TRUE) {\n  \n  res &lt;- c(mean = mean(x, na.rm = na.rm), \n    sd = sd(x, na.rm = na.rm))\n\n  res\n  \n}\n\nmean_sd1(penguins$bill_depth_mm)\n\n     mean        sd \n17.151170  1.974793"
  },
  {
    "objectID": "exercises/solutions/functions.html#iterating-over-data-with-functions",
    "href": "exercises/solutions/functions.html#iterating-over-data-with-functions",
    "title": "Functions – exercise solutions",
    "section": "",
    "text": "Load the Palmer penguins dataset.\nWrite a function to compute the mean and standard deviation of a numeric vector. We will apply this function to the numeric variables in penguins, and also by different subgroups\n\n\nlibrary(palmerpenguins)\n\n\nmean_sd1 &lt;- function(x, na.rm = TRUE) {\n  \n  res &lt;- c(mean = mean(x, na.rm = na.rm), \n    sd = sd(x, na.rm = na.rm))\n\n  res\n  \n}\n\nmean_sd1(penguins$bill_depth_mm)\n\n     mean        sd \n17.151170  1.974793"
  },
  {
    "objectID": "exercises/solutions/functions.html#using-the-function",
    "href": "exercises/solutions/functions.html#using-the-function",
    "title": "Functions – exercise solutions",
    "section": "Using the function",
    "text": "Using the function\n\nUse your function to compute the mean and sd of all the numeric variables in penguins.\n\n\nnumeric_cols &lt;- sapply(penguins, is.numeric) ## determine which cols are numeric\napply(penguins[numeric_cols], MARGIN = 2, FUN = mean_sd1)\n\n     bill_length_mm bill_depth_mm flipper_length_mm body_mass_g         year\nmean      43.921930     17.151170         200.91520   4201.7544 2008.0290698\nsd         5.459584      1.974793          14.06171    801.9545    0.8183559\n\n\n\nUse your function to compute the mean and sd of body mass by species and sex\n\n\nBase Rdplyrdata.table\n\n\n\nsplit(penguins$body_mass_g, list(penguins$species, penguins$sex)) |&gt;\n  lapply(FUN = mean_sd1)\n\n$Adelie.female\n     mean        sd \n3368.8356  269.3801 \n\n$Chinstrap.female\n     mean        sd \n3527.2059  285.3339 \n\n$Gentoo.female\n     mean        sd \n4679.7414  281.5783 \n\n$Adelie.male\n     mean        sd \n4043.4932  346.8116 \n\n$Chinstrap.male\n     mean        sd \n3938.9706  362.1376 \n\n$Gentoo.male\n     mean        sd \n5484.8361  313.1586 \n\n# sapply converts the result to a matrix\nsplit(penguins$body_mass_g, list(penguins$species, penguins$sex)) |&gt;\n  sapply(FUN = mean_sd1)\n\n     Adelie.female Chinstrap.female Gentoo.female Adelie.male Chinstrap.male\nmean     3368.8356        3527.2059     4679.7414   4043.4932      3938.9706\nsd        269.3801         285.3339      281.5783    346.8116       362.1376\n     Gentoo.male\nmean   5484.8361\nsd      313.1586\n\n# tapply has a different syntax and each element of the matrix is a list\ntapres &lt;- tapply(penguins$body_mass_g, list(penguins$species, penguins$sex), \n       mean_sd1)\ntapres\n\n          female    male     \nAdelie    numeric,2 numeric,2\nChinstrap numeric,2 numeric,2\nGentoo    numeric,2 numeric,2\n\ntapres[1,1]\n\n[[1]]\n     mean        sd \n3368.8356  269.3801 \n\n\n\n\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\npenguins |&gt; group_by(species, sex) |&gt;\n  summarize(mean_sd1(body_mass_g))\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\n\n`summarise()` has grouped output by 'species', 'sex'. You can override using\nthe `.groups` argument.\n\n\n# A tibble: 16 × 3\n# Groups:   species, sex [8]\n   species   sex    `mean_sd1(body_mass_g)`\n   &lt;fct&gt;     &lt;fct&gt;                    &lt;dbl&gt;\n 1 Adelie    female                   3369.\n 2 Adelie    female                    269.\n 3 Adelie    male                     4043.\n 4 Adelie    male                      347.\n 5 Adelie    &lt;NA&gt;                     3540 \n 6 Adelie    &lt;NA&gt;                      477.\n 7 Chinstrap female                   3527.\n 8 Chinstrap female                    285.\n 9 Chinstrap male                     3939.\n10 Chinstrap male                      362.\n11 Gentoo    female                   4680.\n12 Gentoo    female                    282.\n13 Gentoo    male                     5485.\n14 Gentoo    male                      313.\n15 Gentoo    &lt;NA&gt;                     4588.\n16 Gentoo    &lt;NA&gt;                      338.\n\n\n\n\n\nlibrary(data.table)\n\n\nAttaching package: 'data.table'\n\n\nThe following objects are masked from 'package:dplyr':\n\n    between, first, last\n\npengdt &lt;- data.table(penguins)\n\npengdt[, mean_sd1(body_mass_g), by = list(species, sex)]\n\n      species    sex        V1\n 1:    Adelie   male 4043.4932\n 2:    Adelie   male  346.8116\n 3:    Adelie female 3368.8356\n 4:    Adelie female  269.3801\n 5:    Adelie   &lt;NA&gt; 3540.0000\n 6:    Adelie   &lt;NA&gt;  477.1661\n 7:    Gentoo female 4679.7414\n 8:    Gentoo female  281.5783\n 9:    Gentoo   male 5484.8361\n10:    Gentoo   male  313.1586\n11:    Gentoo   &lt;NA&gt; 4587.5000\n12:    Gentoo   &lt;NA&gt;  338.1937\n13: Chinstrap female 3527.2059\n14: Chinstrap female  285.3339\n15: Chinstrap   male 3938.9706\n16: Chinstrap   male  362.1376\n\n## . can be used as shorthand for list in data table\npengdt[, mean_sd1(body_mass_g), by = .(species, sex)]\n\n      species    sex        V1\n 1:    Adelie   male 4043.4932\n 2:    Adelie   male  346.8116\n 3:    Adelie female 3368.8356\n 4:    Adelie female  269.3801\n 5:    Adelie   &lt;NA&gt; 3540.0000\n 6:    Adelie   &lt;NA&gt;  477.1661\n 7:    Gentoo female 4679.7414\n 8:    Gentoo female  281.5783\n 9:    Gentoo   male 5484.8361\n10:    Gentoo   male  313.1586\n11:    Gentoo   &lt;NA&gt; 4587.5000\n12:    Gentoo   &lt;NA&gt;  338.1937\n13: Chinstrap female 3527.2059\n14: Chinstrap female  285.3339\n15: Chinstrap   male 3938.9706\n16: Chinstrap   male  362.1376"
  },
  {
    "objectID": "exercises/solutions/functions.html#classes-and-custom-generics",
    "href": "exercises/solutions/functions.html#classes-and-custom-generics",
    "title": "Functions – exercise solutions",
    "section": "Classes and custom generics",
    "text": "Classes and custom generics\n\nModify your mean and sd function so that the data structure that is returned has class “meansd”. There are two ways to do this:\n\nSay the object you currently return is called res, instead of res, return structure(res, class = \"meansd\")\nAdd the line class(res) &lt;- \"meansd\" before returning `res``\nUse the attr function to create and assign additional information, for example the name of the variable, You can get the name of the object passed to x using deparse1(substitute(x)).\n\n\n\nmean_sd2 &lt;- function(x, na.rm = TRUE) {\n  res &lt;- c(mean = mean(x, na.rm = na.rm), \n           sd = sd(x, na.rm = na.rm))\n  \n  attr(res, \"variable\") &lt;- deparse1(substitute(x))\n  attr(res, \"sampsize\") &lt;- sum(!is.na(x))\n  class(res) &lt;- \"meansd\"\n  res\n}\n\n\nWrite a custom print function print.meansd that nicely prints the mean and standard deviation. Use the functions round and paste functions to create a string, then print it out using the cat function.\n\n\nprint.meansd &lt;- function(x, digits = 2) {\n  \n  msd &lt;- paste0(round(x[\"mean\"], digits = digits), \" (\", \n                round(x[\"sd\"], digits = digits), \")\")\n  \n  cat(\"mean (sd) of \", \n      attr(x, \"variable\"), \":\", \n      msd, \"\\n\")\n  \n}\n\nmean_sd2(penguins$body_mass_g)\n\nmean (sd) of  penguins$body_mass_g : 4201.75 (801.95)"
  },
  {
    "objectID": "exercises/solutions/functions.html#more-functions",
    "href": "exercises/solutions/functions.html#more-functions",
    "title": "Functions – exercise solutions",
    "section": "More functions",
    "text": "More functions\n\nWrite another function that constructs a one-sample t-statistic from an estimated mean and standard deviation. Recall that the t-statistic to test the null hypothesis that \\(\\mu = \\mu_0\\) is \\[\nT = \\frac{\\overline{X} - \\mu_0}{\\hat{\\sigma}/\\sqrt{n}}\n\\] where \\(\\overline{X}\\) is the sample mean and \\(\\hat{\\sigma}\\) is the sample standard deviation and \\(n\\) is the sample size.\nWrite another function that takes the t-statistic and calculates a p-value\nCompose your custom functions in order to test the null hypothesis that the mean body mass of penguins is 4000g. Try using the pipe operator |&gt;.\n\n\nt_stat &lt;- function(x, mu_0 = 0) {\n  ## x should be of class \"meansd\"\n  stopifnot(inherits(x, \"meansd\"))\n  \n  Tstat &lt;- unname((x[\"mean\"] - mu_0) / \n                    (x[\"sd\"] / sqrt(attr(x, \"sampsize\"))))\n  attr(Tstat, \"df\") &lt;- attr(x, \"sampsize\") - 1\n  Tstat\n  \n}\n\n\np_value &lt;- function(x) {\n\n  2 * pt(-abs(x), df = attr(x, \"df\"))\n  \n}\n\nmean_sd2(penguins$body_mass_g) |&gt; t_stat(mu_0 = 4000) |&gt; p_value()\n\n[1] 4.69977e-06\nattr(,\"df\")\n[1] 341"
  },
  {
    "objectID": "exercises/solutions/index.html",
    "href": "exercises/solutions/index.html",
    "title": "Exercise solutions",
    "section": "",
    "text": "Project organization and workflow – exercise solutions\n\n\nDay 1, A\n\n\n\n\n \n\n\n\n\n\n\nData structures – exercise solutions\n\n\nDay 1, B\n\n\n\n\n \n\n\n\n\n\n\nFlow control and loops – exercise solutions\n\n\nDay 2, A\n\n\n\n\n \n\n\n\n\n\n\nFunctions – exercise solutions\n\n\nDay 2, B\n\n\n\n\n \n\n\n\n\n\n\nTidying and reshaping – exercise solutions\n\n\nDay 3, B\n\n\n\n\n \n\n\n\n\n\n\nDates and character strings – exercise solutions\n\n\nDay 3, C\n\n\n\n\n \n\n\n\n\n\n\nDynamic documents – exercise solutions\n\n\nDay 4, A\n\n\n\n\n \n\n\n\n\n\n\nData visualization – exercise solutions\n\n\nDay 4, C\n\n\n\n\n \n\n\n\n\nNo matching items"
  },
  {
    "objectID": "exercises/solutions/projects.html",
    "href": "exercises/solutions/projects.html",
    "title": "Project organization and workflow – exercise solutions",
    "section": "",
    "text": "Link to project directory"
  },
  {
    "objectID": "exercises/solutions/register-project/Reports/presentation.html#information",
    "href": "exercises/solutions/register-project/Reports/presentation.html#information",
    "title": "Register analysis",
    "section": "Information",
    "text": "Information\n\nlibrary(data.table)\ndata &lt;- readRDS(here::here(\"Data/analysis-data.rds\"))\ndata\n\n       pid       date     atc dose  drug_date  age sex visit hdia diag1 diag2\n   1: A001 2010-01-27 J01DC03  420 2010-03-05 72.5   f     1 H560  B632  H180\n   2: A001 2010-06-26 A10BJ04 1659 2010-08-31 72.5   f     2 C871  D422  K820\n   3: A001 2010-07-20 A10BJ04 1659 2010-08-31 72.5   f     3 C040  B710  &lt;NA&gt;\n   4: A002 2005-09-02 C07FX01 1395 2006-05-02 81.5   f     1 B481  K512  F750\n   5: A002 2008-05-05 C07FX03  526 2008-06-05 81.5   f     2 K959  G959  E252\n  ---                                                                        \n1082: A398 2010-08-31 J01DD01   80 2010-09-20 63.5   m     5 D360  A739  F200\n1083: A399 2008-10-28 J01DB08  243 2008-10-29 81.5   f     1 E761  E541  C811\n1084: A400 2008-01-01 A10BJ04  293 2008-01-12 72.5   f     1 I291  C691  G269\n1085: A400 2008-12-18 J01DD03  322 2009-03-02 72.5   f     2 E461  I290  B409\n1086: A400 2009-10-09 B01AF01  792 2009-11-06 72.5   f     3 F581  E111  H500\n      diag3 diag4 diag5 diag6 days_to_drug\n   1:  J050  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;           37\n   2:  A602  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;           66\n   3:  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;           42\n   4:  K059  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;          242\n   5:  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;           31\n  ---                                     \n1082:  I780  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;           20\n1083:  C662  B811  B972  &lt;NA&gt;            1\n1084:  C732  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;           11\n1085:  G531  I682  &lt;NA&gt;  &lt;NA&gt;           74\n1086:  C432  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;           28"
  },
  {
    "objectID": "exercises/solutions/register-project/Reports/presentation.html#results",
    "href": "exercises/solutions/register-project/Reports/presentation.html#results",
    "title": "Register analysis",
    "section": "Results",
    "text": "Results\n\nsource(here::here(\"Code/02-analysis-functions.R\"))\n\nmeans_by_sex &lt;- lapply(c(\"f\", \"m\"), \\(x) {\n  mean_sd(data[sex == x]$days_to_drug)\n})\n\nThe mean (sd) days to drug dispensation is 31.79 (31.19) in women and 31.18 (30.18) in men."
  },
  {
    "objectID": "exercises/solutions/register-project/Reports/presentation.html#results-2",
    "href": "exercises/solutions/register-project/Reports/presentation.html#results-2",
    "title": "Register analysis",
    "section": "Results 2",
    "text": "Results 2\n\nplot(days_to_drug ~ jitter(age), data = data, \n     col = ifelse(sex == \"f\", \"salmon\", \"slateblue\"))"
  },
  {
    "objectID": "exercises/solutions/tidy-and-reshape.html",
    "href": "exercises/solutions/tidy-and-reshape.html",
    "title": "Tidying and reshaping – exercise solutions",
    "section": "",
    "text": "Write a tidy method for our mean_sd function and try it out on the penguins dataset.\n\n\nlibrary(palmerpenguins)\nlibrary(broom)\n\n#Write a tidy method for our mean_sd function and try it out on the penguins dataset.\n\nmean_sd &lt;- function(x, na.rm = TRUE) {\n  \n  xname &lt;- deparse1(substitute(x))  # gets the name of the variable\n  \n  res &lt;- c(mean = mean(x, na.rm = na.rm), \n           sd = sd(x, na.rm = na.rm))\n  \n  class(res) &lt;- \"meansd\"\n  attr(res, \"variable\") &lt;- xname\n  attr(res, \"sampsize\") &lt;- length(x)\n  \n  res\n  \n}\n\nprint.meansd &lt;- function(x, digits = 2) {\n  \n  cat(attr(x, \"variable\"), \": \",\n      paste0(\n        round(x[\"mean\"], digits = digits), \n        \" (\", \n        round(x[\"sd\"], digits = digits), \n        \")\\n\"))\n  \n}\n\ntidy.meansd &lt;- function(x) {\n  \n  data.frame(variable = attr(x, \"variable\"), \n             mean = x[\"mean\"], \n             sd = x[\"sd\"], \n             sample.size = attr(x, \"sampsize\")\n             )\n  \n}\n\n\nmean_sd(penguins$body_mass_g)\n\npenguins$body_mass_g :  4201.75 (801.95)\n\ntidy(mean_sd(penguins$body_mass_g))\n\n                 variable     mean       sd sample.size\nmean penguins$body_mass_g 4201.754 801.9545         344\n\n\n\nApply the mean_sd function to the penguins body mass in grams by species and sex. Organize the results into a table suitable for publication, where it is easy to compare the two sexes.\n\n\nBase Rdata.tabledplyr\n\n\n\nreslist &lt;- split(penguins$body_mass_g, list(penguins$species, penguins$sex)) |&gt;\n  lapply(FUN = \\(x) tidy(mean_sd(x))) \n\nresdf &lt;- cbind(do.call(rbind, reslist), \n      do.call(rbind, names(reslist)|&gt; strsplit(split=\"\\\\.\")))\ncolnames(resdf)[5:6] &lt;- c(\"species\", \"sex\")\n\nreshape(resdf[, -1], direction = \"wide\", idvar = \"species\", timevar = \"sex\")\n\n                   species mean.female sd.female sample.size.female mean.male\nAdelie.female       Adelie    3368.836  269.3801                 73  4043.493\nChinstrap.female Chinstrap    3527.206  285.3339                 34  3938.971\nGentoo.female       Gentoo    4679.741  281.5783                 58  5484.836\n                  sd.male sample.size.male\nAdelie.female    346.8116               73\nChinstrap.female 362.1376               34\nGentoo.female    313.1586               61\n\n\n\n\n\nlibrary(data.table)\n\npengdt &lt;- data.table(penguins)\npeng_summary &lt;- pengdt[, (tidy(mean_sd(body_mass_g))), \n                       by = list(species, sex)]\n\ndcast(peng_summary[!is.na(sex)], species + variable ~ sex, \n      value.var = c(\"mean\", \"sd\", \"sample.size\"))\n\n     species    variable mean_female mean_male sd_female  sd_male\n1:    Adelie body_mass_g    3368.836  4043.493  269.3801 346.8116\n2: Chinstrap body_mass_g    3527.206  3938.971  285.3339 362.1376\n3:    Gentoo body_mass_g    4679.741  5484.836  281.5783 313.1586\n   sample.size_female sample.size_male\n1:                 73               73\n2:                 34               34\n3:                 58               61\n\n\n\n\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:data.table':\n\n    between, first, last\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr)\npenguins |&gt; group_by(species, sex) |&gt;\n  summarize(tidy(mean_sd(body_mass_g))) |&gt; \n  filter(!is.na(sex)) |&gt; \n  pivot_wider(names_from = \"sex\", \n              values_from = c(\"mean\", \"sd\", \"sample.size\"))\n\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 3 × 8\n# Groups:   species [3]\n  species   variable  mean_female mean_male sd_female sd_male sample.size_female\n  &lt;fct&gt;     &lt;chr&gt;           &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;              &lt;int&gt;\n1 Adelie    body_mas…       3369.     4043.      269.    347.                 73\n2 Chinstrap body_mas…       3527.     3939.      285.    362.                 34\n3 Gentoo    body_mas…       4680.     5485.      282.    313.                 58\n# ℹ 1 more variable: sample.size_male &lt;int&gt;"
  },
  {
    "objectID": "exercises/solutions/tidy-and-reshape.html#tidying-our-mean-sd-function",
    "href": "exercises/solutions/tidy-and-reshape.html#tidying-our-mean-sd-function",
    "title": "Tidying and reshaping – exercise solutions",
    "section": "",
    "text": "Write a tidy method for our mean_sd function and try it out on the penguins dataset.\n\n\nlibrary(palmerpenguins)\nlibrary(broom)\n\n#Write a tidy method for our mean_sd function and try it out on the penguins dataset.\n\nmean_sd &lt;- function(x, na.rm = TRUE) {\n  \n  xname &lt;- deparse1(substitute(x))  # gets the name of the variable\n  \n  res &lt;- c(mean = mean(x, na.rm = na.rm), \n           sd = sd(x, na.rm = na.rm))\n  \n  class(res) &lt;- \"meansd\"\n  attr(res, \"variable\") &lt;- xname\n  attr(res, \"sampsize\") &lt;- length(x)\n  \n  res\n  \n}\n\nprint.meansd &lt;- function(x, digits = 2) {\n  \n  cat(attr(x, \"variable\"), \": \",\n      paste0(\n        round(x[\"mean\"], digits = digits), \n        \" (\", \n        round(x[\"sd\"], digits = digits), \n        \")\\n\"))\n  \n}\n\ntidy.meansd &lt;- function(x) {\n  \n  data.frame(variable = attr(x, \"variable\"), \n             mean = x[\"mean\"], \n             sd = x[\"sd\"], \n             sample.size = attr(x, \"sampsize\")\n             )\n  \n}\n\n\nmean_sd(penguins$body_mass_g)\n\npenguins$body_mass_g :  4201.75 (801.95)\n\ntidy(mean_sd(penguins$body_mass_g))\n\n                 variable     mean       sd sample.size\nmean penguins$body_mass_g 4201.754 801.9545         344\n\n\n\nApply the mean_sd function to the penguins body mass in grams by species and sex. Organize the results into a table suitable for publication, where it is easy to compare the two sexes.\n\n\nBase Rdata.tabledplyr\n\n\n\nreslist &lt;- split(penguins$body_mass_g, list(penguins$species, penguins$sex)) |&gt;\n  lapply(FUN = \\(x) tidy(mean_sd(x))) \n\nresdf &lt;- cbind(do.call(rbind, reslist), \n      do.call(rbind, names(reslist)|&gt; strsplit(split=\"\\\\.\")))\ncolnames(resdf)[5:6] &lt;- c(\"species\", \"sex\")\n\nreshape(resdf[, -1], direction = \"wide\", idvar = \"species\", timevar = \"sex\")\n\n                   species mean.female sd.female sample.size.female mean.male\nAdelie.female       Adelie    3368.836  269.3801                 73  4043.493\nChinstrap.female Chinstrap    3527.206  285.3339                 34  3938.971\nGentoo.female       Gentoo    4679.741  281.5783                 58  5484.836\n                  sd.male sample.size.male\nAdelie.female    346.8116               73\nChinstrap.female 362.1376               34\nGentoo.female    313.1586               61\n\n\n\n\n\nlibrary(data.table)\n\npengdt &lt;- data.table(penguins)\npeng_summary &lt;- pengdt[, (tidy(mean_sd(body_mass_g))), \n                       by = list(species, sex)]\n\ndcast(peng_summary[!is.na(sex)], species + variable ~ sex, \n      value.var = c(\"mean\", \"sd\", \"sample.size\"))\n\n     species    variable mean_female mean_male sd_female  sd_male\n1:    Adelie body_mass_g    3368.836  4043.493  269.3801 346.8116\n2: Chinstrap body_mass_g    3527.206  3938.971  285.3339 362.1376\n3:    Gentoo body_mass_g    4679.741  5484.836  281.5783 313.1586\n   sample.size_female sample.size_male\n1:                 73               73\n2:                 34               34\n3:                 58               61\n\n\n\n\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:data.table':\n\n    between, first, last\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr)\npenguins |&gt; group_by(species, sex) |&gt;\n  summarize(tidy(mean_sd(body_mass_g))) |&gt; \n  filter(!is.na(sex)) |&gt; \n  pivot_wider(names_from = \"sex\", \n              values_from = c(\"mean\", \"sd\", \"sample.size\"))\n\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 3 × 8\n# Groups:   species [3]\n  species   variable  mean_female mean_male sd_female sd_male sample.size_female\n  &lt;fct&gt;     &lt;chr&gt;           &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;              &lt;int&gt;\n1 Adelie    body_mas…       3369.     4043.      269.    347.                 73\n2 Chinstrap body_mas…       3527.     3939.      285.    362.                 34\n3 Gentoo    body_mas…       4680.     5485.      282.    313.                 58\n# ℹ 1 more variable: sample.size_male &lt;int&gt;"
  },
  {
    "objectID": "exercises/solutions/tidy-and-reshape.html#tidying-the-national-patient-register-dataset",
    "href": "exercises/solutions/tidy-and-reshape.html#tidying-the-national-patient-register-dataset",
    "title": "Tidying and reshaping – exercise solutions",
    "section": "Tidying the national patient register dataset",
    "text": "Tidying the national patient register dataset\nLoad the LPR data example from \"https://sachsmc.github.io/r-programming/data/lpr-ex.rds\"\n\nlibrary(here)\n\nhere() starts at /home/sachsmc/Teaching/Courses/r-programming\n\nlpr &lt;- readRDS(here(\"data\", \"lpr-ex.rds\"))\n\n\nReshape the data into wide, where the columns are the primary diagnosis (hdia) at each visit number\nReshape the data into longer format, where all of the diagnoses are stored in a single variable, with another variable indicating the primary diagnosis.\nCreate a new variable for each participant which equals TRUE if they had any diagnosis of either D150, D152, or D159 before the date 1 January 2010.\n\n\nbase Rdata.tabletidyverse\n\n\n\n## 1. \nlprwide &lt;- subset(lpr, select= c(pid, age, sex, visit, hdia)) |&gt; ## drop the other diag columns and date\n  reshape(direction = \"wide\", \n        idvar = \"pid\", timevar = \"visit\", \n        v.names = c(\"hdia\"))\nhead(lprwide)\n\n    pid  age sex hdia.1 hdia.2 hdia.3 hdia.4 hdia.5 hdia.6 hdia.7 hdia.8 hdia.9\n1  A001 72.5   f   H560   C871   C040   F412   F622   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;\n6  A002 81.5   f   B481   K959   G902   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;\n9  A003 54.5   m   E841   E071   H189   B090   C031   E179   E950   A100   K429\n18 A004 72.5   f   D921   B401   B491   G172   E161   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;\n23 A005 86.0   f   J751   B101   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;\n25 A006 77.0   f   E310   C231   C212   B251   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;\n   hdia.10 hdia.11 hdia.12 hdia.13\n1     &lt;NA&gt;    &lt;NA&gt;    &lt;NA&gt;    &lt;NA&gt;\n6     &lt;NA&gt;    &lt;NA&gt;    &lt;NA&gt;    &lt;NA&gt;\n9     &lt;NA&gt;    &lt;NA&gt;    &lt;NA&gt;    &lt;NA&gt;\n18    &lt;NA&gt;    &lt;NA&gt;    &lt;NA&gt;    &lt;NA&gt;\n23    &lt;NA&gt;    &lt;NA&gt;    &lt;NA&gt;    &lt;NA&gt;\n25    &lt;NA&gt;    &lt;NA&gt;    &lt;NA&gt;    &lt;NA&gt;\n\n## 2. \nlprtmp &lt;- lpr\ncolnames(lprtmp)[which(colnames(lprtmp) == \"hdia\")] &lt;- \"diag0\"\nlprlong &lt;- reshape(lprtmp, direction = \"long\", \n        varying = grep(\"^diag\", names(lprtmp)), \n        sep = \"\", timevar = \"diagnum\")\nlprlong$maindiag &lt;- lprlong$diagnum == 0\nlprlong &lt;- subset(lprlong[order(lprlong$pid, lprlong$visit),], \n                  !is.na(diag))\n\n\nhead(lprlong)\n\n     pid  age sex      indat visit diagnum diag id maindiag\n1.0 A001 72.5   f 2010-01-27     1       0 H560  1     TRUE\n1.1 A001 72.5   f 2010-01-27     1       1 B632  1    FALSE\n1.2 A001 72.5   f 2010-01-27     1       2 H180  1    FALSE\n1.3 A001 72.5   f 2010-01-27     1       3 J050  1    FALSE\n2.0 A001 72.5   f 2010-06-26     2       0 C871  2     TRUE\n2.1 A001 72.5   f 2010-06-26     2       1 D422  2    FALSE\n\n## 3. \n\nlprlong &lt;- split(lprlong, lprlong$pid) |&gt; \n  lapply(FUN = \\(df) {\n    \n    chk &lt;- any(df$diag[df$indat &lt;= as.Date(\"2010-01-01\")] %in% c(\"D150\", \"D152\", \"D159\"))\n    if(length(chk) == 0) chk &lt;- FALSE\n    df$ddiag_pre2010 &lt;- chk\n    df\n  }) |&gt; \n  unsplit(lprlong$pid)\n\nsummary(lprlong)\n\n     pid                 age            sex                indat           \n Length:8046        Min.   :36.50   Length:8046        Min.   :2005-01-02  \n Class :character   1st Qu.:63.50   Class :character   1st Qu.:2007-09-23  \n Mode  :character   Median :68.00   Mode  :character   Median :2010-06-01  \n                    Mean   :68.43                      Mean   :2010-06-15  \n                    3rd Qu.:77.00                      3rd Qu.:2013-03-01  \n                    Max.   :90.50                      Max.   :2015-12-31  \n     visit           diagnum          diag                 id        \n Min.   : 1.000   Min.   :0.000   Length:8046        Min.   :   1.0  \n 1st Qu.: 2.000   1st Qu.:1.000   Class :character   1st Qu.: 495.2  \n Median : 3.000   Median :2.000   Mode  :character   Median : 997.0  \n Mean   : 3.466   Mean   :1.791                      Mean   : 996.5  \n 3rd Qu.: 5.000   3rd Qu.:3.000                      3rd Qu.:1494.0  \n Max.   :13.000   Max.   :6.000                      Max.   :2008.0  \n  maindiag       ddiag_pre2010  \n Mode :logical   Mode :logical  \n FALSE:6038      FALSE:8032     \n TRUE :2008      TRUE :14       \n                                \n                                \n                                \n\n\n\n\n\n## 1.\nlprdt &lt;- data.table(lpr)\ndcast(lprdt[, .(pid, indat, visit, hdia)], \n      pid ~ visit, value.var = \"hdia\")\n\n      pid    1    2    3    4    5    6    7    8    9   10   11   12   13\n  1: A001 H560 C871 C040 F412 F622 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt;\n  2: A002 B481 K959 G902 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt;\n  3: A003 E841 E071 H189 B090 C031 E179 E950 A100 K429 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt;\n  4: A004 D921 B401 B491 G172 E161 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt;\n  5: A005 J751 B101 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt;\n ---                                                                      \n396: A396 G791 G580 A291 E282 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt;\n397: A397 K931 K922 G219 J462 I250 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt;\n398: A398 D551 C280 F540 K249 D360 G181 I889 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt;\n399: A399 E761 E262 G000 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt;\n400: A400 I291 E461 F581 D282 J149 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt;\n\n# 2. \nlprlong &lt;- melt(lprdt, id.vars = c(\"pid\", \"age\", \"sex\", \"indat\", \"visit\"), \n                variable.name = \"diagtype\", value.name = \"diag\")\nlprlong &lt;- lprlong[!is.na(diag)]\nlprlong[, main_diag := diagtype == \"hdia\"]\n\nlprlong\n\n       pid  age sex      indat visit diagtype diag main_diag\n   1: A001 72.5   f 2010-01-27     1     hdia H560      TRUE\n   2: A001 72.5   f 2010-06-26     2     hdia C871      TRUE\n   3: A001 72.5   f 2010-07-20     3     hdia C040      TRUE\n   4: A001 72.5   f 2011-03-06     4     hdia F412      TRUE\n   5: A001 72.5   f 2011-12-23     5     hdia F622      TRUE\n  ---                                                       \n8042: A390 50.0   m 2014-05-29     8    diag6 B329     FALSE\n8043: A390 50.0   m 2014-12-31     9    diag6 H441     FALSE\n8044: A391 50.0   m 2008-11-26     4    diag6 H381     FALSE\n8045: A393 63.5   m 2015-06-08     7    diag6 I372     FALSE\n8046: A398 63.5   m 2009-09-12     3    diag6 J671     FALSE\n\nsetorder(lprlong, pid, indat)\nlprlong\n\n       pid  age sex      indat visit diagtype diag main_diag\n   1: A001 72.5   f 2010-01-27     1     hdia H560      TRUE\n   2: A001 72.5   f 2010-01-27     1    diag1 B632     FALSE\n   3: A001 72.5   f 2010-01-27     1    diag2 H180     FALSE\n   4: A001 72.5   f 2010-01-27     1    diag3 J050     FALSE\n   5: A001 72.5   f 2010-06-26     2     hdia C871      TRUE\n  ---                                                       \n8042: A400 72.5   f 2011-10-26     4    diag2 C010     FALSE\n8043: A400 72.5   f 2013-09-01     5     hdia J149      TRUE\n8044: A400 72.5   f 2013-09-01     5    diag1 A920     FALSE\n8045: A400 72.5   f 2013-09-01     5    diag2 F452     FALSE\n8046: A400 72.5   f 2013-09-01     5    diag3 K301     FALSE\n\n# 3. \n\n\nlprlong &lt;- lprlong[, ddiag_pre2010 := any(diag[indat &lt;= as.Date(\"2010-01-01\")] %in% \n          c(\"D150\", \"D152\", \"D159\")), \n        by = .(pid)]\n\nsummary(lprlong)\n\n     pid                 age            sex                indat           \n Length:8046        Min.   :36.50   Length:8046        Min.   :2005-01-02  \n Class :character   1st Qu.:63.50   Class :character   1st Qu.:2007-09-23  \n Mode  :character   Median :68.00   Mode  :character   Median :2010-06-01  \n                    Mean   :68.43                      Mean   :2010-06-15  \n                    3rd Qu.:77.00                      3rd Qu.:2013-03-01  \n                    Max.   :90.50                      Max.   :2015-12-31  \n                                                                           \n     visit         diagtype        diag           main_diag      \n Min.   : 1.000   hdia :2008   Length:8046        Mode :logical  \n 1st Qu.: 2.000   diag1:2008   Class :character   FALSE:6038     \n Median : 3.000   diag2:1629   Mode  :character   TRUE :2008     \n Mean   : 3.466   diag3:1178                                     \n 3rd Qu.: 5.000   diag4: 695                                     \n Max.   :13.000   diag5: 341                                     \n                  diag6: 187                                     \n ddiag_pre2010  \n Mode :logical  \n FALSE:8032     \n TRUE :14       \n                \n                \n                \n                \n\nlprdt[pid == \"A048\"]\n\n    pid age sex      indat visit hdia diag1 diag2 diag3 diag4 diag5 diag6\n1: A048  86   f 2006-08-20     1 I162  E439  D152  F851  C230  E249  I801\n2: A048  86   f 2008-03-30     2 A981  D069  C472  E720  G119  B912  K901\n\n\n\n\n\nlprtbl &lt;- as_tibble(lpr)\n\n## 1. \nlprtbl |&gt; select(pid, age, sex, visit, hdia) |&gt; \n  pivot_wider(names_from = visit, values_from = hdia, names_prefix = \"visit\")\n\n# A tibble: 400 × 16\n   pid     age sex   visit1 visit2 visit3 visit4 visit5 visit6 visit7 visit8\n   &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt; \n 1 A001   72.5 f     H560   C871   C040   F412   F622   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;  \n 2 A002   81.5 f     B481   K959   G902   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;  \n 3 A003   54.5 m     E841   E071   H189   B090   C031   E179   E950   A100  \n 4 A004   72.5 f     D921   B401   B491   G172   E161   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;  \n 5 A005   86   f     J751   B101   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;  \n 6 A006   77   f     E310   C231   C212   B251   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;  \n 7 A007   86   f     I462   F190   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;  \n 8 A008   90.5 f     C451   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;  \n 9 A009   72.5 f     D162   H580   C729   B992   B500   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;  \n10 A010   63.5 m     A709   A772   B800   F212   K402   F712   K180   &lt;NA&gt;  \n# ℹ 390 more rows\n# ℹ 5 more variables: visit9 &lt;chr&gt;, visit10 &lt;chr&gt;, visit11 &lt;chr&gt;,\n#   visit12 &lt;chr&gt;, visit13 &lt;chr&gt;\n\n## 2. \n\nlprlong &lt;- lprtbl |&gt; pivot_longer(cols = hdia:diag6, values_to = \"diag\") |&gt; \n  mutate(maindiag = name == \"hdia\") |&gt; \n  filter(!is.na(diag))\nlprlong\n\n# A tibble: 8,046 × 8\n   pid     age sex   indat      visit name  diag  maindiag\n   &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;date&gt;     &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;lgl&gt;   \n 1 A001   72.5 f     2010-01-27     1 hdia  H560  TRUE    \n 2 A001   72.5 f     2010-01-27     1 diag1 B632  FALSE   \n 3 A001   72.5 f     2010-01-27     1 diag2 H180  FALSE   \n 4 A001   72.5 f     2010-01-27     1 diag3 J050  FALSE   \n 5 A001   72.5 f     2010-06-26     2 hdia  C871  TRUE    \n 6 A001   72.5 f     2010-06-26     2 diag1 D422  FALSE   \n 7 A001   72.5 f     2010-06-26     2 diag2 K820  FALSE   \n 8 A001   72.5 f     2010-06-26     2 diag3 A602  FALSE   \n 9 A001   72.5 f     2010-07-20     3 hdia  C040  TRUE    \n10 A001   72.5 f     2010-07-20     3 diag1 B710  FALSE   \n# ℹ 8,036 more rows\n\n## 3. \nlprlong &lt;- lprlong |&gt; group_by(pid) |&gt; \n  mutate(ddiag_pre2010 = any(diag[indat &lt;= as.Date(\"2010-01-01\")] %in% c(\"D150\", \"D152\", \"D159\")))\n\nsummary(lprlong)\n\n     pid                 age            sex                indat           \n Length:8046        Min.   :36.50   Length:8046        Min.   :2005-01-02  \n Class :character   1st Qu.:63.50   Class :character   1st Qu.:2007-09-23  \n Mode  :character   Median :68.00   Mode  :character   Median :2010-06-01  \n                    Mean   :68.43                      Mean   :2010-06-15  \n                    3rd Qu.:77.00                      3rd Qu.:2013-03-01  \n                    Max.   :90.50                      Max.   :2015-12-31  \n     visit            name               diag            maindiag      \n Min.   : 1.000   Length:8046        Length:8046        Mode :logical  \n 1st Qu.: 2.000   Class :character   Class :character   FALSE:6038     \n Median : 3.000   Mode  :character   Mode  :character   TRUE :2008     \n Mean   : 3.466                                                        \n 3rd Qu.: 5.000                                                        \n Max.   :13.000                                                        \n ddiag_pre2010  \n Mode :logical  \n FALSE:8032     \n TRUE :14"
  },
  {
    "objectID": "exercises/tidy-and-reshape.html",
    "href": "exercises/tidy-and-reshape.html",
    "title": "Tidying and reshaping – exercises",
    "section": "",
    "text": "In this lesson you will\n\nPractice tidying statistical results\nSee and understand how to reshape data from wide to long and long to wide"
  },
  {
    "objectID": "exercises/tidy-and-reshape.html#tidying-our-mean-sd-function",
    "href": "exercises/tidy-and-reshape.html#tidying-our-mean-sd-function",
    "title": "Tidying and reshaping – exercises",
    "section": "Tidying our mean sd function",
    "text": "Tidying our mean sd function\nLoad the broom package and look at the source code for tidy.lm\n\nbroom:::tidy.lm\n\nfunction (x, conf.int = FALSE, conf.level = 0.95, exponentiate = FALSE, \n    ...) \n{\n    warn_on_subclass(x, \"tidy\")\n    ret &lt;- as_tibble(summary(x)$coefficients, rownames = \"term\")\n    colnames(ret) &lt;- c(\"term\", \"estimate\", \"std.error\", \"statistic\", \n        \"p.value\")\n    coefs &lt;- stats::coef(x)\n    if (length(coefs) != nrow(ret)) {\n        coefs &lt;- tibble::enframe(coefs, name = \"term\", value = \"estimate\")\n        ret &lt;- left_join(coefs, ret, by = c(\"term\", \"estimate\"))\n    }\n    if (conf.int) {\n        ci &lt;- broom_confint_terms(x, level = conf.level)\n        ret &lt;- dplyr::left_join(ret, ci, by = \"term\")\n    }\n    if (exponentiate) {\n        ret &lt;- exponentiate(ret)\n    }\n    ret\n}\n&lt;bytecode: 0x558ddd4487c0&gt;\n&lt;environment: namespace:broom&gt;\n\n\n\nWrite a tidy method for our mean_sd function and try it out on the penguins dataset.\nApply the mean_sd function to the penguins body mass in grams by species and sex. Organize the results into a table suitable for publication, where it is easy to compare the two sexes."
  },
  {
    "objectID": "exercises/tidy-and-reshape.html#tidying-the-national-patient-register-dataset",
    "href": "exercises/tidy-and-reshape.html#tidying-the-national-patient-register-dataset",
    "title": "Tidying and reshaping – exercises",
    "section": "Tidying the national patient register dataset",
    "text": "Tidying the national patient register dataset\nLoad the LPR data example from \"https://sachsmc.github.io/r-programming/data/lpr-ex.rds\"\n\nlibrary(here)\n\nhere() starts at /home/sachsmc/Teaching/Courses/r-programming\n\nlpr &lt;- readRDS(here(\"data\", \"lpr-ex.rds\"))\n\nUse the tidy principles to do the following:\n\nReshape the data into wide, where the columns are the primary diagnosis (hdia) at each visit number\nReshape the data into longer format, where all of the diagnoses are stored in a single variable, with another variable indicating the primary diagnosis.\nCreate a new variable for each participant which equals TRUE if they had any diagnosis of either D150, D152, or D159 before the date 1 January 2010."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Programming and statistical modelling in R",
    "section": "",
    "text": "https://padlet.com/sachsmc/rprogs23"
  },
  {
    "objectID": "index.html#link-to-padlet-for-ongoing-class",
    "href": "index.html#link-to-padlet-for-ongoing-class",
    "title": "Programming and statistical modelling in R",
    "section": "",
    "text": "https://padlet.com/sachsmc/rprogs23"
  },
  {
    "objectID": "index.html#course-title",
    "href": "index.html#course-title",
    "title": "Programming and statistical modelling in R",
    "section": "Course title",
    "text": "Course title\nProgramming and statistical modelling in R"
  },
  {
    "objectID": "index.html#learning-objectives",
    "href": "index.html#learning-objectives",
    "title": "Programming and statistical modelling in R",
    "section": "Learning objectives",
    "text": "Learning objectives\nThe aim of the course is to make the participants able to\n\nuse programming principles (loops and functions) to handle repetitive tasks\nuse functions in R\nuse loops in R\ndo efficient data manipulation and aggregation"
  },
  {
    "objectID": "index.html#content",
    "href": "index.html#content",
    "title": "Programming and statistical modelling in R",
    "section": "Content",
    "text": "Content\nThe course covers use of the statistical software package R. The aim is to take the intermediate R user to the next level, and make use of programming techniques for more efficient use of R. A key focus in on introducing loops and functions. The course will consist of lectures and exercises over 4 days. This will give the students a chance to use and work with different aspects of R."
  },
  {
    "objectID": "index.html#participants",
    "href": "index.html#participants",
    "title": "Programming and statistical modelling in R",
    "section": "Participants",
    "text": "Participants\nPh.D.-students and health researchers with a basic knowledge of statistics corresponding to the course on basic statistics for health researchers and with a good working knowledge of R, e.g., as obtained by having already followed an introductory course on R.\nParticipants are expected to bring their own laptop with R installed for the exercises."
  },
  {
    "objectID": "index.html#relevance-to-graduate-programmes",
    "href": "index.html#relevance-to-graduate-programmes",
    "title": "Programming and statistical modelling in R",
    "section": "Relevance to graduate programmes",
    "text": "Relevance to graduate programmes\nThe course is relevant to PhD students from the following graduate programmes at the Graduate School of Health and Medical Sciences, UCPH:\nALL GRADUATE PROGRAMMES"
  },
  {
    "objectID": "index.html#language",
    "href": "index.html#language",
    "title": "Programming and statistical modelling in R",
    "section": "Language",
    "text": "Language\nEnglish."
  },
  {
    "objectID": "index.html#form",
    "href": "index.html#form",
    "title": "Programming and statistical modelling in R",
    "section": "Form",
    "text": "Form\nLectures in four half days, four optional exercise hours placed as one each week."
  },
  {
    "objectID": "index.html#course-director",
    "href": "index.html#course-director",
    "title": "Programming and statistical modelling in R",
    "section": "Course director",
    "text": "Course director\nMichael Sachs, Section of Biostatistics"
  },
  {
    "objectID": "index.html#teachers",
    "href": "index.html#teachers",
    "title": "Programming and statistical modelling in R",
    "section": "Teachers",
    "text": "Teachers\nMichael Sachs and other members of the staff at the Section of Biostatistics."
  },
  {
    "objectID": "index.html#dates",
    "href": "index.html#dates",
    "title": "Programming and statistical modelling in R",
    "section": "Dates",
    "text": "Dates\n30 October, 2, 6, 9, November 2023, all days from 10.00-16.00, with breaks for lunch."
  },
  {
    "objectID": "index.html#course-location",
    "href": "index.html#course-location",
    "title": "Programming and statistical modelling in R",
    "section": "Course location",
    "text": "Course location\n\nOn Monday 30 Oct and 6 Nov\nCSS 2-2-55\n\n\nOn Thursday 2 and 9 Nov\nCSS 22-0-19"
  },
  {
    "objectID": "index.html#course-credit",
    "href": "index.html#course-credit",
    "title": "Programming and statistical modelling in R",
    "section": "Course credit",
    "text": "Course credit\nTo get credit for the course, you must submit and pass the take-home exam. Attendance is encouraged but not required.\nSend your solution to skl@sund.ku.dk no later than 23.59 on November 16."
  },
  {
    "objectID": "lectures/conclusion.html#project-organization",
    "href": "lectures/conclusion.html#project-organization",
    "title": "Summary and conclusion",
    "section": "Project organization",
    "text": "Project organization\n\nSetting up your project structure\nDocumentation and readme\nWorking directories and file paths"
  },
  {
    "objectID": "lectures/conclusion.html#basic-programming-principles",
    "href": "lectures/conclusion.html#basic-programming-principles",
    "title": "Summary and conclusion",
    "section": "Basic programming principles",
    "text": "Basic programming principles\n\nData structures\nLoops and conditionals\nFunctions, classes, generics"
  },
  {
    "objectID": "lectures/conclusion.html#working-with-data",
    "href": "lectures/conclusion.html#working-with-data",
    "title": "Summary and conclusion",
    "section": "Working with data",
    "text": "Working with data\n\nTidying\nReshaping\nMerging\nDealing with dates and strings"
  },
  {
    "objectID": "lectures/conclusion.html#where-to-go-from-here",
    "href": "lectures/conclusion.html#where-to-go-from-here",
    "title": "Summary and conclusion",
    "section": "Where to go from here?",
    "text": "Where to go from here?\n\nResearch project management and reproducibility\n\ntargets package\nproject templates\ngit and/or github\n\nR package development\n\nGreat way to share code, data, and documentation\nPackages for personal and internal use\n\nHigh performance computing\n\nParallelization, using computing servers\nUsing C/C++ in R (or other languages)\n\nVisualization and interactivity\n\nshiny package\nDynamic documents and graphics\nggplot2 custom Geoms and Stats"
  },
  {
    "objectID": "lectures/conclusion.html#how-to-get-help",
    "href": "lectures/conclusion.html#how-to-get-help",
    "title": "Summary and conclusion",
    "section": "How to get help?",
    "text": "How to get help?\n\nKeep learning on your own, remember that things change\nUse the linked resources to get some background\nCRAN task views, help files, vignettes\nGoogle “how do I do x in R”, or the exact error message\nStackoverflow, Rstudio forums, R mailing lists"
  },
  {
    "objectID": "lectures/conclusion.html#course-feedback",
    "href": "lectures/conclusion.html#course-feedback",
    "title": "Summary and conclusion",
    "section": "Course feedback",
    "text": "Course feedback\n\nWhat did you like about the course?\nWhat did you dislike about the course?\nDid you knowledge about R programming inprove during the course?\nAre there topics you wanted to be covered but were not?"
  },
  {
    "objectID": "lectures/data-structures.html#overview",
    "href": "lectures/data-structures.html#overview",
    "title": "Data structures in R",
    "section": "Overview",
    "text": "Overview\n\nR is a programming language, most often used to work with data\nI use the term ‘data’ loosely, can refer to\n\ndata to be analyzed\nresults from a data analysis\ninformation used in an analysis (e.g., ICD diagnosis codes)\n\nThink carefully about organizing your data structures"
  },
  {
    "objectID": "lectures/data-structures.html#types-of-data",
    "href": "lectures/data-structures.html#types-of-data",
    "title": "Data structures in R",
    "section": "Types of data",
    "text": "Types of data\nlogical, numeric, character, factor, date, …\n\nTRUE\n\n[1] TRUE\n\n1.2\n\n[1] 1.2\n\n\"hello\"\n\n[1] \"hello\"\n\nfactor(\"low\", levels = c(\"low\", \"med\", \"high\"))\n\n[1] low\nLevels: low med high\n\nas.Date(\"2022-05-11\", format = \"%Y-%m-%d\")\n\n[1] \"2022-05-11\"\n\nNULL\n\nNULL"
  },
  {
    "objectID": "lectures/data-structures.html#vectors",
    "href": "lectures/data-structures.html#vectors",
    "title": "Data structures in R",
    "section": "Vectors",
    "text": "Vectors\nA one dimensional collection of data with the same type. Can be named or unnamed. Can be created in many ways:\n\n1:4\n\n[1] 1 2 3 4\n\nseq(1, 4, by = 1)\n\n[1] 1 2 3 4\n\nletters\n\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n\nrep(TRUE, times = 5)\n\n[1] TRUE TRUE TRUE TRUE TRUE\n\nx &lt;- 1:4\nnames(x) &lt;- c(\"a\", \"b\", \"c\", \"d\")\nx\n\na b c d \n1 2 3 4"
  },
  {
    "objectID": "lectures/data-structures.html#missing-and-emptynull-values",
    "href": "lectures/data-structures.html#missing-and-emptynull-values",
    "title": "Data structures in R",
    "section": "Missing and empty/null values",
    "text": "Missing and empty/null values\nNA for missing, and note that this has a data type.\nNaN for “not a number”, e.g., 0 / 0\nNULL is empty, and has 0 length\n\nc(NA, 1) ## different from the next line\n\n[1] NA  1\n\nc(NA, \"a\")\n\n[1] NA  \"a\"\n\nc(NULL, \"a\")\n\n[1] \"a\"\n\nlist(NULL, NULL, 1:3)\n\n[[1]]\nNULL\n\n[[2]]\nNULL\n\n[[3]]\n[1] 1 2 3"
  },
  {
    "objectID": "lectures/data-structures.html#indexing-vectors",
    "href": "lectures/data-structures.html#indexing-vectors",
    "title": "Data structures in R",
    "section": "Indexing vectors",
    "text": "Indexing vectors\nSubsequences of vectors are obtained with square brackets []\nInside the square brackets goes the index, which can be itself a vector of numbers, logicals, or characters (if the vector is named)\n\nx &lt;- 1:6\nnames(x) &lt;- c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")\n\nx[c(1, 3, 5)]\n\na c e \n1 3 5 \n\nx[-c(2, 4, 6)] # negative index only works for numeric\n\na c e \n1 3 5 \n\nx[c(TRUE, FALSE, TRUE, FALSE, TRUE, FALSE)]\n\na c e \n1 3 5 \n\nx[(x %% 2) == 1]\n\na c e \n1 3 5 \n\nx[(x %% 2) != 0]\n\na c e \n1 3 5 \n\nx[c(\"a\", \"c\", \"d\")]\n\na c d \n1 3 4"
  },
  {
    "objectID": "lectures/data-structures.html#lists",
    "href": "lectures/data-structures.html#lists",
    "title": "Data structures in R",
    "section": "Lists",
    "text": "Lists\nA list is a collection of things not required to be the same type. An element of a list can be any R object. Can also be named or not.\n\nlist(1:4, letters[1:4], mean)\n\n[[1]]\n[1] 1 2 3 4\n\n[[2]]\n[1] \"a\" \"b\" \"c\" \"d\"\n\n[[3]]\nfunction (x, ...) \nUseMethod(\"mean\")\n&lt;bytecode: 0x55f89f1dd088&gt;\n&lt;environment: namespace:base&gt;\n\nlist(numbers = 1:4, \n     letters = letters[1:4], \n     mean = mean,\n     list = list(\"a\", 1, TRUE))\n\n$numbers\n[1] 1 2 3 4\n\n$letters\n[1] \"a\" \"b\" \"c\" \"d\"\n\n$mean\nfunction (x, ...) \nUseMethod(\"mean\")\n&lt;bytecode: 0x55f89f1dd088&gt;\n&lt;environment: namespace:base&gt;\n\n$list\n$list[[1]]\n[1] \"a\"\n\n$list[[2]]\n[1] 1\n\n$list[[3]]\n[1] TRUE\n\n## an empty list\nlist()\n\nlist()\n\n## a list of 3 placeholders\nvector(mode = \"list\", length = 3)\n\n[[1]]\nNULL\n\n[[2]]\nNULL\n\n[[3]]\nNULL"
  },
  {
    "objectID": "lectures/data-structures.html#indexing-lists",
    "href": "lectures/data-structures.html#indexing-lists",
    "title": "Data structures in R",
    "section": "Indexing lists",
    "text": "Indexing lists\n\nxl &lt;- list(numbers = 1:4, \n     letters = letters[1:4], \n     mean = mean,\n     list = list(\"a\", 1, TRUE))\n\nA list can be indexed with square brackets [] or double-square brackets [[]], but there is a difference!\n\nxl[[1]] ## returns the first element of the list (vector in this case)\n\n[1] 1 2 3 4\n\nxl[1] ## returns a sublist\n\n$numbers\n[1] 1 2 3 4\n\nxl[-1]\n\n$letters\n[1] \"a\" \"b\" \"c\" \"d\"\n\n$mean\nfunction (x, ...) \nUseMethod(\"mean\")\n&lt;bytecode: 0x55f89f1dd088&gt;\n&lt;environment: namespace:base&gt;\n\n$list\n$list[[1]]\n[1] \"a\"\n\n$list[[2]]\n[1] 1\n\n$list[[3]]\n[1] TRUE\n\nxl[1:2] ## works with vectors\n\n$numbers\n[1] 1 2 3 4\n\n$letters\n[1] \"a\" \"b\" \"c\" \"d\"\n\nxl[[1:2]] ## works but does something different\n\n[1] 2\n\nxl$numbers\n\n[1] 1 2 3 4\n\nxl[[\"numbers\"]]\n\n[1] 1 2 3 4"
  },
  {
    "objectID": "lectures/data-structures.html#concatenating-lists",
    "href": "lectures/data-structures.html#concatenating-lists",
    "title": "Data structures in R",
    "section": "Concatenating lists",
    "text": "Concatenating lists\nNew elements can be added by name or number\n\nxl$LETTERS &lt;- LETTERS[1:4]\nxl[[length(xl) + 1]] &lt;- LETTERS[1:5]\nxl\n\n$numbers\n[1] 1 2 3 4\n\n$letters\n[1] \"a\" \"b\" \"c\" \"d\"\n\n$mean\nfunction (x, ...) \nUseMethod(\"mean\")\n&lt;bytecode: 0x55f89f1dd088&gt;\n&lt;environment: namespace:base&gt;\n\n$list\n$list[[1]]\n[1] \"a\"\n\n$list[[2]]\n[1] 1\n\n$list[[3]]\n[1] TRUE\n\n\n$LETTERS\n[1] \"A\" \"B\" \"C\" \"D\"\n\n[[6]]\n[1] \"A\" \"B\" \"C\" \"D\" \"E\"\n\n\nThe c function concatenates new elements to the list\n\nc(xl, AB = list(LETTERS[1:2]))\n\n$numbers\n[1] 1 2 3 4\n\n$letters\n[1] \"a\" \"b\" \"c\" \"d\"\n\n$mean\nfunction (x, ...) \nUseMethod(\"mean\")\n&lt;bytecode: 0x55f89f1dd088&gt;\n&lt;environment: namespace:base&gt;\n\n$list\n$list[[1]]\n[1] \"a\"\n\n$list[[2]]\n[1] 1\n\n$list[[3]]\n[1] TRUE\n\n\n$LETTERS\n[1] \"A\" \"B\" \"C\" \"D\"\n\n[[6]]\n[1] \"A\" \"B\" \"C\" \"D\" \"E\"\n\n$AB\n[1] \"A\" \"B\"\n\nc(xl, AB = LETTERS[1:2]) # careful!\n\n$numbers\n[1] 1 2 3 4\n\n$letters\n[1] \"a\" \"b\" \"c\" \"d\"\n\n$mean\nfunction (x, ...) \nUseMethod(\"mean\")\n&lt;bytecode: 0x55f89f1dd088&gt;\n&lt;environment: namespace:base&gt;\n\n$list\n$list[[1]]\n[1] \"a\"\n\n$list[[2]]\n[1] 1\n\n$list[[3]]\n[1] TRUE\n\n\n$LETTERS\n[1] \"A\" \"B\" \"C\" \"D\"\n\n[[6]]\n[1] \"A\" \"B\" \"C\" \"D\" \"E\"\n\n$AB1\n[1] \"A\"\n\n$AB2\n[1] \"B\""
  },
  {
    "objectID": "lectures/data-structures.html#matrices",
    "href": "lectures/data-structures.html#matrices",
    "title": "Data structures in R",
    "section": "Matrices",
    "text": "Matrices\nJust like in math, R matrices are like vectors that have 2 dimensions, and are indexed also by square brackets.\nThere are lots of matrix manipulation functions in base R\n\nM1 &lt;- matrix(1:12, nrow = 3, ncol = 4)\nM1\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    4    7   10\n[2,]    2    5    8   11\n[3,]    3    6    9   12\n\nM2 &lt;- matrix(1:12, nrow = 3, ncol = 4, \n       dimnames = list(letters[1:3], LETTERS[1:4]))\nM2\n\n  A B C  D\na 1 4 7 10\nb 2 5 8 11\nc 3 6 9 12\n\ndiag(M1)\n\n[1] 1 5 9\n\nlower.tri(M1)\n\n      [,1]  [,2]  [,3]  [,4]\n[1,] FALSE FALSE FALSE FALSE\n[2,]  TRUE FALSE FALSE FALSE\n[3,]  TRUE  TRUE FALSE FALSE\n\nrow(M1)\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    1    1    1\n[2,]    2    2    2    2\n[3,]    3    3    3    3\n\ncol(M2)\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    2    3    4\n[2,]    1    2    3    4\n[3,]    1    2    3    4\n\ndiag(3) %*% M1\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    4    7   10\n[2,]    2    5    8   11\n[3,]    3    6    9   12"
  },
  {
    "objectID": "lectures/data-structures.html#indexing-matrices",
    "href": "lectures/data-structures.html#indexing-matrices",
    "title": "Data structures in R",
    "section": "Indexing matrices",
    "text": "Indexing matrices\nUsing square brackets, we get a single value by using two numbers or names separated by a comma:\n\nM1[2, 3]\n\n[1] 8\n\nM2[\"b\", \"C\"]\n\n[1] 8\n\n\nA missing index means “everything”, so this returns a vector\n\nM1[2,]\n\n[1]  2  5  8 11\n\n## if you want the result to be a matrix (with 1 row)\nM1[2, , drop = FALSE]\n\n     [,1] [,2] [,3] [,4]\n[1,]    2    5    8   11\n\n\nCan also use a logical matrix or numeric as a single index\n\nM1[M1 &lt; 7] ## but this returns a vector\n\n[1] 1 2 3 4 5 6\n\nM1[M1 &lt; 7] &lt;- 0 ## when used with assignment, the matrix is preserved\nM1\n\n     [,1] [,2] [,3] [,4]\n[1,]    0    0    7   10\n[2,]    0    0    8   11\n[3,]    0    0    9   12\n\n\nIndex matrices are convenient but hard to understand\nBefore we used a single index for each dimension:\n\nM2[1, 3]\n\n[1] 7\n\nM2[2, 1]\n\n[1] 2\n\nM2[3, 4]\n\n[1] 12\n\n\nIf we create a series of paired single indices, and store them in a matrix with 2 columns, we can use that matrix as an index:\n\nimat &lt;- rbind(c(1, 3), \n              c(2, 1), \n              c(3, 4))\nimat\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    1\n[3,]    3    4\n\nM2[imat]\n\n[1]  7  2 12\n\nM2[imat] &lt;- NA\nM2\n\n   A B  C  D\na  1 4 NA 10\nb NA 5  8 11\nc  3 6  9 NA"
  },
  {
    "objectID": "lectures/data-structures.html#matrix-arithmetic",
    "href": "lectures/data-structures.html#matrix-arithmetic",
    "title": "Data structures in R",
    "section": "Matrix arithmetic",
    "text": "Matrix arithmetic\nMatrix transpose, multiplication, inversion, eigenvalues, etc, are all available in R\n\nS1 &lt;- matrix(runif(9), nrow = 3, ncol = 3)\nS2 &lt;- matrix(runif(9), nrow = 3, ncol = 3)\nx &lt;- c(1, 1.5, 3)\n\nS1 %*% S2\n\n          [,1]      [,2]      [,3]\n[1,] 1.0615963 0.8990176 1.3161145\n[2,] 0.6777860 0.5629088 0.9023865\n[3,] 0.8937651 0.7530424 0.9415371\n\nt(S1) %*% S2\n\n          [,1]      [,2]      [,3]\n[1,] 1.0146454 0.8395129 1.1920385\n[2,] 0.3917172 0.3020359 0.4164524\n[3,] 1.2845089 0.9569500 1.2004834\n\nx %*% solve(S1) %*% x\n\n         [,1]\n[1,] 32.91373"
  },
  {
    "objectID": "lectures/data-structures.html#arrays",
    "href": "lectures/data-structures.html#arrays",
    "title": "Data structures in R",
    "section": "Arrays",
    "text": "Arrays\nArrays are like matrices, but with more dimensions. A matrix is an array with 2 dimensions. Arrays can have more than 2 dimensions.\nThe data gets filled in by the first dimension, then the second, then the third, …\n\nA1 &lt;- array(1:32, dim = c(4, 4, 2))\nA1\n\n, , 1\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    5    9   13\n[2,]    2    6   10   14\n[3,]    3    7   11   15\n[4,]    4    8   12   16\n\n, , 2\n\n     [,1] [,2] [,3] [,4]\n[1,]   17   21   25   29\n[2,]   18   22   26   30\n[3,]   19   23   27   31\n[4,]   20   24   28   32\n\n\nThe data also get “unrolled” in the same way.\n\nc(A1)\n\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32\n\n\nIndexing works like it does with matrices:\n\nA1[2, 4, 2] # value\n\n[1] 30\n\nA1[2, 4, ] # vector\n\n[1] 14 30\n\nA1[, , 2] # matrix\n\n     [,1] [,2] [,3] [,4]\n[1,]   17   21   25   29\n[2,]   18   22   26   30\n[3,]   19   23   27   31\n[4,]   20   24   28   32\n\nA1[, , 2, drop = FALSE] ## still an array\n\n, , 1\n\n     [,1] [,2] [,3] [,4]\n[1,]   17   21   25   29\n[2,]   18   22   26   30\n[3,]   19   23   27   31\n[4,]   20   24   28   32\n\ni3 &lt;- rbind(c(2, 4, 2), \n            c(2, 4, 1), \n            c(3, 2, 1))\n\nA1[i3]\n\n[1] 30 14  7"
  },
  {
    "objectID": "lectures/data-structures.html#data-frames",
    "href": "lectures/data-structures.html#data-frames",
    "title": "Data structures in R",
    "section": "Data frames",
    "text": "Data frames\nData frames look like matrices, but the columns can be different data types:\n\nd1 &lt;- data.frame(logical = c(FALSE, TRUE, FALSE), \n                 numeric = c(1, 2, 3), \n                 char = c(\"a\", \"b\", \"c\"))\nd1\n\n  logical numeric char\n1   FALSE       1    a\n2    TRUE       2    b\n3   FALSE       3    c\n\nd1[, \"char\"]\n\n[1] \"a\" \"b\" \"c\"\n\nd1[, \"numeric\"]\n\n[1] 1 2 3\n\n\nWhile they look like matrices, they act more like lists:\n\nd1$numeric\n\n[1] 1 2 3\n\nd1[[\"char\"]]\n\n[1] \"a\" \"b\" \"c\"\n\nd1[[1]]\n\n[1] FALSE  TRUE FALSE\n\nnames(d1)\n\n[1] \"logical\" \"numeric\" \"char\"   \n\nd1$missing &lt;- c(NA, NA, NA)\nd1\n\n  logical numeric char missing\n1   FALSE       1    a      NA\n2    TRUE       2    b      NA\n3   FALSE       3    c      NA"
  },
  {
    "objectID": "lectures/data-structures.html#indexing-and-manipulating-data-frames",
    "href": "lectures/data-structures.html#indexing-and-manipulating-data-frames",
    "title": "Data structures in R",
    "section": "Indexing and manipulating data frames",
    "text": "Indexing and manipulating data frames\nMultiple ways to refer to a particular column:\n\nd1$numeric\n\n[1] 1 2 3\n\nd1[[\"numeric\"]]\n\n[1] 1 2 3\n\nd1[, \"numeric\"]\n\n[1] 1 2 3\n\nd1[, 2]\n\n[1] 1 2 3\n\nd1[[2]]\n\n[1] 1 2 3\n\n\nSubsetting\n\nsubset(d1, logical == TRUE) ## knows where to find logical\n\n  logical numeric char missing\n2    TRUE       2    b      NA\n\nd1[d1$numeric &lt;= 2, ] ## need to tell it that numeric is in d1\n\n  logical numeric char missing\n1   FALSE       1    a      NA\n2    TRUE       2    b      NA\n\n\nManipulation\n\nd1$numeric.squared &lt;- d1$numeric^2\nd1\n\n  logical numeric char missing numeric.squared\n1   FALSE       1    a      NA               1\n2    TRUE       2    b      NA               4\n3   FALSE       3    c      NA               9\n\nd1 &lt;- within(d1, {\n  numeric.cubed &lt;- numeric^3\n  not.logical &lt;- !logical\n})\nd1\n\n  logical numeric char missing numeric.squared not.logical numeric.cubed\n1   FALSE       1    a      NA               1        TRUE             1\n2    TRUE       2    b      NA               4       FALSE             8\n3   FALSE       3    c      NA               9        TRUE            27\n\nwith(d1, {\n  \n  sqrt(numeric)\n  \n})\n\n[1] 1.000000 1.414214 1.732051\n\nattach(d1) ## this is like a global with/within\n### many texts recommend not using attach\n\nnumeric\n\n[1] 1 2 3\n\n!logical\n\n[1]  TRUE FALSE  TRUE\n\nnumeric.squared\n\n[1] 1 4 9\n\nog.num &lt;- sqrt(numeric.squared) ## this does not work like within\n\ndetach(d1)\nog.num ## still here\n\n[1] 1 2 3\n\nnumeric.squared ## not attached anymore\n\nError in eval(expr, envir, enclos): object 'numeric.squared' not found"
  },
  {
    "objectID": "lectures/data-structures.html#coercion",
    "href": "lectures/data-structures.html#coercion",
    "title": "Data structures in R",
    "section": "Coercion",
    "text": "Coercion\nCoercion is what happens when data gets converted from one type to another (e.g., numeric to character).\nThis can also be done explicitly using the as. family of functions.\nOne of R’s “nice” features is that it will automatically attempt to coerce data when different types meet in an operation.\nExamples\n\nc(FALSE, TRUE, FALSE) * 1.0\n\n[1] 0 1 0\n\n1 - c(FALSE, TRUE)\n\n[1] 1 0\n\nas.logical(1 - c(FALSE, TRUE))\n\n[1]  TRUE FALSE\n\npaste(\"A\", 1:4, sep = \"_\")\n\n[1] \"A_1\" \"A_2\" \"A_3\" \"A_4\"\n\n\nThis is useful sometimes, other times it can cause problems:\n\nas.numeric(c(\"1.35\", \"2.5\", \"&lt;.01\"))\n\n[1] 1.35 2.50   NA\n\n\nHopefully R warns you if data is destroyed due to coercion.\nIf the data type is critical for an operation then it is up to you to check using the is. family of functions."
  },
  {
    "objectID": "lectures/data-structures.html#recycling",
    "href": "lectures/data-structures.html#recycling",
    "title": "Data structures in R",
    "section": "Recycling",
    "text": "Recycling\nVector and array arithmetic works elementwise, as long as the things have the same dimension.\nIf not, the shorter one is sometimes recycled to match the larger dimension thing\n\nc(1, 2) * c(1:6)\n\n[1]  1  4  3  8  5 12\n\nc(1, 2) * c(1:5)\n\n[1] 1 4 3 8 5\n\n\nI often make this mistake when calculating proportions from a table:\n\nt1 &lt;- table(mtcars$cyl, mtcars$gear)\nt1\n\n   \n     3  4  5\n  4  1  8  2\n  6  2  4  1\n  8 12  0  2\n\n## I want column proportions\nt1 / colSums(t1)  ## this is wrong because of recycling rowwise\n\n   \n             3          4          5\n  4 0.06666667 0.53333333 0.13333333\n  6 0.16666667 0.33333333 0.08333333\n  8 2.40000000 0.00000000 0.40000000\n\n## create matrix of the same dimensions\nt1 / rbind(colSums(t1), colSums(t1), colSums(t1))\n\n   \n             3          4          5\n  4 0.06666667 0.66666667 0.40000000\n  6 0.13333333 0.33333333 0.20000000\n  8 0.80000000 0.00000000 0.40000000\n\n## or use a built-in function\nproportions(t1, margin = 2)\n\n   \n             3          4          5\n  4 0.06666667 0.66666667 0.40000000\n  6 0.13333333 0.33333333 0.20000000\n  8 0.80000000 0.00000000 0.40000000\n\n\nAgain, hopefully R warns you about this, but when in doubt check and validate lengths."
  },
  {
    "objectID": "lectures/data-structures.html#attributes",
    "href": "lectures/data-structures.html#attributes",
    "title": "Data structures in R",
    "section": "Attributes",
    "text": "Attributes\nAny object can have attributes, which are data that get attached to the object. It is a flexible way to include information with an object.\nThey are stored as names and value as in a list. Query or replace them with attributes or attr\n\nattributes(A1)\n\n$dim\n[1] 4 4 2\n\nattr(A1, \"dim\")\n\n[1] 4 4 2\n\nattr(A1, \"note\") &lt;- \"This is a new attribute\"\n\nA1\n\n, , 1\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    5    9   13\n[2,]    2    6   10   14\n[3,]    3    7   11   15\n[4,]    4    8   12   16\n\n, , 2\n\n     [,1] [,2] [,3] [,4]\n[1,]   17   21   25   29\n[2,]   18   22   26   30\n[3,]   19   23   27   31\n[4,]   20   24   28   32\n\nattr(,\"note\")\n[1] \"This is a new attribute\"\n\n\nSome attributes are special, e.g., class, comment, dim, dimnames, …, and have special ways of querying and setting\n\ncomment(A1) &lt;- paste(\"I created this array on \", Sys.time())\nA1\n\n, , 1\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    5    9   13\n[2,]    2    6   10   14\n[3,]    3    7   11   15\n[4,]    4    8   12   16\n\n, , 2\n\n     [,1] [,2] [,3] [,4]\n[1,]   17   21   25   29\n[2,]   18   22   26   30\n[3,]   19   23   27   31\n[4,]   20   24   28   32\n\nattr(,\"note\")\n[1] \"This is a new attribute\"\n\ncomment(A1)\n\n[1] \"I created this array on  2023-10-30 12:16:11.302018\""
  },
  {
    "objectID": "lectures/data-structures.html#environments-how-does-r-find-things",
    "href": "lectures/data-structures.html#environments-how-does-r-find-things",
    "title": "Data structures in R",
    "section": "Environments – how does R find things?",
    "text": "Environments – how does R find things?\nAn environment is kind of like a list, it contains a number of arbitrary objects.\nThe global environment is a special one, look at the upper right pane of Rstudio, or run\n\n## all of the objects in the global environment\nls()\n\n [1] \"A1\"              \"d1\"              \"has_annotations\" \"i3\"             \n [5] \"imat\"            \"M1\"              \"M2\"              \"og.num\"         \n [9] \"S1\"              \"S2\"              \"t1\"              \"x\"              \n[13] \"xl\"             \n\n\nWhen you type a name in the console, it will first look for it in the global environment. If it cannot find it there, it will then look in the attached packages.\nWe will come back to environments when we talk about functions."
  },
  {
    "objectID": "lectures/data-structures.html#packages",
    "href": "lectures/data-structures.html#packages",
    "title": "Data structures in R",
    "section": "Packages",
    "text": "Packages\nAdd on packages can be installed from a few different places, CRAN, Bioconductor, github, R-forge, and locally from package files.\nThey are installed to your system with install.packages(\"pkgname\")\nWhen you use library(\"pkgname\"), the package is attached, so that objects in the package can be found just by typing the name:\n\nlibrary(palmerpenguins)\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nYou can use objects from packages without attaching them with :: (two colons)\n\nhead(survival::aml)\n\n  time status          x\n1    9      1 Maintained\n2   13      1 Maintained\n3   13      0 Maintained\n4   18      1 Maintained\n5   23      1 Maintained\n6   28      0 Maintained\n\n\nand you can get internal objects from a package with ::: (three colons)\n\nlibrary(survival)\nplot.aareg ## error\n\nError in eval(expr, envir, enclos): object 'plot.aareg' not found\n\nhead(survival:::plot.aareg) ## finds it\n\n                                                    \n1 function (x, se = TRUE, maxtime, type = \"s\", ...) \n2 {                                                 \n3     if (!inherits(x, \"aareg\"))                    \n4         stop(\"Must be an aareg object\")           \n5     if (missing(maxtime))                         \n6         keep &lt;- 1:length(x$time)"
  },
  {
    "objectID": "lectures/data-structures.html#s4-objects",
    "href": "lectures/data-structures.html#s4-objects",
    "title": "Data structures in R",
    "section": "S4 objects",
    "text": "S4 objects\nSome packages you may use (e.g., from Bioconductor) return S4 objects. These are kind of like lists, but to access objects (called ‘slots’) inside, use @ (the at symbol).\nFor example\n\n## A simple class with two slots\ntrack &lt;- setClass(\"track\", slots = c(x=\"numeric\", y=\"numeric\"))\n## an object from the class\nts1 &lt;- track(x = 1:10, y = 1:10 + rnorm(10))\nts1\n\nAn object of class \"track\"\nSlot \"x\":\n [1]  1  2  3  4  5  6  7  8  9 10\n\nSlot \"y\":\n [1] -0.04708951  2.11414411  4.97280868  3.19829977  4.93569938  4.80342159\n [7]  8.00694857  6.87818686  8.91942486 10.27826984\n\nts1@x\n\n [1]  1  2  3  4  5  6  7  8  9 10"
  },
  {
    "objectID": "lectures/data-structures.html#tibbles",
    "href": "lectures/data-structures.html#tibbles",
    "title": "Data structures in R",
    "section": "Tibbles",
    "text": "Tibbles\nTibbles (cute name for ‘table’) are data frames with enhanced printing.\n\nlibrary(tibble)\nlibrary(palmerpenguins)\nclass(penguins)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nYou can convert a regular data.frame to a tibble\n\nmttbl &lt;- as_tibble(mtcars)\nmttbl\n\n# A tibble: 32 × 11\n     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4\n 2  21       6  160    110  3.9   2.88  17.0     0     1     4     4\n 3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1\n 4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1\n 5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2\n 6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1\n 7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4\n 8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2\n 9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2\n10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4\n# ℹ 22 more rows\n\n\nThe indexing behavior is slightly different from data frames:\n\nmttbl[, \"mpg\"] ## still a tibble\n\n# A tibble: 32 × 1\n     mpg\n   &lt;dbl&gt;\n 1  21  \n 2  21  \n 3  22.8\n 4  21.4\n 5  18.7\n 6  18.1\n 7  14.3\n 8  24.4\n 9  22.8\n10  19.2\n# ℹ 22 more rows\n\nmtcars[, \"mpg\"]\n\n [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4\n[16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7\n[31] 15.0 21.4\n\nmttbl[[\"mpg\"]] ## gives a vector\n\n [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4\n[16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7\n[31] 15.0 21.4\n\nmttbl$mpg ## same as data.frame\n\n [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4\n[16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7\n[31] 15.0 21.4"
  },
  {
    "objectID": "lectures/data-structures.html#data.tables",
    "href": "lectures/data-structures.html#data.tables",
    "title": "Data structures in R",
    "section": "data.tables",
    "text": "data.tables\ndata.table is a package that provides another data.frame extension.\nIt has many features for data manipulation and management with a focus on speed, both typing and computer speed for large datasets.\nThere is a special syntax for indexing and merging using square brackets, we will come back to this (because it is my favorite tool for data management)\n\nlibrary(data.table)\n\nmtdt &lt;- data.table(mtcars)\nclass(mtdt)\n\n[1] \"data.table\" \"data.frame\"\n\nhead(mtdt)\n\n    mpg cyl disp  hp drat    wt  qsec vs am gear carb\n1: 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\n2: 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\n3: 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n4: 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n5: 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n6: 18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\nsetkey(mtdt, \"mpg\")\nhead(mtdt)\n\n    mpg cyl disp  hp drat    wt  qsec vs am gear carb\n1: 10.4   8  472 205 2.93 5.250 17.98  0  0    3    4\n2: 10.4   8  460 215 3.00 5.424 17.82  0  0    3    4\n3: 13.3   8  350 245 3.73 3.840 15.41  0  0    3    4\n4: 14.3   8  360 245 3.21 3.570 15.84  0  0    3    4\n5: 14.7   8  440 230 3.23 5.345 17.42  0  0    3    4\n6: 15.0   8  301 335 3.54 3.570 14.60  0  1    5    8\n\nmtdt[, .(meanwt = mean(wt)), by = .(cyl)]\n\n   cyl   meanwt\n1:   8 3.999214\n2:   6 3.117143\n3:   4 2.285727"
  },
  {
    "objectID": "lectures/data-structures.html#reading-in-external-data",
    "href": "lectures/data-structures.html#reading-in-external-data",
    "title": "Data structures in R",
    "section": "Reading in external data",
    "text": "Reading in external data\nThe basic functions are read.table, read.csv, read.csv2\nVia add on packages, R supports import of any data format I can think of.\nThe most flexible way to read in data is with the rio package. It guesses what the format is and uses the correct import tool (most of the time)\n\nlibrary(rio)\nlibrary(here)\ndf &lt;- import(here(\"data/starwars.xlsx\"))\nhead(df)\n\n            Name homeworld species\n1 Luke Skywalker  Tatooine   Human\n2          C-3PO  Tatooine   Human\n3          R2-D2  Alderaan   Human\n4    Darth Vader  Tatooine   Human\n5    Leia Organa  Tatooine   Human\n6      Owen Lars  Tatooine   Human"
  },
  {
    "objectID": "lectures/data-structures.html#big-datasets",
    "href": "lectures/data-structures.html#big-datasets",
    "title": "Data structures in R",
    "section": "Big datasets",
    "text": "Big datasets\nThe slowness of reading in data usually comes from format guessing.\nSupplying known column types can dramatically speed up import:\n\ndf1 &lt;- read.csv(here(\"data/starwars.csv\"))\n\ndf1b &lt;- read.csv(here(\"data/starwars.csv\"),\n                colClasses = c(\"character\", \"factor\", \"factor\", \n                               \"numeric\"))\n\nfread from the data.table package is fast and also flexible:\n\nfread(here(\"data/starwars.csv\"))\n\n                  Name homeworld species age\n 1:     Luke Skywalker  Tatooine   Human  27\n 2:              C-3PO  Tatooine   Human  12\n 3:              R2-D2  Alderaan   Human   8\n 4:        Darth Vader  Tatooine   Human  44\n 5:        Leia Organa  Tatooine   Human  25\n 6:          Owen Lars  Tatooine   Human  32\n 7: Beru Whitesun lars   Stewjon   Human  38\n 8:              R5-D4  Tatooine   Human   7\n 9:  Biggs Darklighter  Kashyyyk Wookiee  65\n10:     Obi-Wan Kenobi  Corellia   Human  68"
  },
  {
    "objectID": "lectures/data-structures.html#exporting-data",
    "href": "lectures/data-structures.html#exporting-data",
    "title": "Data structures in R",
    "section": "Exporting data",
    "text": "Exporting data\nMost import functions have their output counterparts, e.g., write.table, write.csv, write.csv2, fwrite. These are useful for writing out rectangular data for use in other programs.\nAnother under-used way of exporting objects is to use saveRDS, this saves any R object to a file, which then gives you exactly the same object when read into R using readRDS. I use this frequently for intermediate datasets, analysis results stored in a list, and even functions.\nExample\n\nlmfit &lt;- lm(mpg ~ wt, data = mtcars)\nlmfit\n\n\nCall:\nlm(formula = mpg ~ wt, data = mtcars)\n\nCoefficients:\n(Intercept)           wt  \n     37.285       -5.344  \n\nsaveRDS(lmfit, file = \"reg-ex.rds\")\n\nreadRDS(\"reg-ex.rds\")\n\n\nCall:\nlm(formula = mpg ~ wt, data = mtcars)\n\nCoefficients:\n(Intercept)           wt  \n     37.285       -5.344"
  },
  {
    "objectID": "lectures/data-structures.html#practical",
    "href": "lectures/data-structures.html#practical",
    "title": "Data structures in R",
    "section": "Practical",
    "text": "Practical\n\nPractice working with vectors and matrices\nThing about ways to organize data and output into data structures\nCompare and contrast the base R, data.table, and tibble packages for working with data.\n\nLink to lesson\nLink home"
  },
  {
    "objectID": "lectures/dataviz.html#graphics-principles",
    "href": "lectures/dataviz.html#graphics-principles",
    "title": "Data visualization",
    "section": "Graphics principles",
    "text": "Graphics principles\n\nEncode quantitative data as linear lengths or distances. They are easier and more accurate to interpret than angles, area, volume, or color.\nPlace things that are meant to be compared next to each other.\nShow the raw data or some display of uncertainty rather than only summary statistics.\nRemove extraneous information, don’t waste ink. Also don’t waste paper with empty space.\nBe aware that 5 - 10% of the population is color blind, so choose appropriate color schemes.\n\nDeciding what to plot is often more difficult than making the plot itself"
  },
  {
    "objectID": "lectures/dataviz.html#graphics-in-r",
    "href": "lectures/dataviz.html#graphics-in-r",
    "title": "Data visualization",
    "section": "Graphics in R",
    "text": "Graphics in R\nR has 2 systems for graphics generation:\n\nbase graphics\n\n“Just” draws things\nFigures are created by overlaying drawings in one or more steps\nIncludes functions for “standard” statistical graphics\n\nThe grid system\n\nA low-level graphics system to create and arrange graphical output\nggplot2 and lattice are built on top of grid\nggplot2 uses a coherent grammar to describe figures, and gets grid to do the drawing"
  },
  {
    "objectID": "lectures/dataviz.html#base-graphics-basics",
    "href": "lectures/dataviz.html#base-graphics-basics",
    "title": "Data visualization",
    "section": "base graphics basics",
    "text": "base graphics basics\n\nThe primitive types are points, lines, polygons, text, and raster images (aka bitmaps)\n\nThese are the basic drawing tools that are combined to create a figure\n\nGraphical parameters are all documented in par. These include things like point shape, line type, color, margins, font, etc.\n\n\npar(mar=rep(0.5, 4))  # small plot margins (bottom, left, top, right)\nplot.new()  # start a new plot\nplot.window(c(0, 6), c(0, 2), asp=1)  # x range: 0–6, y: 0–2; proportional\nx &lt;- c(0, 0, NA, 1, 2, 3, 4, 4, 5,    6)\ny &lt;- c(0, 2, NA, 2, 1, 2, 2, 1, 0.25, 0)\npoints(x[-(1:6)], y[-(1:6)])  # symbols\nlines(x, y)   # line segments\ntext(c(0, 6), c(0, 2), c(\"(0, 0)\", \"(6, 2)\"), col=\"red\")  # two text labels\nrasterImage(\n    matrix(c(1, 0,  # 2x3 pixel \"image\"; 0=black, 1=white\n             0, 1,\n             0, 0), byrow=TRUE, ncol=2),\n    5, 0.5, 6, 2,  # position: xleft, ybottom, xright, ytop\n    interpolate=FALSE\n)\npolygon(\n    c(4, 5, 5.5,    4),  # x coordinates of the vertices\n    c(0, 0,   1, 0.75),  # y coordinates\n    lty=\"dotted\",   # border style\n    col=\"#ffff0044\"  # fill colour: semi-transparent yellow\n)"
  },
  {
    "objectID": "lectures/dataviz.html#colors",
    "href": "lectures/dataviz.html#colors",
    "title": "Data visualization",
    "section": "Colors",
    "text": "Colors\nYou can refer to colors in several ways:\n\nby name, e.g., \"red\", see colors()\nby hex code: \"#dd3333\"\nby specifying them in a color space with one of the functions: rgb, hsv, hcl.\n\nMore often, you want to choose a good color palette .\nIn base graphics, the palette() function is used to view and modify the current color palette.\nThe default is both ugly, and can be poorly perceived when data are mapped to color values."
  },
  {
    "objectID": "lectures/dataviz.html#choosing-a-palette",
    "href": "lectures/dataviz.html#choosing-a-palette",
    "title": "Data visualization",
    "section": "Choosing a palette",
    "text": "Choosing a palette\nUse the colorspace package to find a good palette to meet your needs. It uses the Hue Chroma Luminance colorspace\n\nlibrary(colorspace)\nswatchplot(\n  \"Hue\"       = sequential_hcl(5, h = c(0, 300), c = c(60, 60), l = 65),\n  \"Chroma\"    = sequential_hcl(5, h = 0, c = c(100, 0), l = 65, rev = TRUE, power = 1),\n  \"Luminance\" = sequential_hcl(5, h = 260, c = c(25, 25), l = c(25, 90), rev = TRUE, power = 1),\n  off = 0\n)\n\n\n\n\nYou can also use it to simulate color blindness\n\nlibrary(palmerpenguins)\npar(mfrow = c(1, 2))\npalette(\"R3\")\nplot(bill_length_mm ~ body_mass_g, \n     col = island, data = penguins, pch = 20, \n     main = \"Default palette\")\nlegend(\"bottomright\", fill= palette(), legend = levels(penguins$island))\npalette(deutan(palette()))\nplot(bill_length_mm ~ body_mass_g, \n     col = island, data = penguins, pch = 20, \n     main = \"Deuteranope\")\nlegend(\"bottomright\", fill= palette(), legend = levels(penguins$island))"
  },
  {
    "objectID": "lectures/dataviz.html#ggplot2",
    "href": "lectures/dataviz.html#ggplot2",
    "title": "Data visualization",
    "section": "ggplot2",
    "text": "ggplot2\nGG stands for “Grammar of Graphics”, and this is actually the 2nd iteration of the package. Hadley Wickham started from scratch in 2005 with ggplot2, abandoning the original ggplot1\nGrammar of Graphics\nIntroduced in the eponymous book by Leland Wilkinson, Hadley adapted a bit\nHadley Wickham. A layered grammar of graphics. Journal of Computational and Graphical Statistics, vol. 19, no. 1, pp. 3–28, 2010.\n\nThe main idea is to concisely describe a graphic using a set of fundamental rules and concepts\nIn the background, this also facilitates the creation of the graphic by the software\n\nThe building blocks:\n\nData and aesthetic mappings (ggplot(data, aes(x = x, y = y)))\nGeometric objects (e.g., geom_point())\nStatistical transformations (e.g., stat_smooth())\nScales\nFacets\nCoordinate systems\n\nWith ggplot2, we describe the building blocks, and combine them to construct a graphic"
  },
  {
    "objectID": "lectures/dataviz.html#ggplot2-basics",
    "href": "lectures/dataviz.html#ggplot2-basics",
    "title": "Data visualization",
    "section": "ggplot2 basics",
    "text": "ggplot2 basics\n\nStart with the data, tidy data\n\n\nlibrary(ggplot2)\n\nhead(penguins)\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\nSpecify aesthetic mappings, i.e., how variables in the data are associated to visual elements (e.g., x position, y position, color, size, transparency, …)\n\n\nstep1 &lt;- ggplot(penguins, \n                aes(x = body_mass_g, y = bill_length_mm, color = species))\nstep1\n\n\n\n\n\nAdd geometric elements\n\n\nstep2 &lt;- step1 + geom_point()\nstep2\n\n\n\n\n\nAdjust the scales\n\n\nplot1 &lt;- step2 + scale_color_brewer(\"Species\", type = \"qual\")\nplot1"
  },
  {
    "objectID": "lectures/dataviz.html#notes-and-details",
    "href": "lectures/dataviz.html#notes-and-details",
    "title": "Data visualization",
    "section": "Notes and details",
    "text": "Notes and details\n\nLayers/components of the plot are distinct functions\nLayers are combined with the +\nThe plot can be saved as an object (what class?)\nThe plot is displayed/rendered when printed\n\nHow does the adding of layers work?\n\npgeom &lt;- geom_point()\nclass(pgeom)\n\n[1] \"LayerInstance\" \"Layer\"         \"ggproto\"       \"gg\"           \n\nclass(step1)\n\n[1] \"gg\"     \"ggplot\"\n\nggplot2:::`+.gg`\n\nfunction (e1, e2) \n{\n    if (missing(e2)) {\n        cli::cli_abort(c(\"Cannot use {.code +} with a single argument\", \n            i = \"Did you accidentally put {.code +} on a new line?\"))\n    }\n    e2name &lt;- deparse(substitute(e2))\n    if (is.theme(e1)) \n        add_theme(e1, e2, e2name)\n    else if (is.ggplot(e1)) \n        add_ggplot(e1, e2, e2name)\n    else if (is.ggproto(e1)) {\n        cli::cli_abort(c(\"Cannot add {.cls ggproto} objects together\", \n            i = \"Did you forget to add this object to a {.cls ggplot} object?\"))\n    }\n}\n&lt;bytecode: 0x560bee65ca38&gt;\n&lt;environment: namespace:ggplot2&gt;"
  },
  {
    "objectID": "lectures/dataviz.html#more-complex-plots",
    "href": "lectures/dataviz.html#more-complex-plots",
    "title": "Data visualization",
    "section": "More complex plots",
    "text": "More complex plots\nJust keep adding layers:\n\nplot1 + stat_smooth(method = \"lm\")\n\n\n\n\n\nplot1 + stat_smooth(method = \"lm\") + \n  facet_grid(sex ~ year)\n\n\n\n\n\nplot2 &lt;- plot1 + stat_smooth(method = \"lm\") + \n  facet_grid(sex ~ year) + \n  ggtitle(\"A nice figure\", subtitle = \"made by ggplot2\")\nplot2"
  },
  {
    "objectID": "lectures/dataviz.html#changing-how-things-look",
    "href": "lectures/dataviz.html#changing-how-things-look",
    "title": "Data visualization",
    "section": "Changing how things look",
    "text": "Changing how things look\n\nChange titles and axis labels with ggtitle(), xlab(), ylab(), limits with xlim(), ylim()\nThemes can be adjusted with theme(), changing the appearance of plot elements. The elements are all documented fairly well. There are some nice built-in themes like theme_bw(). Save your theme as an object for reuse.\nAnnotations can be added with annotate(), but that does not play nicely with facets. Instead use geom_text()\n\n\nmytheme &lt;- theme(strip.background = element_rect(fill = \"steelblue\"), \n        text = element_text(family = \"Comic sans\"), \n        plot.background = element_rect(fill = \"grey81\"), \n        legend.background = element_rect(fill = NA), \n        legend.position = \"bottom\") \n\nplot2b &lt;- plot2 + mytheme + \n  geom_text(data = data.frame(body_mass_g = 3000, \n                              bill_length_mm = 55, \n                              year = 2009, sex = NA,\n                              label = \"Some missing data here\"), \n            aes(label = label, color = NULL), \n            hjust = 0)\nplot2b"
  },
  {
    "objectID": "lectures/dataviz.html#tidy-data-is-key",
    "href": "lectures/dataviz.html#tidy-data-is-key",
    "title": "Data visualization",
    "section": "Tidy data is key",
    "text": "Tidy data is key\nMost plotting problems are actually data problems.\nSet up the thing you want to add to the plot in a tidy data frame. Then add the geometric element with the mappings.\n\nplot2 +  \n  geom_text(data = data.frame(body_mass_g = 3000, \n                              bill_length_mm = 55, \n                              year = 2009, sex = NA,\n                              label = \"Some missing data here\"), \n            aes(label = label, color = NULL), \n            hjust = 0)\n\n\n\n\nAnother example\n\nplot3 &lt;- ggplot(penguins, aes(x = species, y = body_mass_g)) + geom_jitter()\nplot3"
  },
  {
    "objectID": "lectures/dataviz.html#reordering-things",
    "href": "lectures/dataviz.html#reordering-things",
    "title": "Data visualization",
    "section": "Reordering things",
    "text": "Reordering things\nAgain, this is a data problem. The order is determined by the levels of the factor\n\nclass(penguins$species)\n\n[1] \"factor\"\n\nlevels(as.factor(penguins$species))\n\n[1] \"Adelie\"    \"Chinstrap\" \"Gentoo\"   \n\n\nWhen R converts a character to a factor, and by default the levels are determined by alphabetical order. Change the order using factor() or reorder()\n\npenguins$species2 &lt;- factor(penguins$species, \n                            levels = c(\"Chinstrap\", \"Gentoo\", \"Adelie\"))\n\nggplot(penguins, aes(x = species2, y = body_mass_g)) + geom_jitter()\n\n\n\npenguins$species2 &lt;- reorder(penguins$species2, \n                             penguins$body_mass_g, \n                             mean, na.rm = TRUE)\nggplot(penguins, aes(x = species2, y = body_mass_g)) + geom_jitter()"
  },
  {
    "objectID": "lectures/dataviz.html#challengeexercise",
    "href": "lectures/dataviz.html#challengeexercise",
    "title": "Data visualization",
    "section": "Challenge/exercise",
    "text": "Challenge/exercise\nAdd solid horizontal lines at the mean and dashed horizontal lines at 95% confidence intervals for the mean"
  },
  {
    "objectID": "lectures/dataviz.html#solution",
    "href": "lectures/dataviz.html#solution",
    "title": "Data visualization",
    "section": "Solution",
    "text": "Solution\nStep 1: assemble the data\n\nmeans_and_cis &lt;- split(penguins$body_mass_g, penguins$species) |&gt; \n  lapply(\\(bm) {\n    ttestbm &lt;- t.test(bm)\n    data.frame(mean = ttestbm[[\"estimate\"]], \n               lower = ttestbm[[\"conf.int\"]][1], \n               upper = ttestbm[[\"conf.int\"]][2])\n  })\n\nmcidf &lt;- do.call(\"rbind.data.frame\", means_and_cis)\nmcidf$species &lt;- as.factor(names(means_and_cis))\n\n## get the x position with a .45 unit buffer\n\nmcidf$xmin &lt;- as.numeric(mcidf$species) - .45\nmcidf$xmax &lt;- as.numeric(mcidf$species) + .45\n\nStep 2: add to the plot using the desired geometric elements\n\nplot3 + geom_linerange(data = mcidf, aes(xmin = xmin, \n                                     xmax = xmax, \n                                     y = mean, \n                                     color = species), linewidth = 1) + \n  geom_linerange(data = mcidf, aes(xmin = xmin, \n                                     xmax = xmax,\n                                   y = lower, color = species), linetype = 2) + \n  geom_linerange(data = mcidf, aes(xmin = xmin, \n                                     xmax = xmax,\n                                   y = upper, color = species), linetype = 2)"
  },
  {
    "objectID": "lectures/dataviz.html#creating-reusable-elements",
    "href": "lectures/dataviz.html#creating-reusable-elements",
    "title": "Data visualization",
    "section": "Creating reusable elements",
    "text": "Creating reusable elements\nLet’s make a function that adds the mean and confidence interval\n\nggmean_ci &lt;- function(data, yname, groupname, buffer = .45) {\n  \n  means_and_cis &lt;- split(data[[yname]], data[[groupname]]) |&gt; \n  lapply(\\(bm) {\n    ttestbm &lt;- t.test(bm)\n    data.frame(mean = ttestbm[[\"estimate\"]], \n               lower = ttestbm[[\"conf.int\"]][1], \n               upper = ttestbm[[\"conf.int\"]][2])\n  })\n\n  mcidf &lt;- do.call(\"rbind.data.frame\", means_and_cis)\n  mcidf[[groupname]] &lt;- as.factor(names(means_and_cis))\n\n## get the x position with a buffer\n\n  mcidf$xmin &lt;- as.numeric(mcidf[[groupname]]) - buffer\n  mcidf$xmax &lt;- as.numeric(mcidf[[groupname]]) + buffer\n  \n  list(\n  geom_linerange(data = mcidf, aes(xmin = xmin, \n                                   xmax = xmax, \n                                   y = mean, \n                                   color = .data[[groupname]]), linewidth = 1),\n  geom_linerange(data = mcidf, aes(xmin = xmin, \n                                     xmax = xmax,\n                                   y = lower, color = .data[[groupname]]), linetype = 2),\n  geom_linerange(data = mcidf, aes(xmin = xmin, \n                                     xmax = xmax,\n                                   y = upper, color = .data[[groupname]]), linetype = 2) \n  )\n\n}\n\n\nplot3 + ggmean_ci(penguins, \"body_mass_g\", \"species\")\n\n\n\nggplot(penguins |&gt; subset(!is.na(sex)), aes(x = sex, y = bill_length_mm)) + \n  geom_jitter() + \n  ggmean_ci(penguins, \"bill_length_mm\", \"sex\")"
  },
  {
    "objectID": "lectures/dataviz.html#using-ggplot2-in-functions",
    "href": "lectures/dataviz.html#using-ggplot2-in-functions",
    "title": "Data visualization",
    "section": "Using ggplot2 in functions",
    "text": "Using ggplot2 in functions\n\nNote the use of .data[[[groupname]]. This says to use the layer data and not some other global object.\nLayers cannot be added by themselves without a call to ggplot(). This is why we return the elements in list. Themes are an exception to this.\n\nIf you want a function that takes a name or expression as a variable (instead of a string), you can do the following:\n\nggboxplot &lt;- function(data, yvar, xvar) {\n  \n  ggplot(data, aes(x = {{ xvar }}, y = {{ yvar }})) + \n    geom_jitter() + \n    geom_boxplot(fill = NA)\n  \n}\n\nggboxplot(penguins |&gt; subset(!is.na(sex)), bill_length_mm, sex)\n\n\n\nggboxplot(penguins |&gt; subset(!is.na(sex)), sqrt(bill_length_mm), sex)"
  },
  {
    "objectID": "lectures/dataviz.html#combining-figures",
    "href": "lectures/dataviz.html#combining-figures",
    "title": "Data visualization",
    "section": "Combining figures",
    "text": "Combining figures\nUse the patchwork package\n\nlibrary(patchwork)\n\n(plot1 + plot3) / plot2\n\n\n\n\nThere are many options for layouts and adding different elements"
  },
  {
    "objectID": "lectures/dataviz.html#interactive-graphics",
    "href": "lectures/dataviz.html#interactive-graphics",
    "title": "Data visualization",
    "section": "Interactive graphics",
    "text": "Interactive graphics\nWhy\n\nAnimation/interactivity should only be used when it enhances understanding, condenses information, makes something more accessible\nSometimes it is only distracting\n\nWhat\nInteresting applications:\n\nSummarizing complex data/results of analysis\nIllustrating statistical concepts for education\nLet readers play the what-if? game\n\nHow\n\nOne easy tool is the plotly package"
  },
  {
    "objectID": "lectures/dataviz.html#example",
    "href": "lectures/dataviz.html#example",
    "title": "Data visualization",
    "section": "Example",
    "text": "Example\n\nlibrary(plotly)\n\nggplotly(plot1 + facet_wrap(~ year))"
  },
  {
    "objectID": "lectures/dataviz.html#summary",
    "href": "lectures/dataviz.html#summary",
    "title": "Data visualization",
    "section": "Summary",
    "text": "Summary\n\nRemember tidy data\n\nKeep data defining groups you want to compare (colors, facets) as variables\nDistinct geometric elements can be separated into different columns or different datasets\n\nChoose good color scales\n\ncolorspace is a great resource for this\nqualitative (discrete data), sequential and diverging (continuous data)\n\nSave images at the correct size and format\nCreate reusable elements\n\nFunctions for special types of plots\nThemes and groups of geoms as lists\n\nDefine your own Stats and Geoms\n\nSee “Extending ggplot2” vignette"
  },
  {
    "objectID": "lectures/dataviz.html#practical",
    "href": "lectures/dataviz.html#practical",
    "title": "Data visualization",
    "section": "Practical",
    "text": "Practical\nLink to lesson\nLink home"
  },
  {
    "objectID": "lectures/dates-and-strings.html#special-characters",
    "href": "lectures/dates-and-strings.html#special-characters",
    "title": "Strings and dates",
    "section": "Special characters",
    "text": "Special characters\n\nStrings are enclosed in single or double quotes\n“\\” is treated as an “escape character” in strings, meaning whatever comes after it is treated as special, e.g., “\\n” for newline, “\\t” for tab\nTo get quotes inside quotes, you can\n\nmix single and double: \"'Woof', he barked\"\nescape with backslash: \"\\\"Woof\\\", he barked\"\n\nTo get a backslash, you need to escape the backslash: \"\\\\\""
  },
  {
    "objectID": "lectures/dates-and-strings.html#combining-strings",
    "href": "lectures/dates-and-strings.html#combining-strings",
    "title": "Strings and dates",
    "section": "Combining strings",
    "text": "Combining strings\nYou know about paste and paste0. I like to use sprintf(&lt;format&gt;, ...)\nThe format contains special characters starting with “%” to determine how the character should look, and data passed to the ... gets inserted into the format:\n\nlibrary(palmerpenguins)\nsprintf(\"mean and sd of %s: %.2f (%.2f)\", \"bill depth (mm)\", \n        mean(penguins$bill_depth_mm, na.rm = TRUE), \n        sd(penguins$bill_depth_mm, na.rm = TRUE))\n\n[1] \"mean and sd of bill depth (mm): 17.15 (1.97)\"\n\n\n“%s” means string, “%.2f” means a float with 2 digits after the decimal\nUse “%%” to get a literal percent\n\nsprintf(\"n and percent male: %.0f (%.1f%%)\", \n        sum(penguins$sex == \"male\", na.rm = TRUE), \n        100 * sum(penguins$sex == \"male\", na.rm = TRUE) / nrow(penguins) )\n\n[1] \"n and percent male: 168 (48.8%)\"\n\n\nSee also the glue package for a different way to do this."
  },
  {
    "objectID": "lectures/dates-and-strings.html#register-example",
    "href": "lectures/dates-and-strings.html#register-example",
    "title": "Strings and dates",
    "section": "Register example",
    "text": "Register example\n“… any diagnosis of either D150, D152, or D159 before the date 1 January 2010”\n\nlpr$diag[lpr$date &lt;= as.Date(\"2010-01-01\")] %in% \n  c(\"D150\", \"D152\", \"D159\")\n\n\nWe can save typing by being clever matching the codes (e.g., “starts with D15”)\nDates and times are tricky, though this example is unambiguous"
  },
  {
    "objectID": "lectures/dates-and-strings.html#character-matching",
    "href": "lectures/dates-and-strings.html#character-matching",
    "title": "Strings and dates",
    "section": "Character matching",
    "text": "Character matching\nRegular expressions are abstract patterns of characters that describe a text sequence\nYou can use them with grep and related functions in base R. Also see the stringr package.\nExample “starts with”\n\ngrepl(pattern= \"^D15\", \n      c(\"D150\", \"D152\", \"D159\", \n        \"A250\", \"Z149\"))\n\n[1]  TRUE  TRUE  TRUE FALSE FALSE"
  },
  {
    "objectID": "lectures/dates-and-strings.html#regexp-operators",
    "href": "lectures/dates-and-strings.html#regexp-operators",
    "title": "Strings and dates",
    "section": "Regexp operators",
    "text": "Regexp operators\nCertain characters in regexps have special meaning\n\n^: starts with\n$: ends with\n|: or\n*: 0 or more times\n+: 1 or more times\n{n}: n times\n(...): sub-expression\n[...]: character classes\n\nexamples\n\n\"^[A-Z][0-9]{3}$\" ## match all ICD codes\n\"^D15[029]$\" ## our codes of interest"
  },
  {
    "objectID": "lectures/dates-and-strings.html#get-help",
    "href": "lectures/dates-and-strings.html#get-help",
    "title": "Strings and dates",
    "section": "Get help",
    "text": "Get help\nRegexps can be very complex, but for simple patterns they can save you time\nWrite and double-check your pattern:\n\nThe cheatsheet on strings and regular expressions\nR 4 Data Science, chapter on regular expressions\nhttps://regex101.com/"
  },
  {
    "objectID": "lectures/dates-and-strings.html#some-faulty-assumptions-about-dates-and-times",
    "href": "lectures/dates-and-strings.html#some-faulty-assumptions-about-dates-and-times",
    "title": "Strings and dates",
    "section": "Some faulty assumptions about dates and times",
    "text": "Some faulty assumptions about dates and times\n\nAll days have 24 hours\nAll years have 365 days (ok not an assumption, but which ones?)\nDates are always written “day - month - year”"
  },
  {
    "objectID": "lectures/dates-and-strings.html#use-lubridate",
    "href": "lectures/dates-and-strings.html#use-lubridate",
    "title": "Strings and dates",
    "section": "Use lubridate",
    "text": "Use lubridate\nlubridate will solve most of these problems:\n\nImporting dates from character strings\nPrinting dates in a nice format\nComputing time intervals"
  },
  {
    "objectID": "lectures/dates-and-strings.html#register-example-1",
    "href": "lectures/dates-and-strings.html#register-example-1",
    "title": "Strings and dates",
    "section": "Register example",
    "text": "Register example\n\nas.Date(\"2010-01-01\")\n\n[1] \"2010-01-01\"\n\nas.Date(\"2010-05-10\") ## ambiguous!\n\n[1] \"2010-05-10\"\n\nlibrary(lubridate)\n\nymd(\"2010-05-10\")\n\n[1] \"2010-05-10\"\n\nymd(\"2010-05-10\") - ymd(\"2010-01-01\")\n\nTime difference of 129 days\n\nas.numeric(ymd(\"2010-05-10\") - ymd(\"2010-01-01\"))\n\n[1] 129"
  },
  {
    "objectID": "lectures/dates-and-strings.html#practical",
    "href": "lectures/dates-and-strings.html#practical",
    "title": "Strings and dates",
    "section": "Practical",
    "text": "Practical\nWe will continue using the register data example to practice merging and defining new variables based on dates and strings.\nLink to lesson\nLink home"
  },
  {
    "objectID": "lectures/dynamic-documents.html#code-and-prose",
    "href": "lectures/dynamic-documents.html#code-and-prose",
    "title": "Dynamic Documents",
    "section": "Code and prose",
    "text": "Code and prose\nA “literate document” or “dynamic document” is a file that contains code and prose\nThe idea was developed by Donald Knuth in the 1980s; his motivation was to use it for software development, but allowing programmers to “concentrate … on explaining to humans what we want the computer to do”.\nWhen the document is rendered the code also gets run, from top to bottom in the order it appears in the document, and the results inserted dynamically into the output document"
  },
  {
    "objectID": "lectures/dynamic-documents.html#how-does-it-work",
    "href": "lectures/dynamic-documents.html#how-does-it-work",
    "title": "Dynamic Documents",
    "section": "How does it work?",
    "text": "How does it work?\nIn an rmarkdown (.Rmd) or Quarto (.qmd) document, at the top you have the yaml header, with key: value pairs listed inside a start and end fence (“---”). These key: value pairs contain information about the document and control how it is rendered.\nProse is written in markdown. This is a lightweight markup language (headers, bold, italics, links, figures, tables).\nCode is inserted in between start and end fences (“```”), called chunks. Options controlling how the code is run and output can be added to each chunk."
  },
  {
    "objectID": "lectures/dynamic-documents.html#markdown",
    "href": "lectures/dynamic-documents.html#markdown",
    "title": "Dynamic Documents",
    "section": "Markdown",
    "text": "Markdown\n\n---\ntitle: Example yaml header\nauthor: Homer J Simpson\nformat: html\n---\n\n# First level header\n## Second level \n### etc\n\n*italics* for emphasis, **bold** for highlighting\n\n- Lists\n- can \n- also\n    + be \n    + nested\n\n1. Or enumerated\n2. B\n3. C\n\n![alt text](path-to-image.png)\n\n[text](link.html)\n\nEquations:\n\n$$\nT = \\frac{\\overline{X} - \\mu_0}{\\hat{\\sigma}/\\sqrt{n}}\n$$"
  },
  {
    "objectID": "lectures/dynamic-documents.html#code-chunks",
    "href": "lectures/dynamic-documents.html#code-chunks",
    "title": "Dynamic Documents",
    "section": "Code chunks",
    "text": "Code chunks\nLook like this, and the output is below\n\n```{r}\nrnorm(1)\n```\n\n[1] -0.05724066\n\n\nIn quarto, chunk options are inside the fence after #|, e.g., #| echo: fenced, each on their own line\nIn rmarkdown, chunk options are inside the brackets (this is compatible with quarto for now)\nYou can also have code inline:\n\nFor example this `r rnorm(1)` will show up inline\n\nwhich will put the output 0.2182762 without showing the code."
  },
  {
    "objectID": "lectures/dynamic-documents.html#rendering",
    "href": "lectures/dynamic-documents.html#rendering",
    "title": "Dynamic Documents",
    "section": "Rendering",
    "text": "Rendering\n\nThe code chunks will be run sequentially in the same, fresh R session (remember when I said restart R frequently when developing)\nThe code and output will be inserted into an intermediate document, as directed by the code chunk options\nThat document is then processed by pandoc which turns it into a format designed for human readability, as directed by the document yaml header\n\nhtml web pages\npdf documents (requires Latex)\nword documents\nhtml presentations (like this one)\n…"
  },
  {
    "objectID": "lectures/dynamic-documents.html#presentations",
    "href": "lectures/dynamic-documents.html#presentations",
    "title": "Dynamic Documents",
    "section": "Presentations",
    "text": "Presentations\nI like to use format: revealjs\nA new slide starts with a level-1 (#) or -2 (##) heading, followed by a title. Then you can include anything, lists, code, output, etc:\n\n## This is a slide title\n\nHere is the _slide content_ \n\n\n## This starts a new slide\n\n- More \n- ... content\n\n# This is a new section"
  },
  {
    "objectID": "lectures/dynamic-documents.html#getting-output-to-look-nice",
    "href": "lectures/dynamic-documents.html#getting-output-to-look-nice",
    "title": "Dynamic Documents",
    "section": "Getting output to look nice",
    "text": "Getting output to look nice\nTools of the trade\n\nFigures are straightforward, can use captions and cross-references\nFor inline output, you can write custom print methods, which we will try later\nTables are the hardest, there are some packages that help\n\nknitr and the function kable, also the package kableExtra\nxtable (designed for pdf output)\ngtsummary"
  },
  {
    "objectID": "lectures/dynamic-documents.html#customizing-rendering",
    "href": "lectures/dynamic-documents.html#customizing-rendering",
    "title": "Dynamic Documents",
    "section": "Customizing rendering",
    "text": "Customizing rendering\n\nBibliographies and cross references fully supported\nWith Quarto, layout and style can be controlled with commands inside ::: fences\nhtml output: further tweaks with custom CSS\nPDF output: Latex and related commands\nword documents: template files? and some html is supported"
  },
  {
    "objectID": "lectures/dynamic-documents.html#table-example",
    "href": "lectures/dynamic-documents.html#table-example",
    "title": "Dynamic Documents",
    "section": "Table example",
    "text": "Table example\nThis function outputs the data in a markdown table, which is then interpreted and rendered nicely when the intermediate document is processed by pandoc\n\nknitr::kable(head(palmerpenguins::penguins))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\nAdelie\nTorgersen\n39.1\n18.7\n181\n3750\nmale\n2007\n\n\nAdelie\nTorgersen\n39.5\n17.4\n186\n3800\nfemale\n2007\n\n\nAdelie\nTorgersen\n40.3\n18.0\n195\n3250\nfemale\n2007\n\n\nAdelie\nTorgersen\nNA\nNA\nNA\nNA\nNA\n2007\n\n\nAdelie\nTorgersen\n36.7\n19.3\n193\n3450\nfemale\n2007\n\n\nAdelie\nTorgersen\n39.3\n20.6\n190\n3650\nmale\n2007"
  },
  {
    "objectID": "lectures/dynamic-documents.html#endless-possibilities",
    "href": "lectures/dynamic-documents.html#endless-possibilities",
    "title": "Dynamic Documents",
    "section": "Endless possibilities",
    "text": "Endless possibilities\n\nIn theory, in your paper/presentation, every number and figure that is a result of your analysis can be generated from code\nEasy to update if the data change\nCan inspect the source document to determine where the number came from\nIn practice, do the best you can, and sometimes a well-documented “business process” is just as good\nContent comes first – the default “look” and layout is good enough for most applications, but you can also endless tweak that to suit your need"
  },
  {
    "objectID": "lectures/dynamic-documents.html#practical",
    "href": "lectures/dynamic-documents.html#practical",
    "title": "Dynamic Documents",
    "section": "Practical",
    "text": "Practical\nWe will briefly try out rmarkdown or quarto so that you are set up for the exam.\nLink to lesson\nLink home"
  },
  {
    "objectID": "lectures/flow-and-loops.html#what",
    "href": "lectures/flow-and-loops.html#what",
    "title": "Flow control and loops",
    "section": "What?",
    "text": "What?\n\nNormally the code gets run line by line, in order, top to bottom\nThere are special commands that allow you change that\nConditional execution, choose which code to run depending on logical conditions\n\nif(&lt;condition&gt;)\nelse if\nelse\n\nLoops, repeat a chunk of code several times\n\nrepeat\nfor\nwhile"
  },
  {
    "objectID": "lectures/flow-and-loops.html#if-then-else",
    "href": "lectures/flow-and-loops.html#if-then-else",
    "title": "Flow control and loops",
    "section": "If then else",
    "text": "If then else\n\nif(&lt;condition&gt;) {\n  \n  &lt;do something&gt;\n    \n} else {\n  \n  &lt;do something else&gt;\n  \n}\n\nIf the &lt;condition&gt; evaluates to TRUE, then something gets executed, otherwise something else gets executed.\n&lt;condition&gt; must be length one. No vectors allowed."
  },
  {
    "objectID": "lectures/flow-and-loops.html#examples",
    "href": "lectures/flow-and-loops.html#examples",
    "title": "Flow control and loops",
    "section": "Examples",
    "text": "Examples\n\nnum_reps &lt;- if(final_report) 5000 else 200\n\nbrackets are helpful for understanding and clarity\n\np_value &lt;- if(nonparametric) {\n  wilcox.test(mpg ~ vs, data = mtcars, exact = FALSE)$p.value\n} else {\n  t.test(mpg ~ vs, data = mtcars)$p.value\n}\n\nThere does not need to be anything returned from the expression\n\nif(log_transform) {\n  \n  data$Y &lt;- log(data$Y)\n  \n}"
  },
  {
    "objectID": "lectures/flow-and-loops.html#ifelse",
    "href": "lectures/flow-and-loops.html#ifelse",
    "title": "Flow control and loops",
    "section": "ifelse",
    "text": "ifelse\nThis is a function, not a statement like if and else.\nIt is vectorized and hence better suited for working with data.\nifelse(&lt;logical vector&gt;, &lt;yes vector&gt;, &lt;no vector&gt;). All three vectors should be the same length or recycling happens.\nIt returns a vector with elements from yes when TRUE, and elements from no when FALSE.\n\nrawdata &lt;- c(\"12.63\", \"62.45\", \"&lt;2\") ## lower limit of detection\nas.numeric(ifelse(rawdata == \"&lt;2\", 1, rawdata))\n\n[1] 12.63 62.45  1.00"
  },
  {
    "objectID": "lectures/flow-and-loops.html#basic-concepts",
    "href": "lectures/flow-and-loops.html#basic-concepts",
    "title": "Flow control and loops",
    "section": "Basic concepts",
    "text": "Basic concepts\nA loop repeatedly and sequentially evaluates an expression, i.e.,\n\n{\n  &lt;stuff contained inside curly brackets&gt;\n}\n\nA loop will continue forever unless you tell it to stop. You tell it to stop in different ways for different loop expressions"
  },
  {
    "objectID": "lectures/flow-and-loops.html#repeat",
    "href": "lectures/flow-and-loops.html#repeat",
    "title": "Flow control and loops",
    "section": "Repeat",
    "text": "Repeat\nThis is the simplest of loops, it will repeat an expression until it encounters break\nThis will run forever\n\nrepeat {\n  print(\"hello\")\n}\n\nThis will run exactly once\n\nrepeat {\n  print(\"hello\")\n  break\n}\n\nThis will run 5 times\n\ni &lt;- 1\nrepeat {\n  print(\"hello\")\n  if(i == 5) break\n  i &lt;- i + 1\n}"
  },
  {
    "objectID": "lectures/flow-and-loops.html#while",
    "href": "lectures/flow-and-loops.html#while",
    "title": "Flow control and loops",
    "section": "While",
    "text": "While\nNotice the pattern, repeat an expression until a condition is met.\nThe condition usually depends on a variable that changes at each iteration, in this case i, the iterator\nwhile loops explicitly state the condition at the start:\n\ni &lt;- 1\nwhile(i &lt;= 5) {\n  print(\"hello\")\n  i &lt;- i + 1\n}\n\n[1] \"hello\"\n[1] \"hello\"\n[1] \"hello\"\n[1] \"hello\"\n[1] \"hello\""
  },
  {
    "objectID": "lectures/flow-and-loops.html#for-loops",
    "href": "lectures/flow-and-loops.html#for-loops",
    "title": "Flow control and loops",
    "section": "For loops",
    "text": "For loops\nA for loop explicitly states the sequence of the iterator at the start. Then the “end condition” is that the loop has reached the end of the sequence.\n\nfor(i in 1:5) {\n  print(\"hello\")\n}\n\n[1] \"hello\"\n[1] \"hello\"\n[1] \"hello\"\n[1] \"hello\"\n[1] \"hello\"\n\n\nIn this case, it is the most concise. I personally use for loops more than any other loop.\nbreak can be used inside any loop to end it. next can be used to go to the next iteration.\n\nfor(i in 1:5) {\n  if(i == 2) next\n  print(paste(\"hello\", i))\n}\n\n[1] \"hello 1\"\n[1] \"hello 3\"\n[1] \"hello 4\"\n[1] \"hello 5\""
  },
  {
    "objectID": "lectures/flow-and-loops.html#example---iterating-through-species",
    "href": "lectures/flow-and-loops.html#example---iterating-through-species",
    "title": "Flow control and loops",
    "section": "Example - Iterating through species",
    "text": "Example - Iterating through species\n\nlibrary(palmerpenguins)\n\nspecies_names &lt;- levels(penguins$species)\nmean_bill_length &lt;- numeric(length(species_names))\nnames(mean_bill_length) &lt;- species_names\n\nfor(i in species_names){  ## iterator is a character\n  \n  mean_bill_length[i] &lt;- ## indexing by name\n    mean(subset(penguins, species == i)$bill_length_mm, na.rm = TRUE)\n  \n}\n\nmean_bill_length\n\n   Adelie Chinstrap    Gentoo \n 38.79139  48.83382  47.50488"
  },
  {
    "objectID": "lectures/flow-and-loops.html#bootstrap",
    "href": "lectures/flow-and-loops.html#bootstrap",
    "title": "Flow control and loops",
    "section": "Bootstrap",
    "text": "Bootstrap\n\nmu.body_mass &lt;- mean(penguins$body_mass_g, na.rm = TRUE)\nbsmeans &lt;- vector(\"numeric\", length = 2000)\nfor(i in 1:length(bsmeans)) {\n  resampled.body_mass &lt;- sample(penguins$body_mass_g, replace = TRUE)\n  bsmeans[i] &lt;- mean(resampled.body_mass, na.rm = TRUE)\n}\nhist(bsmeans)\nabline(v = mu.body_mass, col = \"red\")"
  },
  {
    "objectID": "lectures/flow-and-loops.html#nested-loops",
    "href": "lectures/flow-and-loops.html#nested-loops",
    "title": "Flow control and loops",
    "section": "Nested loops",
    "text": "Nested loops\nA loop can itself contain a loop, or multiple loops.\n\nspecies_names &lt;- levels(penguins$species)\nisland_names &lt;- levels(penguins$island)\nmean_bm_matrix &lt;- matrix(NA, nrow = length(species_names), \n                         ncol = length(island_names), \n                         dimnames = list(species_names, island_names))\n\nfor(i in species_names) {\n  for(j in island_names) {\n   \n    thisset &lt;- subset(penguins, species == i & \n                        island == j)\n    \n    if(nrow(thisset) == 0) next\n    \n    mean_bm_matrix[i, j] &lt;- mean(thisset$body_mass_g, na.rm = TRUE)\n     \n  }\n}\nmean_bm_matrix\n\n            Biscoe    Dream Torgersen\nAdelie    3709.659 3688.393  3706.373\nChinstrap       NA 3733.088        NA\nGentoo    5076.016       NA        NA"
  },
  {
    "objectID": "lectures/flow-and-loops.html#note-on-speed",
    "href": "lectures/flow-and-loops.html#note-on-speed",
    "title": "Flow control and loops",
    "section": "Note on speed",
    "text": "Note on speed\nYou may see people warn you not to use for loops in R, “because they are slow”.\nThat is partially true, but speed is not the only thing, for loops can be much clearer and more understandable than the alternatives.\nBut, the slow thing in R is changing the size of an object, so you can avoid that by creating a vector/matrix/array of the correct size to hold the results of the loop:\n\nsystem.time({\nA1 &lt;- NULL\nfor(i in 1:100000) {\n  A1 &lt;- c(A1, rnorm(1))\n}\n})\n\n   user  system elapsed \n 12.304   0.075  12.393 \n\nsystem.time({\nA2 &lt;- numeric(100000)\nfor(i in 1:length(A2)) {\n  A2[i] &lt;- rnorm(1)\n}\n})\n\n   user  system elapsed \n  0.174   0.004   0.178"
  },
  {
    "objectID": "lectures/flow-and-loops.html#practical",
    "href": "lectures/flow-and-loops.html#practical",
    "title": "Flow control and loops",
    "section": "Practical",
    "text": "Practical\n\nPractice working if and else statements\nPractice working with loops\n\nLink to lesson\nLink home"
  },
  {
    "objectID": "lectures/functions.html#a-function-and-its-components",
    "href": "lectures/functions.html#a-function-and-its-components",
    "title": "Functions",
    "section": "A function and its components",
    "text": "A function and its components\nAlmost everything you do in R involves functions. You call a function by typing its name with its arguments (inputs) inside the parentheses:\n\nsample(x = 1:5, size = 2)\n\n[1] 4 5\n\n\nThe function takes the arguments you provide, does something, and then returns an object. To see what a function does, you can type its name without parentheses to see the source:\n\nsample\n\nfunction (x, size, replace = FALSE, prob = NULL) \n{\n    if (length(x) == 1L && is.numeric(x) && is.finite(x) && x &gt;= \n        1) {\n        if (missing(size)) \n            size &lt;- x\n        sample.int(x, size, replace, prob)\n    }\n    else {\n        if (missing(size)) \n            size &lt;- length(x)\n        x[sample.int(length(x), size, replace, prob)]\n    }\n}\n&lt;bytecode: 0x5628da72ff10&gt;\n&lt;environment: namespace:base&gt;\n\n\nThe source shows you the arguments, their default values, and the expression defining the function. You can also look at the help file for the documentation:\n\nhelp(\"sample\")\n# or\n?sample"
  },
  {
    "objectID": "lectures/functions.html#using-functions-arguments",
    "href": "lectures/functions.html#using-functions-arguments",
    "title": "Functions",
    "section": "Using functions – arguments",
    "text": "Using functions – arguments\nFunctions can have 0 or more arguments, with or without defaults.\nThe arguments can be given in order, or by name\n\nset.seed(100)\nsample(1:5, 2, FALSE)\n\n[1] 2 3\n\n## same as\nset.seed(100)\nsample(size = 2, replace = FALSE, x = 1:5)\n\n[1] 2 3\n\n\nNames can be partially matched, which can be confusing:\n\nset.seed(100)\nsample(si = 2, re = FALSE, x = 1:5)\n\n[1] 2 3"
  },
  {
    "objectID": "lectures/functions.html#the-ellipsis-argument",
    "href": "lectures/functions.html#the-ellipsis-argument",
    "title": "Functions",
    "section": "The ellipsis argument",
    "text": "The ellipsis argument\nSome functions take ... as an argument, e.g., paste, list, also the apply family.\nThere are 2 reasons for this:\n\nThere could be varying numbers of arguments\n\n\nc(1, 2, 3)\n\n[1] 1 2 3\n\n##\nc(1, 2)\n\n[1] 1 2\n\n\n\nTo pass optional arguments to other functions involved\n\n\nlibrary(palmerpenguins)\nwith(penguins, \n     by(body_mass_g, species, mean)\n     )\n\nspecies: Adelie\n[1] NA\n------------------------------------------------------------ \nspecies: Chinstrap\n[1] 3733.088\n------------------------------------------------------------ \nspecies: Gentoo\n[1] NA\n\n## na.rm gets passed to \"mean\"\nwith(penguins, \n     by(body_mass_g, species, mean, \n        na.rm = TRUE)\n     )\n\nspecies: Adelie\n[1] 3700.662\n------------------------------------------------------------ \nspecies: Chinstrap\n[1] 3733.088\n------------------------------------------------------------ \nspecies: Gentoo\n[1] 5076.016"
  },
  {
    "objectID": "lectures/functions.html#using-functions-composition",
    "href": "lectures/functions.html#using-functions-composition",
    "title": "Functions",
    "section": "Using functions – composition",
    "text": "Using functions – composition\nOften we want to use the result of one function as the argument to another function. There are many ways to do this:\n\nIntermediate variables\n\n\nset.seed(100)\nx &lt;- rgamma(100, shape = 1, rate = 2)\nlogx &lt;- log(x)\nstdlogx &lt;- scale(logx)\nquantile(stdlogx, c(.25, .75))\n\n       25%        75% \n-0.3425622  0.5746209 \n\n\n\nNested function calls\n\n\nquantile(scale(log(x)), c(.25, .75))\n\n       25%        75% \n-0.3425622  0.5746209 \n\n\n\nThe pipe operator |&gt; (available in R 4.0.1)\n\n\nx |&gt; log() |&gt; scale() |&gt; quantile(c(.25, .75))\n\n       25%        75% \n-0.3425622  0.5746209"
  },
  {
    "objectID": "lectures/functions.html#using-functions-the-apply-family",
    "href": "lectures/functions.html#using-functions-the-apply-family",
    "title": "Functions",
    "section": "Using functions – the apply family",
    "text": "Using functions – the apply family\nSome functions will take other functions as arguments. An example is the apply family of functions, which applies a function over an index or iterator. See help(apply)\napply repeated applies a function over the dimensions of an array. MARGIN indicates which dimension, and then for each index in that dimension, it applies FUN to the sub-array\n\nM1 &lt;- matrix(rnorm(1000), nrow = 100, ncol = 10)\ncolnames(M1) &lt;- paste0(\"X\", 1:10)\napply(M1, MARGIN = 2, FUN = median)\n\n         X1          X2          X3          X4          X5          X6 \n 0.04874658  0.01365005  0.16552784  0.17273307 -0.14850050  0.21945219 \n         X7          X8          X9         X10 \n-0.23723207 -0.26703323 -0.07315224  0.01336232"
  },
  {
    "objectID": "lectures/functions.html#apply-continued",
    "href": "lectures/functions.html#apply-continued",
    "title": "Functions",
    "section": "Apply continued",
    "text": "Apply continued\ntapply is commonly used with data. It subsets the data X based on the INDEX argument, then applies a function to each subset:\n\nlibrary(palmerpenguins)\ntapply(X = penguins$bill_depth_mm, INDEX = penguins$species, \n       FUN = mean)\n\n   Adelie Chinstrap    Gentoo \n       NA  18.42059        NA \n\n\nlapply is more general, in that it can take any index and apply any function that takes the index as an argument. It always returns a list.\n\nlapply(split(penguins$bill_depth_mm, penguins$species), \n       FUN = mean)\n\n$Adelie\n[1] NA\n\n$Chinstrap\n[1] 18.42059\n\n$Gentoo\n[1] NA"
  },
  {
    "objectID": "lectures/functions.html#notes-on-speed-and-flexibility",
    "href": "lectures/functions.html#notes-on-speed-and-flexibility",
    "title": "Functions",
    "section": "Notes on speed and flexibility",
    "text": "Notes on speed and flexibility\nThe apply family of functions is computationally equivalent to a loop (with pre-allocation)\nUsing apply instead of a for loop will not be faster computationally\nIt may be faster to write, but it may also be much harder to understand\nYou can do whatever you want inside a for loop, how would you do something more complex with lapply?"
  },
  {
    "objectID": "lectures/functions.html#a-simple-function",
    "href": "lectures/functions.html#a-simple-function",
    "title": "Functions",
    "section": "A simple function",
    "text": "A simple function\n\nhello &lt;- function() {\n  \n  \"Hello\"\n  \n}\n\nhello()\n\n[1] \"Hello\""
  },
  {
    "objectID": "lectures/functions.html#a-function-with-arguments",
    "href": "lectures/functions.html#a-function-with-arguments",
    "title": "Functions",
    "section": "A function with arguments",
    "text": "A function with arguments\n\nhello &lt;- function(name) {\n  \n  paste(\"Hello\", name)\n  \n}\nhello(\"Jim\")\n\n[1] \"Hello Jim\"\n\nlapply(c(\"Jim\", \"Heather\", \"Bob\"), hello)\n\n[[1]]\n[1] \"Hello Jim\"\n\n[[2]]\n[1] \"Hello Heather\"\n\n[[3]]\n[1] \"Hello Bob\""
  },
  {
    "objectID": "lectures/functions.html#local-variables-and-scoping",
    "href": "lectures/functions.html#local-variables-and-scoping",
    "title": "Functions",
    "section": "Local variables and scoping",
    "text": "Local variables and scoping\n\nhello &lt;- function(name) {\n  \n  name2 &lt;- \"Mike\"\n  paste(\"Hello\", name, \"meet\", name2)\n  \n}\nhello(\"Jim\")\n\n[1] \"Hello Jim meet Mike\"\n\nname2\n\nError in eval(expr, envir, enclos): object 'name2' not found\n\n\nname2 is a local variable. It exists only inside the function.\n\nname2 &lt;- \"Billie\"\nhello(\"Jim\")\n\n[1] \"Hello Jim meet Mike\"\n\n\nModifying local variables outside the function has no effect. But be careful:\n\nhello2 &lt;- function(name) {\n  \n  paste(\"Hello\", name, \"meet\", name2)\n  \n}\nhello2(\"Jim\")\n\n[1] \"Hello Jim meet Billie\""
  },
  {
    "objectID": "lectures/functions.html#lexical-scoping",
    "href": "lectures/functions.html#lexical-scoping",
    "title": "Functions",
    "section": "Lexical scoping",
    "text": "Lexical scoping\nThis is called lexical scoping: it defines how R looks for objects when they are referred to by name\nIf R sees a variable it needs to use inside a function, and it is not an argument or local variable, then it follows these rules to find the object with that name:\n\nLook in the environment where the function was defined.\nIf not found, look in the parent environment of 1\nIf not found continue going down into parents until there are no more.\n\nNote the specification sees a variable and needs to use it. This is called lazy evaluation: R does not evaluate anything until it needs to use it"
  },
  {
    "objectID": "lectures/functions.html#lexical-scoping-example",
    "href": "lectures/functions.html#lexical-scoping-example",
    "title": "Functions",
    "section": "Lexical scoping example",
    "text": "Lexical scoping example\nThis can be used to your advantage, e.g.,\n\nleast_squares_constructor &lt;- function(dataY, dataX) {\n  \n  function(beta) {\n    sum((dataY - (beta[1] + beta[2] * dataX))^2, na.rm  =TRUE)\n  }\n    \n}\n\nmodel_penguin &lt;- least_squares_constructor(penguins$flipper_length_mm, \n                                        penguins$body_mass_g)\nmodel_penguin\n\nfunction(beta) {\n    sum((dataY - (beta[1] + beta[2] * dataX))^2, na.rm  =TRUE)\n  }\n&lt;environment: 0x5628d9d560a8&gt;\n\nls(environment(model_penguin))\n\n[1] \"dataX\" \"dataY\"\n\noptim(par = c(0,0), fn = model_penguin)\n\n$par\n[1] 136.74979325   0.01527274\n\n$value\n[1] 16250.32\n\n$counts\nfunction gradient \n     113       NA \n\n$convergence\n[1] 0\n\n$message\nNULL"
  },
  {
    "objectID": "lectures/functions.html#lazy-evaluation-example",
    "href": "lectures/functions.html#lazy-evaluation-example",
    "title": "Functions",
    "section": "Lazy evaluation example",
    "text": "Lazy evaluation example\n\nh01 &lt;- function(x) {\n    \n    \"Hello world!\"\n    \n}\nh01()\n\n[1] \"Hello world!\"\n\nh01(stop(\"Error\"))\n\n[1] \"Hello world!\"\n\n\nOne way to manually check for arguments is with missing:\n\nh02 &lt;- function(x) {\n    \n    if(missing(x)) {\n        return(\"Missing x!\")\n    }\n    \"Hello world!\"\n    \n}\n\nh02()\n\n[1] \"Missing x!\"\n\nh02(1)\n\n[1] \"Hello world!\""
  },
  {
    "objectID": "lectures/functions.html#anonymous-functions",
    "href": "lectures/functions.html#anonymous-functions",
    "title": "Functions",
    "section": "Anonymous functions",
    "text": "Anonymous functions\nYour own functions do not need to be saved and assigned names. If a function does not have a name it is anonymous, I use these often with the apply family:\n\nbootmeans &lt;- sapply(1:1000, function(i) {\n  \n  sample(penguins$body_mass_g, replace = TRUE) |&gt;\n    mean(na.rm = TRUE)\n\n})\nsummary(bootmeans)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   4053    4176    4203    4204    4230    4327 \n\n\nSince R 4.0.1, \\() can be used as shorthand for function():\n\nbootmeans &lt;- sapply(1:1000, \\(i) {\n  \n   sample(penguins$body_mass_g, replace = TRUE) |&gt;\n    mean(na.rm = TRUE)\n  \n})\nsummary(bootmeans)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   4080    4173    4201    4201    4228    4357"
  },
  {
    "objectID": "lectures/functions.html#operators",
    "href": "lectures/functions.html#operators",
    "title": "Functions",
    "section": "Operators",
    "text": "Operators\nOperators are symbols like +, &lt;-, %*%, [.\nThese are functions! To treat them like functions instead of operators, use backticks:\n\n2 + 2\n\n[1] 4\n\n`+`(2, 2)\n\n[1] 4\n\n\nYou can then treat operators as you would any other function, using them in apply or otherwise\nYou can also define your own operators:\n\n`% %` &lt;- function(a, b) {\n    \n    paste(a, b)\n    \n}\n\n\"my\" % % \"name\"\n\n[1] \"my name\"\n\n\"my\" % % \"name\" % % \"is\" % % \"Mike\"\n\n[1] \"my name is Mike\"\n\n\nAssignment operators have a special syntax:\n\n`second&lt;-` &lt;- function(x, value){\n    \n    x[2] &lt;- value\n    x\n    \n}\n\nx &lt;- 1:10\nsecond(x) &lt;- 11\nx\n\n [1]  1 11  3  4  5  6  7  8  9 10"
  },
  {
    "objectID": "lectures/functions.html#generic-methodsfunctions",
    "href": "lectures/functions.html#generic-methodsfunctions",
    "title": "Functions",
    "section": "Generic methods/functions",
    "text": "Generic methods/functions\nLook at the function print\n\nprint\n\nfunction (x, ...) \nUseMethod(\"print\")\n&lt;bytecode: 0x5628dbd11750&gt;\n&lt;environment: namespace:base&gt;\n\n\nIt is a generic function. UseMethod says depending on the class of argument object, R will call a suitable method (a function) that does something designed for whatever object is.\nYou can find all the special methods by running methods(\"print\") (try it now).\nThe class of the object is a simple attribute and the method is defined by appending the class name after the function name separated by a dot. This is called the S3 class system:\n\nx &lt;- 1:4\nclass(x)\n\n[1] \"integer\"\n\nclass(x) &lt;- \"myclass\"\n\ninherits(x, \"myclass\")\n\n[1] TRUE\n\nprint.myclass &lt;- function(x, ...) {\n  \n  cat(x, sep = \"\\n\")\n  \n}\n\nx\n\n1\n2\n3\n4"
  },
  {
    "objectID": "lectures/functions.html#summary",
    "href": "lectures/functions.html#summary",
    "title": "Functions",
    "section": "Summary",
    "text": "Summary\nIn R, everything that happens is due to a function, and everything that exists is an object. Functions themselves are objects.\nHow do functions work together? We can classify functions according to their inputs and outputs:\n\n\n\nInput/Output\nData\nFunction\n\n\n\n\nData\nRegular function\nFunction factory\n\n\nFunction\nFunctional\nFunction operator\n\n\n\nThese concepts are loosely defined, because functions can take both data and function arguments and return data and function results."
  },
  {
    "objectID": "lectures/functions.html#get-and-assign",
    "href": "lectures/functions.html#get-and-assign",
    "title": "Functions",
    "section": "get and assign",
    "text": "get and assign\nRecall that we can retrieve a variable from a data frame by using a character string, e.g., penguins[[\"species\"]].\nWe can use a character string to get or assign any other object using these functions. For example, this returns the function called mean\n\nget(\"mean\")\n\nfunction (x, ...) \nUseMethod(\"mean\")\n&lt;bytecode: 0x5628db48c088&gt;\n&lt;environment: namespace:base&gt;\n\n\nwhich we can use like a function\n\nget(\"mean\")(penguins$body_mass_g, na.rm = TRUE)\n\n[1] 4201.754\n\n\nLikewise, an object can be created with assign\n\nassign(\"mean.body.mass\", mean(penguins$body_mass_g, na.rm = TRUE))\nmean.body.mass\n\n[1] 4201.754"
  },
  {
    "objectID": "lectures/functions.html#uses-of-get-and-assign",
    "href": "lectures/functions.html#uses-of-get-and-assign",
    "title": "Functions",
    "section": "Uses of get and assign",
    "text": "Uses of get and assign\nExample, iterating over functions by name:\n\nsummary_funcs &lt;- c(\"mean\", \"sd\", \"median\")\nfor(fn in summary_funcs) {\n  cat(fn, \"body mass: \")\n  cat(get(fn)(penguins$body_mass_g, na.rm = TRUE), \"\\n\")\n}\n\nmean body mass: 4201.754 \nsd body mass: 801.9545 \nmedian body mass: 4050 \n\n\nExample, retrieving a function programmatically,\n\nconverter &lt;- get(paste0(\"as.\", class(penguins$flipper_length_mm)))\nconverter(mean(penguins$flipper_length_mm, na.rm = TRUE))\n\n[1] 200\n\n\nExample, programmatically creating new variables,\n\nnumeric_cols &lt;- names(penguins)[sapply(penguins, is.numeric)]\nfor(col in numeric_cols){\n  assign(paste0(col, \".scaled\"), \n         scale(penguins[[col]]))\n}"
  },
  {
    "objectID": "lectures/functions.html#do.call",
    "href": "lectures/functions.html#do.call",
    "title": "Functions",
    "section": "do.call",
    "text": "do.call\nA variant on get is do.call. This takes a function as the first argument, then a list containing the arguments for the function, do.call(&lt;function&gt;, &lt;list of arguments to function&gt;).\nA common use for this is with functions that take a variable number of arguments, e.g., cbind, paste, where the arguments are created programmatically.\nsimple example,\n\ndo.call(\"paste\", list(\"A\", \"B\", sep = \".\"))\n\n[1] \"A.B\"\n\n\narranging a list into a matrix\n\nmean.sd.by.species &lt;- lapply(split(penguins$flipper_length_mm, penguins$species), \n                             function(x) c(mean = mean(x, na.rm = TRUE), sd = sd(x, na.rm = TRUE)))\ndo.call(\"rbind\", mean.sd.by.species)\n\n              mean       sd\nAdelie    189.9536 6.539457\nChinstrap 195.8235 7.131894\nGentoo    217.1870 6.484976"
  },
  {
    "objectID": "lectures/functions.html#global-assigment-operator",
    "href": "lectures/functions.html#global-assigment-operator",
    "title": "Functions",
    "section": "Global assigment operator",
    "text": "Global assigment operator\nThere is the &lt;&lt;- operator, which is used in functions and does (re)assignment outside the function. It searches the parent environments and reassigns where found, if not found it assigns in the global environment.\nThis is generally considered to be a bad idea, but now you know about it.\n\nname2 &lt;- \"Billie\"\nname2\n\n[1] \"Billie\"\n\nhello &lt;- function(name) {\n  \n  name2 &lt;&lt;- \"Mike\"\n  paste(\"Hello\", name, \"meet\", name2)\n  \n}\nhello(\"Jim\")\n\n[1] \"Hello Jim meet Mike\"\n\nname2\n\n[1] \"Mike\""
  },
  {
    "objectID": "lectures/functions.html#recursive-functions",
    "href": "lectures/functions.html#recursive-functions",
    "title": "Functions",
    "section": "Recursive functions",
    "text": "Recursive functions\nFunctions that call themselves are possible.\nAs with repeat loops, they need to have a break condition\n\nfibbo &lt;- function(n) {\n  \n  if(n &lt;= 2) {  ## exit condition\n    1\n  } else {\n    n + fibbo(n - 1)\n  }\n  \n}\n\nThese are actually useful when working with nested lists and directed acyclic graphs, for example."
  },
  {
    "objectID": "lectures/functions.html#practical",
    "href": "lectures/functions.html#practical",
    "title": "Functions",
    "section": "Practical",
    "text": "Practical\n\nModify and write functions\nUse apply to iterate functions over data\nWrite your own class and generic print function\n\nLink to lesson\nLink home"
  },
  {
    "objectID": "lectures/index.html",
    "href": "lectures/index.html",
    "title": "Lectures",
    "section": "",
    "text": "Project organization and workflow\n\n\nDay 0\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nIntroduction and Overview\n\n\nDay 1\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nDynamic Documents\n\n\nDay 1, A\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nData structures in R\n\n\nDay 1, B\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nFlow control and loops\n\n\nDay 2, A\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nFunctions\n\n\nDay 2, B\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nTidy data\n\n\nDay 3, B\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nStrings and dates\n\n\nDay 4, A\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nMerging/joining data\n\n\nDay 4, B\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nData visualization\n\n\nDay 4, C\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nSummary and conclusion\n\n\nDay 4, D\n\n\n\n\n \n\n\n\n\nNo matching items"
  },
  {
    "objectID": "lectures/introduction.html#learning-objectives",
    "href": "lectures/introduction.html#learning-objectives",
    "title": "Introduction and Overview",
    "section": "Learning objectives",
    "text": "Learning objectives\n\nUnderstand and apply programming principles to handle repetitive tasks\nUnderstand how to use and make your own functions in R\nUse loops in R\nApply these principles to perform efficient data manipulation, analysis, and reporting"
  },
  {
    "objectID": "lectures/introduction.html#why",
    "href": "lectures/introduction.html#why",
    "title": "Introduction and Overview",
    "section": "Why?",
    "text": "Why?\n\nIf your research involves any data, it likely also involves:\n\nData management and manipulation\nAnalysis\nReporting of results\n\nThis means lots of code.\nWe can borrow some ideas from software development to\n\nMake our lives easier – repetitive tasks, updates with new data\nMake science better – reproducible, understandable, reusable"
  },
  {
    "objectID": "lectures/introduction.html#goals",
    "href": "lectures/introduction.html#goals",
    "title": "Introduction and Overview",
    "section": "Goals",
    "text": "Goals\nAt a bare minimum, we want our code to be:\n\n\nOrganized\n\nCoherent structure of\n\nfolders, files, and scripts\n\n\nTransportable\n\nWorks on\n\nmy future computer\nother people’s computers\n\n\n\nUnderstandable\n\nClearly specified dependencies\nReadable code, sensible naming of things\nWritten documentation explaining what and how"
  },
  {
    "objectID": "lectures/introduction.html#extras",
    "href": "lectures/introduction.html#extras",
    "title": "Introduction and Overview",
    "section": "Extras",
    "text": "Extras\nNice to have, but not absolutely necessary\nProvably correct\nThrough automated testing\n\nPieces of code correctly do what they should\nCode works together correctly, not sensitive to minor changes in the data\nValid statistical properties\n\nVersion controlled\n\nHistory of development is tracked and documented"
  },
  {
    "objectID": "lectures/introduction.html#overview-of-this-course",
    "href": "lectures/introduction.html#overview-of-this-course",
    "title": "Introduction and Overview",
    "section": "Overview of this course",
    "text": "Overview of this course\nLectures\nLessons\nWork through a problem together, learn tools and strategies\nSticky note system\n = “I need help!”\n = “Good to go!”\nNo sticky = still working\nShare solutions/questions/responses on padlet:\nhttps://padlet.com/sachsmc/rprogs23\nCourse website:\nhttps://sachsmc.github.io/r-programming/"
  },
  {
    "objectID": "lectures/introduction.html#schedule-of-topics",
    "href": "lectures/introduction.html#schedule-of-topics",
    "title": "Introduction and Overview",
    "section": "Schedule of topics",
    "text": "Schedule of topics\n\n\nToday\n\nReporting, dynamic documents\nData structures and indexing\n\nThursday\n\nFlow control and loops\nCreating and using functions\n\n\nNext Monday\n\nWorking with data, merging and reshaping\nWorking with data, dates and characters\n\nNext Thursday\n\nData visualization\nTime to work on exam"
  },
  {
    "objectID": "lectures/introduction.html#what-i-do",
    "href": "lectures/introduction.html#what-i-do",
    "title": "Introduction and Overview",
    "section": "What I do",
    "text": "What I do\n\nDevelop and evaluate statistical methods\n\nWrite R packages\nWrite R code to test the methods\n\nCollaborate on research projects involving data analysis\n\nUse register and other data from stats Denmark\nData analysis, visualization and reporting"
  },
  {
    "objectID": "lectures/introduction.html#my-r-philosophy",
    "href": "lectures/introduction.html#my-r-philosophy",
    "title": "Introduction and Overview",
    "section": "My R philosophy",
    "text": "My R philosophy\n\nI started learning R in 2005 (version 2.2)\nThere is almost no problem that can’t be solved with R\n\nFlexible and dynamic\nPlays nicely with almost any other programming language"
  },
  {
    "objectID": "lectures/introduction.html#course-philosophy",
    "href": "lectures/introduction.html#course-philosophy",
    "title": "Introduction and Overview",
    "section": "Course philosophy",
    "text": "Course philosophy\n\nThere are no stupid questions\nThere are many ways to solve a problem, there is no single “right way”\nI will not force you to learn any particular way, e.g., tidyverse vs data.table, we will focus on learning the general principles.\n\nTry them out, then choose one and get good at it\nSame with project organization, choose a system and stick with it\n\nShow up to class and participate, you will pass and hopefully learn something useful"
  },
  {
    "objectID": "lectures/introduction.html#exam",
    "href": "lectures/introduction.html#exam",
    "title": "Introduction and Overview",
    "section": "Exam",
    "text": "Exam\nTo get credit for the course, you must hand in and pass the exam which will be an email sent to skl@sund.ku.dk no later than 23.59 on November 16.\nIt must contain as attachments:\n\nA rendered output document in a format of your choice that includes prose, code, and output from code.\nThe source document containing code\nAny other files necessary to run the code\n\nThe body of the email should be the “readme” file, with details on\n\nWhat is included\nHow to run the code and reproduce the results"
  },
  {
    "objectID": "lectures/introduction.html#how-to-pass-the-exam",
    "href": "lectures/introduction.html#how-to-pass-the-exam",
    "title": "Introduction and Overview",
    "section": "How to pass the exam",
    "text": "How to pass the exam\n\nSend something on time (Before midnight on Nov 16)\nDemonstrate mastery of at least 3 out of the 4 learning objectives.\n\nAn easy way to do this is to do the exercises and save them all in a single Rmarkdown or Quarto document.\nOffice hours\nThe week after the course and before Nov 16, I will hold office hours where you can come ask questions and get help on any R topic\nI will send sign up link by email"
  },
  {
    "objectID": "lectures/merging-data.html#register-data-example",
    "href": "lectures/merging-data.html#register-data-example",
    "title": "Merging/joining data",
    "section": "Register data example",
    "text": "Register data example\nWe’ve worked a bit with the patient register data defining possible exposures/outcomes using ICD codes and dates\n\nThere are other registers, drug, cause of death, social welfare, etc.\nWe want to obtain data from these other data sets and match it to individuals we already have"
  },
  {
    "objectID": "lectures/merging-data.html#keys",
    "href": "lectures/merging-data.html#keys",
    "title": "Merging/joining data",
    "section": "Keys",
    "text": "Keys\n\nA key is one or more variables that can be used to identify observations\nExamples, CPR number, hospital code, drug codes"
  },
  {
    "objectID": "lectures/merging-data.html#example",
    "href": "lectures/merging-data.html#example",
    "title": "Merging/joining data",
    "section": "Example",
    "text": "Example\n\n\n\n\nclassDiagram\n  direction RL\n  class Person {\n    - PID\n    - Birthdate\n    - Deathdate\n  }\n  class Hospitalization {\n    - PID\n    - Date\n    - Diagnosis\n    - Procedures\n  }\n  class Prescription {\n    -PID\n    -Date\n    -ATC\n    -Dose\n  }\n  class Drug{\n    -ATC\n    -Class\n  }\n  Person &lt;|-- Hospitalization\n  Person &lt;|-- Prescription\n  Prescription &lt;|-- Drug"
  },
  {
    "objectID": "lectures/merging-data.html#types-of-joins",
    "href": "lectures/merging-data.html#types-of-joins",
    "title": "Merging/joining data",
    "section": "Types of joins",
    "text": "Types of joins\nOften the goal of a join or merge is to add new variables to an existing data table\nExample, given a table of hospitalization diagnoses, I want to know the drug dispensations that happened for each person after the hospitalization date"
  },
  {
    "objectID": "lectures/merging-data.html#left-join",
    "href": "lectures/merging-data.html#left-join",
    "title": "Merging/joining data",
    "section": "Left join",
    "text": "Left join\n\nlibrary(dplyr)\nlibrary(data.table)\nx &lt;- tribble(\n  ~key, ~val_x,\n     1, \"x1\",\n     2, \"x2\",\n     3, \"x3\"\n)\ny &lt;- tribble(\n  ~key, ~val_y,\n     1, \"y1\",\n     2, \"y2\",\n     4, \"y3\"\n)\nx\n\n# A tibble: 3 × 2\n    key val_x\n  &lt;dbl&gt; &lt;chr&gt;\n1     1 x1   \n2     2 x2   \n3     3 x3   \n\ny\n\n# A tibble: 3 × 2\n    key val_y\n  &lt;dbl&gt; &lt;chr&gt;\n1     1 y1   \n2     2 y2   \n3     4 y3"
  },
  {
    "objectID": "lectures/merging-data.html#section",
    "href": "lectures/merging-data.html#section",
    "title": "Merging/joining data",
    "section": "",
    "text": "Tidyverse\n\nx |&gt; left_join(y, by = \"key\")\n\n# A tibble: 3 × 3\n    key val_x val_y\n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n1     1 x1    y1   \n2     2 x2    y2   \n3     3 x3    &lt;NA&gt; \n\n\nBase R\n\nmerge(x, y, by = \"key\", all.x = TRUE)\n\n  key val_x val_y\n1   1    x1    y1\n2   2    x2    y2\n3   3    x3  &lt;NA&gt;\n\n\ndata.table\nsame as base R.\nSlightly different (right join):\n\nxdt &lt;- data.table(x)\nydt &lt;- data.table(y)\n\nydt[xdt, on = .(key)]\n\n   key val_y val_x\n1:   1    y1    x1\n2:   2    y2    x2\n3:   3  &lt;NA&gt;    x3"
  },
  {
    "objectID": "lectures/merging-data.html#many-to-one",
    "href": "lectures/merging-data.html#many-to-one",
    "title": "Merging/joining data",
    "section": "Many-to-one",
    "text": "Many-to-one\n\nx &lt;- tribble(\n  ~key, ~val_x,\n     1, \"x1\",\n     2, \"x2\",\n     3, \"x3\"\n)\ny &lt;- tribble(\n  ~key, ~val_y,\n     1, \"y1\",\n     1, \"y1b\",\n     2, \"y2\",\n     4, \"y3\"\n)\n\nmerge(x, y, by = \"key\", all.x = TRUE)\n\n  key val_x val_y\n1   1    x1    y1\n2   1    x1   y1b\n3   2    x2    y2\n4   3    x3  &lt;NA&gt;"
  },
  {
    "objectID": "lectures/merging-data.html#one-to-many",
    "href": "lectures/merging-data.html#one-to-many",
    "title": "Merging/joining data",
    "section": "One-to-many",
    "text": "One-to-many\n\nx &lt;- tribble(\n  ~key, ~val_x,\n     1, \"x1\",\n     1, \"x1b\",\n     2, \"x2\",\n     3, \"x3\"\n)\ny &lt;- tribble(\n  ~key, ~val_y,\n     1, \"y1\",\n     2, \"y2\",\n     4, \"y3\"\n)\n\nmerge(x, y, by = \"key\", all.x = TRUE)\n\n  key val_x val_y\n1   1    x1    y1\n2   1   x1b    y1\n3   2    x2    y2\n4   3    x3  &lt;NA&gt;"
  },
  {
    "objectID": "lectures/merging-data.html#many-to-many",
    "href": "lectures/merging-data.html#many-to-many",
    "title": "Merging/joining data",
    "section": "Many-to-many",
    "text": "Many-to-many\n\nx &lt;- tribble(\n  ~key, ~val_x,\n     1, \"x1\",\n     1, \"x1b\",\n     2, \"x2\",\n     3, \"x3\"\n)\ny &lt;- tribble(\n  ~key, ~val_y,\n     1, \"y1\",\n     1, \"y1b\",\n     2, \"y2\",\n     4, \"y3\"\n)\n\nmerge(x, y, by = \"key\", all.x = TRUE)\n\n  key val_x val_y\n1   1    x1    y1\n2   1    x1   y1b\n3   1   x1b    y1\n4   1   x1b   y1b\n5   2    x2    y2\n6   3    x3  &lt;NA&gt;"
  },
  {
    "objectID": "lectures/merging-data.html#other-merge-types",
    "href": "lectures/merging-data.html#other-merge-types",
    "title": "Merging/joining data",
    "section": "Other merge types",
    "text": "Other merge types\n\nRight join: merge(x, y, by = \"key\", all.y = TRUE)\nInner join: merge(x, y, by = \"key\", all = FALSE) (the default)\nFull join: merge(x, y, by = \"key\", all = TRUE)"
  },
  {
    "objectID": "lectures/merging-data.html#examples-from-the-register",
    "href": "lectures/merging-data.html#examples-from-the-register",
    "title": "Merging/joining data",
    "section": "Examples from the register",
    "text": "Examples from the register\n\nInpatient and outpatient hospitalizations are in different tables, outpatient has only admission date, inpatient also has discharge date\nDrugs are large in number, so drug registers are stored in different files by year\nDates do not match exactly in different registers, often want to match within a range of dates"
  },
  {
    "objectID": "lectures/merging-data.html#non-exact-joins",
    "href": "lectures/merging-data.html#non-exact-joins",
    "title": "Merging/joining data",
    "section": "Non exact joins",
    "text": "Non exact joins\nI want to merge these two tables where key1 matches exactly, and key2 in y is less than key2 in x\n\nx &lt;- tribble(\n  ~key1, ~key2x, ~val_x,\n     1, 20, \"x1\",\n     1, 50, \"x1b\",\n     2, 35, \"x2\",\n     3, 10, \"x3\"\n)\ny &lt;- tribble(\n  ~key1, ~key2y, ~val_y,\n     1, 10, \"y1\",\n     1, 25, \"y1b\",\n     1, 35, \"y1c\",\n     2, 20, \"y2\",\n     2, 50, \"y2b\",\n     3, 30, \"y3\"\n)"
  },
  {
    "objectID": "lectures/merging-data.html#base-r-1",
    "href": "lectures/merging-data.html#base-r-1",
    "title": "Merging/joining data",
    "section": "Base R",
    "text": "Base R\nMulti step process in base R\n\nmerge(x, y, by = \"key1\", all = FALSE) |&gt;\n  subset(key2y &lt;= key2x)\n\n  key1 key2x val_x key2y val_y\n1    1    20    x1    10    y1\n4    1    50   x1b    10    y1\n5    1    50   x1b    25   y1b\n6    1    50   x1b    35   y1c\n7    2    35    x2    20    y2\n\n## merge allows multiple keys, but only exact matching\nmerge(x, y, \n      by.x = c(\"key1\", \"key2x\"), \n      by.y = c(\"key1\", \"key2y\"), all = FALSE)\n\n[1] key1  key2x val_x val_y\n&lt;0 rows&gt; (or 0-length row.names)"
  },
  {
    "objectID": "lectures/merging-data.html#data.table-1",
    "href": "lectures/merging-data.html#data.table-1",
    "title": "Merging/joining data",
    "section": "data.table",
    "text": "data.table\n\nxdt &lt;- data.table(x, key = \"key1\")\nydt &lt;- data.table(y, key = \"key1\")\n\nydt[xdt, on = .(key1, key2y &lt;= key2x), nomatch = NULL]\n\n   key1 key2y val_y val_x\n1:    1    20    y1    x1\n2:    1    50    y1   x1b\n3:    1    50   y1b   x1b\n4:    1    50   y1c   x1b\n5:    2    35    y2    x2"
  },
  {
    "objectID": "lectures/merging-data.html#rolling-joins-with-data.table",
    "href": "lectures/merging-data.html#rolling-joins-with-data.table",
    "title": "Merging/joining data",
    "section": "Rolling joins with data.table",
    "text": "Rolling joins with data.table\nThe previous example returns all matches satisfying the inequality, what if we only want the closest one?\n\n## return all \nydt[xdt, on = .(key1, key2y &lt;= key2x), nomatch = NULL]\n\n   key1 key2y val_y val_x\n1:    1    20    y1    x1\n2:    1    50    y1   x1b\n3:    1    50   y1b   x1b\n4:    1    50   y1c   x1b\n5:    2    35    y2    x2\n\n## only closest match\nydt[xdt, on = .(key1, key2y == key2x), roll = TRUE, nomatch = NULL]\n\n   key1 key2y val_y val_x\n1:    1    20    y1    x1\n2:    1    50   y1c   x1b\n3:    2    35    y2    x2"
  },
  {
    "objectID": "lectures/merging-data.html#tidyverse-1",
    "href": "lectures/merging-data.html#tidyverse-1",
    "title": "Merging/joining data",
    "section": "Tidyverse",
    "text": "Tidyverse\nThis is available in dplyr since version 1.1.0\n\nx |&gt; left_join(y, join_by(key2 &lt;= key2))"
  },
  {
    "objectID": "lectures/merging-data.html#remember",
    "href": "lectures/merging-data.html#remember",
    "title": "Merging/joining data",
    "section": "Remember",
    "text": "Remember\nWhen working with real data, remember these principles when merging\n\nWhat is the key? Is it named something else in the other table?\nDoes the key define unique observations? If not (e.g., multiple rows per individual), then you will have a non one-to-one merge.\nWorking with dates and ranges is possible, but be careful and check the results carefully"
  },
  {
    "objectID": "lectures/merging-data.html#practical",
    "href": "lectures/merging-data.html#practical",
    "title": "Merging/joining data",
    "section": "Practical",
    "text": "Practical\nAfter the next lecture, we will continue using the register data example to practice merging and defining new variables based on dates and strings.\nLink home"
  },
  {
    "objectID": "lectures/projects.html#why",
    "href": "lectures/projects.html#why",
    "title": "Project organization and workflow",
    "section": "Why?",
    "text": "Why?\nSee the UCPH Policy for Research Data Management"
  },
  {
    "objectID": "lectures/projects.html#set-up-projects",
    "href": "lectures/projects.html#set-up-projects",
    "title": "Project organization and workflow",
    "section": "Set up projects",
    "text": "Set up projects\nQuick review of the file system\n\nFile system discipline: put all the files related to a single project in a designated folder.\n\nThis applies to data, code, figures, notes, etc.\nDepending on project complexity, you might enforce further organization into subfolders.\n\nA wide variety of tools to facilitate this are collected here:\n\nCRAN task view on Reproducible Research"
  },
  {
    "objectID": "lectures/projects.html#the-importance-of-readme",
    "href": "lectures/projects.html#the-importance-of-readme",
    "title": "Project organization and workflow",
    "section": "The importance of README",
    "text": "The importance of README\n\nAlways include a README.txt or .md file at the root of the project\nPlan, Document, Share, and Preserve\nTo include: what and how:\n\nTitle of the project\nWhen it was last updated\nWhat is included in the project directory\nHow to run the analysis and use the results (including what dependencies are needed)\nA license describing the conditions of use\n\n\nExample 1\nExample 2"
  },
  {
    "objectID": "lectures/projects.html#an-example-project-structure",
    "href": "lectures/projects.html#an-example-project-structure",
    "title": "Project organization and workflow",
    "section": "An example project structure",
    "text": "An example project structure\n\n\nexample-project\n\n\n-- .here\n-- code\n   |__01-process-data.R\n   |__02-primary-analysis.R\n   |__03-sensitivity-analysis.R\n   |__project-report.Rmd\n-- data\n   |__merge-analysis-dataset.rds\n-- documents\n   |__background.docx\n   |__protocol.docx\n-- output\n   |__Figure1.png\n   |__Figure2.png\n   |__Table1.rds\n-- rawdata\n   |__lisa-2012-full.csv\n   |__lisa-2013-full.csv\n   |__lisa-2014-full.csv\n   |__lisa-2015-full.csv\n-- README.md"
  },
  {
    "objectID": "lectures/projects.html#r-session-and-the-working-directory",
    "href": "lectures/projects.html#r-session-and-the-working-directory",
    "title": "Project organization and workflow",
    "section": "R session and the working directory",
    "text": "R session and the working directory\n\ngetwd()\n\n[1] \"/home/sachsmc/Teaching/Courses/r-programming/lectures\"\n\nlist.dirs(\".\", recursive = FALSE)\n\n[1] \"./dataviz_files\"        \"./flow-and-loops_files\"\n\nlist.dirs(\"..\", recursive = FALSE)\n\n [1] \"../.git\"            \"../.quarto\"         \"../.Rproj.user\"    \n [4] \"../data\"            \"../docs\"            \"../example-project\"\n [7] \"../exercises\"       \"../images\"          \"../lectures\"       \n[10] \"../site_libs\"      \n\n\n\nThe R session runs in the current working directory\nInput and output happens relative to that directory\n\".\" means “this directory”\n\"..\" means “the directory that this one is contained in”"
  },
  {
    "objectID": "lectures/projects.html#navigating-the-directory-from-r",
    "href": "lectures/projects.html#navigating-the-directory-from-r",
    "title": "Project organization and workflow",
    "section": "Navigating the directory from R",
    "text": "Navigating the directory from R\nCompose directories and files with file.path (it is safe and works in any operating system)\n\nread.csv(file.path(\"..\", \"rawdata\", \"lisa-2012-full.csv\"))\nsaveRDS(analysis_file, file.path(\"..\", \"data\", \"analysis-data.rds\"))"
  },
  {
    "objectID": "lectures/projects.html#the-here-package",
    "href": "lectures/projects.html#the-here-package",
    "title": "Project organization and workflow",
    "section": "The here package",
    "text": "The here package\n\nlibrary(here)\n\nhere()\n\n[1] \"/home/sachsmc/Teaching/Courses/r-programming\"\n\nsetwd(\"../exercises\")\nhere()\n\n[1] \"/home/sachsmc/Teaching/Courses/r-programming\"\n\n\nUpon librarying the here package, it will attempt to identify the root of your project directory: is there an .Rproj or .here file there? Then you can use the here() function to give the path to the root directory no matter where you are in the project directories.\n\nread.csv(here(\"rawdata\", \"lisa-2012-full.csv\"))\nsaveRDS(analysis_file, here(\"data\", \"analysis-data.rds\"))\n\nThen, here allows you to build paths to subdirectories, starting from the project root.\nUse this in your scripts, and everything will run nicely, both interactively and programmatically, no matter what your working directory is (as long as it is in the project)."
  },
  {
    "objectID": "lectures/projects.html#what",
    "href": "lectures/projects.html#what",
    "title": "Project organization and workflow",
    "section": "What?",
    "text": "What?\nPersonal taste and habits (“workflow”) versus the logic and output that is the essence of your project (“product”)\n\nThe naming/specific structure of your project directory.\nThe editor you use to write your R code."
  },
  {
    "objectID": "lectures/projects.html#get-comfortable",
    "href": "lectures/projects.html#get-comfortable",
    "title": "Project organization and workflow",
    "section": "Get comfortable",
    "text": "Get comfortable\nYour workflow does not matter, as long as you follow the principles.\nOptions for IDEs (all free):\n\nRstudio\nVScode\nEmacs\n\nAll of these support projects, have integrated help files, code completion, and syntax highlighting."
  },
  {
    "objectID": "lectures/projects.html#setting-the-working-directory",
    "href": "lectures/projects.html#setting-the-working-directory",
    "title": "Project organization and workflow",
    "section": "Setting the working directory",
    "text": "Setting the working directory\n\nOpen the .Rproj file in a fresh R/Rstudio session\nOpen an .R file in a new session\nUse the drop down menu in Rstudio: Session &gt; Set working directory\nUse setwd() in the terminal\n\nAvoid using setwd() in scripts"
  },
  {
    "objectID": "lectures/projects.html#bad-vs-good-habits",
    "href": "lectures/projects.html#bad-vs-good-habits",
    "title": "Project organization and workflow",
    "section": "Bad vs good habits",
    "text": "Bad vs good habits\nDo not:\n\nuse setwd() in scripts\nrely on rm(list = ls())\nsave .RData when you quit R and don’t load .RData when you launch R.\n\nDo:\n\nRestart your R session frequently while working\nSet the working directory on launch or interactively\nUse relative paths, or here if your project directory is complex"
  },
  {
    "objectID": "lectures/projects.html#practical",
    "href": "lectures/projects.html#practical",
    "title": "Project organization and workflow",
    "section": "Practical",
    "text": "Practical\n\nCreate a toy project using your favorite tools\nSwap projects with your neighbor\nSee if you can reproduce each others results\n\nLink to lesson\nLink home"
  },
  {
    "objectID": "lectures/tidy-data.html#our-mean_sd-function",
    "href": "lectures/tidy-data.html#our-mean_sd-function",
    "title": "Tidy data",
    "section": "Our mean_sd function",
    "text": "Our mean_sd function\n\nlibrary(palmerpenguins)\nlibrary(dplyr)\n\nmean_sd &lt;- function(x, na.rm = TRUE) {\n  c(mean = mean(x, na.rm = na.rm), \n    sd = sd(x, na.rm = na.rm))\n}\n\n\npenguins |&gt; group_by(species, sex) |&gt;\n  summarize(mean_sd(body_mass_g))\n\n# A tibble: 16 × 3\n# Groups:   species, sex [8]\n   species   sex    `mean_sd(body_mass_g)`\n   &lt;fct&gt;     &lt;fct&gt;                   &lt;dbl&gt;\n 1 Adelie    female                  3369.\n 2 Adelie    female                   269.\n 3 Adelie    male                    4043.\n 4 Adelie    male                     347.\n 5 Adelie    &lt;NA&gt;                    3540 \n 6 Adelie    &lt;NA&gt;                     477.\n 7 Chinstrap female                  3527.\n 8 Chinstrap female                   285.\n 9 Chinstrap male                    3939.\n10 Chinstrap male                     362.\n11 Gentoo    female                  4680.\n12 Gentoo    female                   282.\n13 Gentoo    male                    5485.\n14 Gentoo    male                     313.\n15 Gentoo    &lt;NA&gt;                    4588.\n16 Gentoo    &lt;NA&gt;                     338.\n\n\nThis is not so nice to work with because we cannot see which row is the mean and which is the sd."
  },
  {
    "objectID": "lectures/tidy-data.html#alternative-1",
    "href": "lectures/tidy-data.html#alternative-1",
    "title": "Tidy data",
    "section": "Alternative 1",
    "text": "Alternative 1\nReturn a data frame instead\n\nmean_sd_df &lt;- function(x, na.rm = TRUE) {\n  data.frame(\n    variable = deparse1(substitute(x)),\n    mean = mean(x, na.rm = na.rm), \n    sd = sd(x, na.rm = na.rm))\n}\n\npenguins |&gt; group_by(species, sex) |&gt;\n  summarize(mean_sd_df(body_mass_g))\n\n# A tibble: 8 × 5\n# Groups:   species [3]\n  species   sex    variable     mean    sd\n  &lt;fct&gt;     &lt;fct&gt;  &lt;chr&gt;       &lt;dbl&gt; &lt;dbl&gt;\n1 Adelie    female body_mass_g 3369.  269.\n2 Adelie    male   body_mass_g 4043.  347.\n3 Adelie    &lt;NA&gt;   body_mass_g 3540   477.\n4 Chinstrap female body_mass_g 3527.  285.\n5 Chinstrap male   body_mass_g 3939.  362.\n6 Gentoo    female body_mass_g 4680.  282.\n7 Gentoo    male   body_mass_g 5485.  313.\n8 Gentoo    &lt;NA&gt;   body_mass_g 4588.  338."
  },
  {
    "objectID": "lectures/tidy-data.html#alternative-2",
    "href": "lectures/tidy-data.html#alternative-2",
    "title": "Tidy data",
    "section": "Alternative 2",
    "text": "Alternative 2\n\nmean_sd_ldf &lt;- function(x, na.rm = TRUE) {\n  data.frame(\n    variable = deparse1(substitute(x)),\n    stat = c(\"mean\", \"sd\"), \n    value = c(mean(x, na.rm = na.rm), \n             sd(x, na.rm = na.rm)))\n}\n\npenguins |&gt; group_by(species, sex) |&gt;\n  summarize(mean_sd_ldf(body_mass_g))\n\n# A tibble: 16 × 5\n# Groups:   species, sex [8]\n   species   sex    variable    stat  value\n   &lt;fct&gt;     &lt;fct&gt;  &lt;chr&gt;       &lt;chr&gt; &lt;dbl&gt;\n 1 Adelie    female body_mass_g mean  3369.\n 2 Adelie    female body_mass_g sd     269.\n 3 Adelie    male   body_mass_g mean  4043.\n 4 Adelie    male   body_mass_g sd     347.\n 5 Adelie    &lt;NA&gt;   body_mass_g mean  3540 \n 6 Adelie    &lt;NA&gt;   body_mass_g sd     477.\n 7 Chinstrap female body_mass_g mean  3527.\n 8 Chinstrap female body_mass_g sd     285.\n 9 Chinstrap male   body_mass_g mean  3939.\n10 Chinstrap male   body_mass_g sd     362.\n11 Gentoo    female body_mass_g mean  4680.\n12 Gentoo    female body_mass_g sd     282.\n13 Gentoo    male   body_mass_g mean  5485.\n14 Gentoo    male   body_mass_g sd     313.\n15 Gentoo    &lt;NA&gt;   body_mass_g mean  4588.\n16 Gentoo    &lt;NA&gt;   body_mass_g sd     338."
  },
  {
    "objectID": "lectures/tidy-data.html#tidy-data",
    "href": "lectures/tidy-data.html#tidy-data",
    "title": "Tidy data",
    "section": "Tidy data",
    "text": "Tidy data\nThese are two different ways to represent the same data. This is to illustrate the concept of tidy data\nTidy data is a standard way of mapping the meaning of a dataset to its structure. A dataset is messy or tidy depending on how rows, columns and tables are matched up with observations, variables and types. In tidy data:\n\nEach variable forms a column.\nEach observation forms a row.\nEach type of observational unit forms a table.\n\nWickham, H. (2014). Tidy Data. Journal of Statistical Software, 59(10), 1–23. https://doi.org/10.18637/jss.v059.i10"
  },
  {
    "objectID": "lectures/tidy-data.html#variables-and-observations",
    "href": "lectures/tidy-data.html#variables-and-observations",
    "title": "Tidy data",
    "section": "Variables and observations",
    "text": "Variables and observations\nIn general,\n\nIt is easier to describe and create functional relationships between variables (columns), than between observations.\n\nThink of our mean, sd example. Relationship between mean and sd?\nRegression\n\nIt is easier to make comparisons between groups of observations than across variables\n\nT-tests, anova, compare means across species"
  },
  {
    "objectID": "lectures/tidy-data.html#making-statistical-output-tidy",
    "href": "lectures/tidy-data.html#making-statistical-output-tidy",
    "title": "Tidy data",
    "section": "Making statistical output tidy",
    "text": "Making statistical output tidy\nIf you are writing the function that does the calculations, you are in control.\nTips and tricks:\n\nAssemble things in a data frame, the columns you group by will appear on their own.\ndeparse1(substitute(x)) creates a character string from the name of the object used as the argument x"
  },
  {
    "objectID": "lectures/tidy-data.html#the-broom-package",
    "href": "lectures/tidy-data.html#the-broom-package",
    "title": "Tidy data",
    "section": "The broom package",
    "text": "The broom package\n\nlibrary(broom)\n\nBroom provides a tidy function, which is a generic, it can be applied to lots of different objects:\n\nmethods(\"tidy\")\n\n  [1] tidy.aareg*                    tidy.acf*                     \n  [3] tidy.anova*                    tidy.aov*                     \n  [5] tidy.aovlist*                  tidy.Arima*                   \n  [7] tidy.betamfx*                  tidy.betareg*                 \n  [9] tidy.biglm*                    tidy.binDesign*               \n [11] tidy.binWidth*                 tidy.boot*                    \n [13] tidy.btergm*                   tidy.cch*                     \n [15] tidy.character*                tidy.cld*                     \n [17] tidy.clm*                      tidy.clmm*                    \n [19] tidy.coeftest*                 tidy.confint.glht*            \n [21] tidy.confusionMatrix*          tidy.coxph*                   \n [23] tidy.crr*                      tidy.cv.glmnet*               \n [25] tidy.data.frame*               tidy.default*                 \n [27] tidy.density*                  tidy.dist*                    \n [29] tidy.drc*                      tidy.durbinWatsonTest*        \n [31] tidy.emmGrid*                  tidy.epi.2by2*                \n [33] tidy.ergm*                     tidy.factanal*                \n [35] tidy.felm*                     tidy.fitdistr*                \n [37] tidy.fixest*                   tidy.ftable*                  \n [39] tidy.gam*                      tidy.Gam*                     \n [41] tidy.garch*                    tidy.geeglm*                  \n [43] tidy.glht*                     tidy.glm*                     \n [45] tidy.glmnet*                   tidy.glmrob*                  \n [47] tidy.glmRob*                   tidy.gmm*                     \n [49] tidy.htest*                    tidy.ivreg*                   \n [51] tidy.kappa*                    tidy.kde*                     \n [53] tidy.Kendall*                  tidy.kmeans*                  \n [55] tidy.lavaan*                   tidy.leveneTest*              \n [57] tidy.Line*                     tidy.Lines*                   \n [59] tidy.list*                     tidy.lm*                      \n [61] tidy.lm.beta*                  tidy.lmodel2*                 \n [63] tidy.lmrob*                    tidy.lmRob*                   \n [65] tidy.logical*                  tidy.logitmfx*                \n [67] tidy.lsmobj*                   tidy.manova*                  \n [69] tidy.map*                      tidy.margins*                 \n [71] tidy.Mclust*                   tidy.mediate*                 \n [73] tidy.mfx*                      tidy.mjoint*                  \n [75] tidy.mle2*                     tidy.mlm*                     \n [77] tidy.mlogit*                   tidy.muhaz*                   \n [79] tidy.multinom*                 tidy.negbin*                  \n [81] tidy.negbinmfx*                tidy.nlrq*                    \n [83] tidy.nls*                      tidy.NULL*                    \n [85] tidy.numeric*                  tidy.orcutt*                  \n [87] tidy.pairwise.htest*           tidy.pam*                     \n [89] tidy.plm*                      tidy.poissonmfx*              \n [91] tidy.poLCA*                    tidy.polr*                    \n [93] tidy.Polygon*                  tidy.Polygons*                \n [95] tidy.power.htest*              tidy.prcomp*                  \n [97] tidy.probitmfx*                tidy.pyears*                  \n [99] tidy.rcorr*                    tidy.ref.grid*                \n[101] tidy.regsubsets*               tidy.ridgelm*                 \n[103] tidy.rlm*                      tidy.rma*                     \n[105] tidy.roc*                      tidy.rq*                      \n[107] tidy.rqs*                      tidy.sarlm*                   \n[109] tidy.Sarlm*                    tidy.SpatialLinesDataFrame*   \n[111] tidy.SpatialPolygons*          tidy.SpatialPolygonsDataFrame*\n[113] tidy.spec*                     tidy.speedglm*                \n[115] tidy.speedlm*                  tidy.summary_emm*             \n[117] tidy.summary.glht*             tidy.summary.lm*              \n[119] tidy.summary.plm*              tidy.summaryDefault*          \n[121] tidy.survdiff*                 tidy.survexp*                 \n[123] tidy.survfit*                  tidy.survreg*                 \n[125] tidy.svyglm*                   tidy.svyolr*                  \n[127] tidy.systemfit*                tidy.table*                   \n[129] tidy.tobit*                    tidy.ts*                      \n[131] tidy.TukeyHSD*                 tidy.varest*                  \n[133] tidy.zoo*                     \nsee '?methods' for accessing help and source code\n\n\nIt attempts to do organize statistical output into a tidy tibble.\n\nlmfit &lt;- lm(flipper_length_mm ~ body_mass_g + species + sex, \n            data = penguins)\nlmfit\n\n\nCall:\nlm(formula = flipper_length_mm ~ body_mass_g + species + sex, \n    data = penguins)\n\nCoefficients:\n     (Intercept)       body_mass_g  speciesChinstrap     speciesGentoo  \n       164.58872           0.00655           5.54444          18.02132  \n         sexmale  \n         2.47772  \n\ntidy(lmfit)\n\n# A tibble: 5 × 5\n  term              estimate std.error statistic   p.value\n  &lt;chr&gt;                &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 (Intercept)      165.       3.18         51.7  1.01e-159\n2 body_mass_g        0.00655  0.000931      7.04 1.15e- 11\n3 speciesChinstrap   5.54     0.785         7.06 9.92e- 12\n4 speciesGentoo     18.0      1.44         12.5  1.46e- 29\n5 sexmale            2.48     0.854         2.90 3.97e-  3"
  },
  {
    "objectID": "lectures/tidy-data.html#more-functions-from-broom",
    "href": "lectures/tidy-data.html#more-functions-from-broom",
    "title": "Tidy data",
    "section": "More functions from broom",
    "text": "More functions from broom\ntidy returns data about the model coefficients, what about the other components of the model?\n\ntidy() summarizes information about model components\nglance() reports information about the entire model\naugment() adds information about observations to a dataset"
  },
  {
    "objectID": "lectures/tidy-data.html#benefits-of-tidy-statistical-output",
    "href": "lectures/tidy-data.html#benefits-of-tidy-statistical-output",
    "title": "Tidy data",
    "section": "Benefits of tidy statistical output",
    "text": "Benefits of tidy statistical output\nThe main reason for being tidy is to help with subsequent analysis and reporting. lmfit prints the necessary results, but look at tidy(lmfit).\n\nEasier to organize into a table or figure\nEasier to merge or append with results from different models\nPossibly easier to store/save the results"
  },
  {
    "objectID": "lectures/tidy-data.html#messy-data-example",
    "href": "lectures/tidy-data.html#messy-data-example",
    "title": "Tidy data",
    "section": "Messy data example",
    "text": "Messy data example\nReal data is often messy, and we want that to be tidy as well for easier analysis. Example of messy data:\n\nlibrary(tidyr)\nbillboard &lt;- tribble(\n  ~artist, ~wk1, ~wk2,\n   \"2 Pac\",     1,     2,\n   \"Creed\",     3,     4,\n   \"Mos Def\",     5,     6,\n  \"Aaliyah\", 2, NA\n)\nbillboard\n\n# A tibble: 4 × 3\n  artist    wk1   wk2\n  &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;\n1 2 Pac       1     2\n2 Creed       3     4\n3 Mos Def     5     6\n4 Aaliyah     2    NA\n\n\n\nA variable is encoded in columns (week)\nThis is also called “wide format”"
  },
  {
    "objectID": "lectures/tidy-data.html#pivoting-data",
    "href": "lectures/tidy-data.html#pivoting-data",
    "title": "Tidy data",
    "section": "Pivoting data",
    "text": "Pivoting data\nConverting from wide to long (tidyr package):\n\nbillboard |&gt; \n    pivot_longer(\n    cols = starts_with(\"wk\"), \n    names_to = \"week\", \n    values_to = \"rank\",\n    values_drop_na = TRUE\n  )\n\n# A tibble: 7 × 3\n  artist  week   rank\n  &lt;chr&gt;   &lt;chr&gt; &lt;dbl&gt;\n1 2 Pac   wk1       1\n2 2 Pac   wk2       2\n3 Creed   wk1       3\n4 Creed   wk2       4\n5 Mos Def wk1       5\n6 Mos Def wk2       6\n7 Aaliyah wk1       2\n\n\nBase R\n\nlongbb &lt;- as.data.frame(billboard) |&gt;\n  reshape(direction = \"long\", \n          varying = colnames(billboard)[-c(1)], \n          timevar = \"week\", sep = \"\",\n          v.names = \"rank\",\n          idvar = \"artist\")\nsubset(longbb, !is.na(rank))\n\n           artist week rank\n2 Pac.1     2 Pac    1    1\nCreed.1     Creed    1    3\nMos Def.1 Mos Def    1    5\nAaliyah.1 Aaliyah    1    2\n2 Pac.2     2 Pac    2    2\nCreed.2     Creed    2    4\nMos Def.2 Mos Def    2    6"
  },
  {
    "objectID": "lectures/tidy-data.html#melting-data.table-and-old-tidyverse",
    "href": "lectures/tidy-data.html#melting-data.table-and-old-tidyverse",
    "title": "Tidy data",
    "section": "Melting (data.table and old tidyverse)",
    "text": "Melting (data.table and old tidyverse)\n\nlibrary(data.table)\n\ndata.table(billboard) |&gt;\n  melt(measure.vars = patterns(\"^wk\"),\n       variable.name = \"week\", \n       value.name = \"rank\", \n       na.rm = TRUE)\n\n    artist week rank\n1:   2 Pac  wk1    1\n2:   Creed  wk1    3\n3: Mos Def  wk1    5\n4: Aaliyah  wk1    2\n5:   2 Pac  wk2    2\n6:   Creed  wk2    4\n7: Mos Def  wk2    6\n\n\nThis makes it easier to compute summary statistics, or make figures of ranks by artist.\nMost longitudinal data analyses will expect data in “long” format."
  },
  {
    "objectID": "lectures/tidy-data.html#pivoting-from-long-to-wide",
    "href": "lectures/tidy-data.html#pivoting-from-long-to-wide",
    "title": "Tidy data",
    "section": "Pivoting from long to wide",
    "text": "Pivoting from long to wide\nThis also has its uses. Examples include computing correlation matrices, doing derived variable analysis, and tables are often more readable in wide or partial wide format.\n\ndfw &lt;- tribble(\n  ~id, ~time, ~value,\n  \"A\", 1, 8.6,\n  \"A\", 3, 4.5,\n  \"B\", 1, 1.01,\n  \"B\", 2, 3.3, \n  \"C\", 1, 4.1,\n  \"C\", 2, 5.2,\n  \"C\", 3, 3.2\n)\n\ntidyr\n\ndfw |&gt; pivot_wider(names_from = \"time\", \n                   names_prefix = \"time\",\n                   values_from = \"value\")\n\n# A tibble: 3 × 4\n  id    time1 time3 time2\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 A      8.6    4.5  NA  \n2 B      1.01  NA     3.3\n3 C      4.1    3.2   5.2\n\n\nbase R\n\nas.data.frame(dfw) |&gt;\n  reshape(direction = \"wide\", \n          idvar = \"id\" ,\n          timevar = \"time\"\n          )\n\n  id value.1 value.3 value.2\n1  A    8.60     4.5      NA\n3  B    1.01      NA     3.3\n5  C    4.10     3.2     5.2\n\n\ndata.table\n\ndata.table(dfw) |&gt;\n  dcast(id ~ time, value.var = \"value\")\n\n   id    1   2   3\n1:  A 8.60  NA 4.5\n2:  B 1.01 3.3  NA\n3:  C 4.10 5.2 3.2"
  },
  {
    "objectID": "lectures/tidy-data.html#real-data",
    "href": "lectures/tidy-data.html#real-data",
    "title": "Tidy data",
    "section": "Real data",
    "text": "Real data\nAre often much more complex, and can be messier. Here is one example we will use in the lesson:\n\nlibrary(here)\nreadRDS(here(\"data\", \"lpr-ex.rds\")) |&gt; head(12)\n\n    pid  age sex      indat visit hdia diag1 diag2 diag3 diag4 diag5 diag6\n1  A001 72.5   f 2010-01-27     1 H560  B632  H180  J050  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;\n2  A001 72.5   f 2010-06-26     2 C871  D422  K820  A602  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;\n3  A001 72.5   f 2010-07-20     3 C040  B710  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;\n4  A001 72.5   f 2011-03-06     4 F412  F381  F632  E832  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;\n5  A001 72.5   f 2011-12-23     5 F622  J720  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;\n6  A002 81.5   f 2005-09-02     1 B481  K512  F750  K059  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;\n7  A002 81.5   f 2008-05-05     2 K959  G959  E252  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;\n8  A002 81.5   f 2012-07-05     3 G902  D939  K329  G402  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;\n9  A003 54.5   m 2006-07-30     1 E841  A062  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;\n10 A003 54.5   m 2007-04-09     2 E071  J602  J490  J839  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;\n11 A003 54.5   m 2008-03-14     3 H189  B752  B190  C751  I610  &lt;NA&gt;  &lt;NA&gt;\n12 A003 54.5   m 2010-08-24     4 B090  I992  D021  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;"
  },
  {
    "objectID": "lectures/tidy-data.html#practical",
    "href": "lectures/tidy-data.html#practical",
    "title": "Tidy data",
    "section": "Practical",
    "text": "Practical\nWe will practice creating tidy data continuing with our mean sd function, and using the register data example to practice pivoting and doing grouped analyses.\nLink to lesson\nLink home"
  },
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "Resources and tools about R",
    "section": "",
    "text": "Data"
  },
  {
    "objectID": "resources.html#data-used-in-lessons",
    "href": "resources.html#data-used-in-lessons",
    "title": "Resources and tools about R",
    "section": "",
    "text": "Data"
  },
  {
    "objectID": "resources.html#references-mentioned-in-lectures",
    "href": "resources.html#references-mentioned-in-lectures",
    "title": "Resources and tools about R",
    "section": "References mentioned in lectures",
    "text": "References mentioned in lectures\n\nTidy Data, Hadley Wickham, 2014, JSS\nLiterate Programming, Donald Knuth, 1992\nA Layered Grammar of Graphics, 2010, JCGS"
  },
  {
    "objectID": "resources.html#cheatsheets",
    "href": "resources.html#cheatsheets",
    "title": "Resources and tools about R",
    "section": "Cheatsheets",
    "text": "Cheatsheets\nLong list of cheatsheets:\nhttps://www.rstudio.com/resources/cheatsheets/\n\nCurated list of cheatsheets\n\nBase R\nUsing Rstudio\nData manipulation with dplyr\nData manipulation with data.table\nStrings and regular expressions\nDates and times\nRmarkdown and dynamic documents"
  },
  {
    "objectID": "resources.html#online-books",
    "href": "resources.html#online-books",
    "title": "Resources and tools about R",
    "section": "Online books",
    "text": "Online books\n\nIntroductory\n\nIntroduction to R, by the R core team\nIntroduction to R, by Susanne Rosthøj\n\n\n\nData analysis\n\nR for Data Science, by Hadley Wickham and Garret Grolemund\nStatistical Inference via Data Science, by Chester Ismay and Albert Y. Kim\n\n\n\nProgramming\n\nHands-On Programming with R, by Garrett Grolemund\nAdvanced R, by Hadley Wickham\n\n\n\nGraphics and dynamic documents\n\nR Graphics Cookbook, 2nd edition, by Winston Chang\nR Markdown: The Definitive Guide, by Yihui Xie, J. J. Allaire, Garrett Grolemund\nR Markdown Cookbook, by Yihui Xie, Christophe Dervieux, Emily Riederer"
  },
  {
    "objectID": "resources.html#solutions-to-exercises",
    "href": "resources.html#solutions-to-exercises",
    "title": "Resources and tools about R",
    "section": "Solutions to exercises",
    "text": "Solutions to exercises\nLink to solutions"
  }
]