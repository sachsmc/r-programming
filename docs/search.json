[
  {
    "objectID": "lectures/projects.html#why",
    "href": "lectures/projects.html#why",
    "title": "Project organization and workflow",
    "section": "Why?",
    "text": "Why?\nSee the UCPH Policy for Research Data Management"
  },
  {
    "objectID": "lectures/projects.html#set-up-projects",
    "href": "lectures/projects.html#set-up-projects",
    "title": "Project organization and workflow",
    "section": "Set up projects",
    "text": "Set up projects\nQuick review of the file system\n\nFile system discipline: put all the files related to a single project in a designated folder.\n\nThis applies to data, code, figures, notes, etc.\nDepending on project complexity, you might enforce further organization into subfolders.\n\nTools to facilitate this\n\nProjectTemplate package\nSeveral other packages: CRAN task view on Reproducible Research\nMake your own template structure and copy-paste"
  },
  {
    "objectID": "lectures/projects.html#the-importance-of-readme",
    "href": "lectures/projects.html#the-importance-of-readme",
    "title": "Project organization and workflow",
    "section": "The importance of README",
    "text": "The importance of README\n\nAlways include a README.txt or .md file at the root of the project\nPlan, Document, Share, and Preserve\nTo include: what and how:\n\nTitle of the project\nWhen it was last updated\nWhat is included in the project directory\nHow to run the analysis and use the results (including what dependencies are needed)\nA license describing the conditions of use\n\n\nExample 1 Example 2"
  },
  {
    "objectID": "lectures/projects.html#an-example-project-structure",
    "href": "lectures/projects.html#an-example-project-structure",
    "title": "Project organization and workflow",
    "section": "An example project structure",
    "text": "An example project structure\n\n\nexample-project\n\n\n-- code\n   |__01-process-data.R\n   |__02-primary-analysis.R\n   |__03-sensitivity-analysis.R\n   |__project-report.Rmd\n-- data\n   |__merge-analysis-dataset.rds\n-- documents\n   |__background.docx\n   |__protocol.docx\n-- output\n   |__Figure1.png\n   |__Figure2.png\n   |__Table1.rds\n-- rawdata\n   |__lisa-2012-full.csv\n   |__lisa-2013-full.csv\n   |__lisa-2014-full.csv\n   |__lisa-2015-full.csv\n-- README.md"
  },
  {
    "objectID": "lectures/projects.html#r-session-and-the-working-directory",
    "href": "lectures/projects.html#r-session-and-the-working-directory",
    "title": "Project organization and workflow",
    "section": "R session and the working directory",
    "text": "R session and the working directory\n\ngetwd()\n\n[1] \"/home/sachsmc/Teaching/Courses/r-programming/lectures\"\n\nlist.dirs(\".\", recursive = FALSE)\n\ncharacter(0)\n\nlist.dirs(\"..\", recursive = FALSE)\n\n[1] \"../.git\"              \"../.quarto\"           \"../.Rproj.user\"      \n[4] \"../docs\"              \"../example-project\"   \"../exercises\"        \n[7] \"../lectures\"          \"../penguins-analysis\"\n\n\n\nThe R session runs in the current working directory\nInput and output happens relative to that directory\n\".\" means “this directory”\n\"..\" means “the directory that this one is contained in”"
  },
  {
    "objectID": "lectures/projects.html#navigating-the-directory-from-r",
    "href": "lectures/projects.html#navigating-the-directory-from-r",
    "title": "Project organization and workflow",
    "section": "Navigating the directory from R",
    "text": "Navigating the directory from R\nCompose directories and files with file.path (it is safe and works in any OS)\n\nread.csv(file.path(\"..\", \"rawdata\", \"lisa-2012-full.csv\"))\nwrite.csv(analysis_file, file.path(\"..\", \"data\", \"analysis-data.rds\"))"
  },
  {
    "objectID": "lectures/projects.html#the-here-package",
    "href": "lectures/projects.html#the-here-package",
    "title": "Project organization and workflow",
    "section": "The here package",
    "text": "The here package\n\nlibrary(here)\n\nread.csv(here(\"rawdata\", \"lisa-2012-full.csv\"))\nwrite.csv(analysis_file, here(\"data\", \"analysis-data.rds\"))\n\nThe first line figures out the root of your project directory: is there an .Rproj or .here file there?\nThen, here allows you to build paths to subdirectories, starting from the project root.\nUse this in your scripts, and everything will run nicely, both interactively and programmatically, no matter what your working directory is (as long as it is in the project)."
  },
  {
    "objectID": "lectures/projects.html#what",
    "href": "lectures/projects.html#what",
    "title": "Project organization and workflow",
    "section": "What?",
    "text": "What?\nPersonal taste and habits (“workflow”) versus the logic and output that is the essence of your project (“product”)\n\nThe naming/specific structure of your project directory.\nThe editor you use to write your R code."
  },
  {
    "objectID": "lectures/projects.html#get-comfortable",
    "href": "lectures/projects.html#get-comfortable",
    "title": "Project organization and workflow",
    "section": "Get comfortable",
    "text": "Get comfortable\nYour workflow does not matter, as long as you follow the principles.\nOptions for IDEs (all free):\n\nRstudio\nVScode\nemacs\n\nAll of these support projects, have integrated help files, code completion, and syntax highlighting."
  },
  {
    "objectID": "lectures/projects.html#setting-the-working-directory",
    "href": "lectures/projects.html#setting-the-working-directory",
    "title": "Project organization and workflow",
    "section": "Setting the working directory",
    "text": "Setting the working directory\n\nOpen the .Rproj file in a fresh R/Rstudio session\nOpen an .R file in a new session\nUse the drop down menu in Rstudio: Session > Set working directory\nUse setwd() in the terminal\n\nAvoid using setwd() in scripts"
  },
  {
    "objectID": "lectures/projects.html#bad-vs-good-habits",
    "href": "lectures/projects.html#bad-vs-good-habits",
    "title": "Project organization and workflow",
    "section": "Bad vs good habits",
    "text": "Bad vs good habits\nDo not:\n\nuse setwd() in scripts\nrely on rm(list = ls())\nsave .RData when you quit R and don’t load .RData when you launch R.\n\nDo:\n\nRestart your R session frequently while working\nSet the working directory on launch or interactively\nUse relative paths, or here if your project directory is complex"
  },
  {
    "objectID": "lectures/projects.html#practical",
    "href": "lectures/projects.html#practical",
    "title": "Project organization and workflow",
    "section": "Practical",
    "text": "Practical\n\nCreate a toy project using your favorite tools\nSwap projects with your neighbor\nSee if you can reproduce each others results\n\nLink to lesson\nLink home"
  },
  {
    "objectID": "lectures/functions.html#a-function-and-its-components",
    "href": "lectures/functions.html#a-function-and-its-components",
    "title": "Functions",
    "section": "A function and its components",
    "text": "A function and its components\nAlmost everything you do in R involves functions. You call a function by typing its name with its arguments (inputs) inside the parentheses:\n\nsample(x = 1:5, size = 2)\n\n[1] 5 1\n\n\nThe function takes the arguments you provide, does something, and then returns an object. To see what a function does, you can type its name without parentheses to see the source:\n\nsample\n\nfunction (x, size, replace = FALSE, prob = NULL) \n{\n    if (length(x) == 1L && is.numeric(x) && is.finite(x) && x >= \n        1) {\n        if (missing(size)) \n            size <- x\n        sample.int(x, size, replace, prob)\n    }\n    else {\n        if (missing(size)) \n            size <- length(x)\n        x[sample.int(length(x), size, replace, prob)]\n    }\n}\n<bytecode: 0x55754fb81370>\n<environment: namespace:base>\n\n\nThe source shows you the arguments, their default values, and the expression defining the function. You can also look at the help file for the documentation:\n\nhelp(\"sample\")\n# or\n?sample"
  },
  {
    "objectID": "lectures/functions.html#using-functions-arguments",
    "href": "lectures/functions.html#using-functions-arguments",
    "title": "Functions",
    "section": "Using functions – arguments",
    "text": "Using functions – arguments\nFunctions can have 0 or more arguments, with or without defaults.\nThe arguments can be given in order, or by name\n\nset.seed(100)\nsample(1:5, 2, FALSE)\n\n[1] 2 3\n\n## same as\nset.seed(100)\nsample(size = 2, replace = FALSE, x = 1:5)\n\n[1] 2 3\n\n\nNames can be partially matched, which can be confusing:\n\nset.seed(100)\nsample(si = 2, re = FALSE, x = 1:5)\n\n[1] 2 3"
  },
  {
    "objectID": "lectures/functions.html#the-ellipsis-argument",
    "href": "lectures/functions.html#the-ellipsis-argument",
    "title": "Functions",
    "section": "The ellipsis argument",
    "text": "The ellipsis argument\nSome functions take ... as an argument, e.g., paste, list, also the apply family.\nThere are 2 reasons for this:\n\nThere could be varying numbers of arguments\n\n\nc(1, 2, 3)\n\n[1] 1 2 3\n\n##\nc(1, 2)\n\n[1] 1 2\n\n\n\nTo pass optional arguments to other functions\n\n\nlibrary(palmerpenguins)\nsummary(penguins)\n\n      species          island    bill_length_mm  bill_depth_mm  \n Adelie   :152   Biscoe   :168   Min.   :32.10   Min.   :13.10  \n Chinstrap: 68   Dream    :124   1st Qu.:39.23   1st Qu.:15.60  \n Gentoo   :124   Torgersen: 52   Median :44.45   Median :17.30  \n                                 Mean   :43.92   Mean   :17.15  \n                                 3rd Qu.:48.50   3rd Qu.:18.70  \n                                 Max.   :59.60   Max.   :21.50  \n                                 NA's   :2       NA's   :2      \n flipper_length_mm  body_mass_g       sex           year     \n Min.   :172.0     Min.   :2700   female:165   Min.   :2007  \n 1st Qu.:190.0     1st Qu.:3550   male  :168   1st Qu.:2007  \n Median :197.0     Median :4050   NA's  : 11   Median :2008  \n Mean   :200.9     Mean   :4202                Mean   :2008  \n 3rd Qu.:213.0     3rd Qu.:4750                3rd Qu.:2009  \n Max.   :231.0     Max.   :6300                Max.   :2009  \n NA's   :2         NA's   :2                                 \n\n## digits gets passed to \"format\"\nsummary(penguins, digits = 1)\n\n      species          island    bill_length_mm bill_depth_mm flipper_length_mm\n Adelie   :152   Biscoe   :168   Min.   :32     Min.   :13    Min.   :172      \n Chinstrap: 68   Dream    :124   1st Qu.:39     1st Qu.:16    1st Qu.:190      \n Gentoo   :124   Torgersen: 52   Median :44     Median :17    Median :197      \n                                 Mean   :44     Mean   :17    Mean   :201      \n                                 3rd Qu.:48     3rd Qu.:19    3rd Qu.:213      \n                                 Max.   :60     Max.   :22    Max.   :231      \n                                 NA's   :2      NA's   :2     NA's   :2        \n  body_mass_g       sex           year     \n Min.   :2700   female:165   Min.   :2007  \n 1st Qu.:3550   male  :168   1st Qu.:2007  \n Median :4050   NA's  : 11   Median :2008  \n Mean   :4202                Mean   :2008  \n 3rd Qu.:4750                3rd Qu.:2009  \n Max.   :6300                Max.   :2009  \n NA's   :2"
  },
  {
    "objectID": "lectures/functions.html#using-functions-composition",
    "href": "lectures/functions.html#using-functions-composition",
    "title": "Functions",
    "section": "Using functions – composition",
    "text": "Using functions – composition\nOften we want to use the result of one function as the argument to another function. There are many ways to do this:\n\nIntermediate variables\n\n\nset.seed(100)\nx <- rgamma(100, shape = 1, rate = 2)\nlogx <- log(x)\nstdlogx <- scale(logx)\nquantile(stdlogx, c(.25, .75))\n\n       25%        75% \n-0.3425622  0.5746209 \n\n\n\nNested function calls\n\n\nquantile(scale(log(x)), c(.25, .75))\n\n       25%        75% \n-0.3425622  0.5746209 \n\n\n\nThe pipe operator |> (available in R 4.0.1)\n\n\nx |> log() |> scale() |> quantile(c(.25, .75))\n\n       25%        75% \n-0.3425622  0.5746209"
  },
  {
    "objectID": "lectures/functions.html#using-functions-the-apply-family",
    "href": "lectures/functions.html#using-functions-the-apply-family",
    "title": "Functions",
    "section": "Using functions – the apply family",
    "text": "Using functions – the apply family\nSome functions will take other functions as arguments. An example is the apply family of functions, which applies a function over an index or iterator. See help(apply)\napply repeated applies a function over the dimensions of an array. MARGIN indicates which dimension, and then for each index in that dimension, it applies FUN to the sub-array\n\nM1 <- matrix(rnorm(1000), nrow = 100, ncol = 10)\ncolnames(M1) <- paste0(\"X\", 1:10)\napply(M1, MARGIN = 2, FUN = median)\n\n         X1          X2          X3          X4          X5          X6 \n 0.04874658  0.01365005  0.16552784  0.17273307 -0.14850050  0.21945219 \n         X7          X8          X9         X10 \n-0.23723207 -0.26703323 -0.07315224  0.01336232"
  },
  {
    "objectID": "lectures/functions.html#apply-continued",
    "href": "lectures/functions.html#apply-continued",
    "title": "Functions",
    "section": "Apply continued",
    "text": "Apply continued\ntapply is commonly used with data. It subsets the data X based on the INDEX argument, then applies a function to each subset:\n\nlibrary(palmerpenguins)\ntapply(X = penguins$bill_depth_mm, INDEX = penguins$species, \n       FUN = mean)\n\n   Adelie Chinstrap    Gentoo \n       NA  18.42059        NA \n\n\nlapply is more general, in that it can take any index and apply any function that takes the index as an argument. It always returns a list.\n\nlapply(split(penguins$bill_depth_mm, penguins$species), \n       FUN = mean)\n\n$Adelie\n[1] NA\n\n$Chinstrap\n[1] 18.42059\n\n$Gentoo\n[1] NA"
  },
  {
    "objectID": "lectures/functions.html#notes-on-speed-and-flexibility",
    "href": "lectures/functions.html#notes-on-speed-and-flexibility",
    "title": "Functions",
    "section": "Notes on speed and flexibility",
    "text": "Notes on speed and flexibility\nThe apply family of functions is computationally equivalent to a loop (with pre-allocation)\nUsing apply instead of a for loop will not be faster computationally\nIt may be faster to write, but it may also be much harder to understand\nYou can do whatever you want inside a for loop, how would you do something more complex with lapply?"
  },
  {
    "objectID": "lectures/functions.html#a-simple-function",
    "href": "lectures/functions.html#a-simple-function",
    "title": "Functions",
    "section": "A simple function",
    "text": "A simple function\n\nhello <- function() {\n  \n  \"Hello\"\n  \n}\n\nhello()\n\n[1] \"Hello\""
  },
  {
    "objectID": "lectures/functions.html#a-function-with-arguments",
    "href": "lectures/functions.html#a-function-with-arguments",
    "title": "Functions",
    "section": "A function with arguments",
    "text": "A function with arguments\n\nhello <- function(name) {\n  \n  paste(\"Hello\", name)\n  \n}\nhello(\"Jim\")\n\n[1] \"Hello Jim\"\n\nlapply(c(\"Jim\", \"Heather\", \"Bob\"), hello)\n\n[[1]]\n[1] \"Hello Jim\"\n\n[[2]]\n[1] \"Hello Heather\"\n\n[[3]]\n[1] \"Hello Bob\""
  },
  {
    "objectID": "lectures/functions.html#local-variables-and-scoping",
    "href": "lectures/functions.html#local-variables-and-scoping",
    "title": "Functions",
    "section": "Local variables and scoping",
    "text": "Local variables and scoping\n\nhello <- function(name) {\n  \n  name2 <- \"Mike\"\n  paste(\"Hello\", name, \"meet\", name2)\n  \n}\nhello(\"Jim\")\n\n[1] \"Hello Jim meet Mike\"\n\nname2\n\nError in eval(expr, envir, enclos): object 'name2' not found\n\n\nname2 is a local variable. It exists only inside the function.\n\nname2 <- \"Billie\"\nhello(\"Jim\")\n\n[1] \"Hello Jim meet Mike\"\n\n\nModifying local variables outside the function has no effect. But be careful:\n\nhello2 <- function(name) {\n  \n  paste(\"Hello\", name, \"meet\", name2)\n  \n}\nhello2(\"Jim\")\n\n[1] \"Hello Jim meet Billie\""
  },
  {
    "objectID": "lectures/functions.html#lexical-scoping",
    "href": "lectures/functions.html#lexical-scoping",
    "title": "Functions",
    "section": "Lexical scoping",
    "text": "Lexical scoping\nThis is called lexical scoping: it means how does R look for objects when they are referred to by name?\nIf R sees a variable and needs to use it inside a function, it follows these rules to find the object with that name:\n\nLook in the current function environment first.\nIf not found, look in the environment where the function was called.\nIf not found, look in the global environment.\nFinally, look in the loaded packages.\n\nNote the specification sees a variable and needs to use it. This is called lazy evaluation: R does not evaluate anything until it needs to use it"
  },
  {
    "objectID": "lectures/functions.html#lexical-scoping-example",
    "href": "lectures/functions.html#lexical-scoping-example",
    "title": "Functions",
    "section": "Lexical scoping example",
    "text": "Lexical scoping example\nThis can be used to your advantage, e.g.,\n\nleast_squares <- function(beta) {\n  \n  sum((penguins$flipper_length_mm - \n          (beta[1] + beta[2] * penguins$body_mass_g))^2, na.rm  =TRUE)\n  \n}\n\noptim(par = c(0,0), fn = least_squares)\n\n$par\n[1] 136.74979325   0.01527274\n\n$value\n[1] 16250.32\n\n$counts\nfunction gradient \n     113       NA \n\n$convergence\n[1] 0\n\n$message\nNULL"
  },
  {
    "objectID": "lectures/functions.html#lazy-evaluation-example",
    "href": "lectures/functions.html#lazy-evaluation-example",
    "title": "Functions",
    "section": "Lazy evaluation example",
    "text": "Lazy evaluation example\n\nh01 <- function(x) {\n    \n    \"Hello world!\"\n    \n}\nh01()\n\n[1] \"Hello world!\"\n\nh01(stop(\"Error\"))\n\n[1] \"Hello world!\"\n\n\nOne way to manually check for arguments is with missing:\n\nh02 <- function(x) {\n    \n    if(missing(x)) {\n        return(\"Missing x!\")\n    }\n    \"Hello world!\"\n    \n}\n\nh02()\n\n[1] \"Missing x!\"\n\nh02(1)\n\n[1] \"Hello world!\""
  },
  {
    "objectID": "lectures/functions.html#anonymous-functions",
    "href": "lectures/functions.html#anonymous-functions",
    "title": "Functions",
    "section": "Anonymous functions",
    "text": "Anonymous functions\nYour own functions do not need to be saved and assigned names. If a function does not have a name it is anonymous, I use these often with the apply family:\n\nbootmeans <- sapply(1:1000, function(i) {\n  \n  sample(penguins$body_mass_g, replace = TRUE) |>\n    mean(na.rm = TRUE)\n\n})\nsummary(bootmeans)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   4053    4176    4203    4204    4230    4327 \n\n\nSince R 4.0.1, \\() can be used as shorthand for function():\n\nbootmeans <- sapply(1:1000, \\(i) {\n  \n   sample(penguins$body_mass_g, replace = TRUE) |>\n    mean(na.rm = TRUE)\n  \n})\nsummary(bootmeans)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   4080    4173    4201    4201    4228    4357"
  },
  {
    "objectID": "lectures/functions.html#operators",
    "href": "lectures/functions.html#operators",
    "title": "Functions",
    "section": "Operators",
    "text": "Operators\nOperators are symbols like +, <-, %*%, [.\nThese are functions! To treat them like functions instead of operators, use backticks:\n\n2 + 2\n\n[1] 4\n\n`+`(2, 2)\n\n[1] 4\n\n\nYou can then treat operators as you would any other function, using them in apply or otherwise\nYou can also define your own operators:\n\n`% %` <- function(a, b) {\n    \n    paste(a, b)\n    \n}\n\n\"my\" % % \"name\"\n\n[1] \"my name\"\n\n\"my\" % % \"name\" % % \"is\" % % \"Mike\"\n\n[1] \"my name is Mike\"\n\n\nAssignment operators have a special syntax:\n\n`second<-` <- function(x, value){\n    \n    x[2] <- value\n    x\n    \n}\n\nx <- 1:10\nsecond(x) <- 11\nx\n\n [1]  1 11  3  4  5  6  7  8  9 10"
  },
  {
    "objectID": "lectures/functions.html#generic-methodsfunctions",
    "href": "lectures/functions.html#generic-methodsfunctions",
    "title": "Functions",
    "section": "Generic methods/functions",
    "text": "Generic methods/functions\nLook at the function print\n\nprint\n\nfunction (x, ...) \nUseMethod(\"print\")\n<bytecode: 0x55754edbcca8>\n<environment: namespace:base>\n\n\nIt is a generic function. UseMethod says depending on the class of argument object, R will call a suitable method (a function) that does something designed for whatever object is.\nYou can find all the special methods by running methods(\"print\") (try it now).\nThe class of the object is a simple attribute and the method is defined by appending the class name after the function name separated by a dot. This is called the S3 class system:\n\nx <- 1:4\nclass(x)\n\n[1] \"integer\"\n\nclass(x) <- \"myclass\"\n\ninherits(x, \"myclass\")\n\n[1] TRUE\n\nprint.myclass <- function(x, ...) {\n  \n  cat(x, sep = \"\\n\")\n  \n}\n\nx\n\n1\n2\n3\n4"
  },
  {
    "objectID": "lectures/functions.html#summary",
    "href": "lectures/functions.html#summary",
    "title": "Functions",
    "section": "Summary",
    "text": "Summary\nIn R, everything that happens is due to a function, and everything that exists is an object. Functions themselves are objects.\nHow do functions work together? We can classify functions according to their inputs and outputs:\n\n\n\nInput/Output\nData\nFunction\n\n\n\n\nData\nRegular function\nFunction factory\n\n\nFunction\nFunctional\nFunction operator\n\n\n\nThese concepts are loosely defined, because functions can take both data and function arguments and return data and function results."
  },
  {
    "objectID": "lectures/functions.html#practical",
    "href": "lectures/functions.html#practical",
    "title": "Functions",
    "section": "Practical",
    "text": "Practical\n\nModify and write functions\nUse apply to iterate functions over data\nWrite your own class and generic print function\n\nLink to lesson\nLink home"
  },
  {
    "objectID": "lectures/data-structures.html#overview",
    "href": "lectures/data-structures.html#overview",
    "title": "Data structures in R",
    "section": "Overview",
    "text": "Overview\n\nR is a programming language, most often used to work with data\nI use the term ‘data’ loosely, can refer to\n\ndata to be analyzed\nresults from a data analysis\ninformation used in an analysis (e.g., ICD diagnosis codes)\n\nThink carefully about organizing your data structures"
  },
  {
    "objectID": "lectures/data-structures.html#types-of-data",
    "href": "lectures/data-structures.html#types-of-data",
    "title": "Data structures in R",
    "section": "Types of data",
    "text": "Types of data\nlogical, numeric, character, factor, date, …\n\nTRUE\n\n[1] TRUE\n\n1.2\n\n[1] 1.2\n\n\"hello\"\n\n[1] \"hello\"\n\nfactor(\"low\", levels = c(\"low\", \"med\", \"high\"))\n\n[1] low\nLevels: low med high\n\nas.Date(\"2022-05-11\", format = \"%Y-%m-%d\")\n\n[1] \"2022-05-11\"\n\nNULL\n\nNULL"
  },
  {
    "objectID": "lectures/data-structures.html#vectors",
    "href": "lectures/data-structures.html#vectors",
    "title": "Data structures in R",
    "section": "Vectors",
    "text": "Vectors\nA one dimensional collection of data with the same type. Can be named or unnamed. Can be created in many ways:\n\n1:4\n\n[1] 1 2 3 4\n\nseq(1, 4, by = 1)\n\n[1] 1 2 3 4\n\nletters\n\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n\nrep(TRUE, times = 5)\n\n[1] TRUE TRUE TRUE TRUE TRUE\n\nx <- 1:4\nnames(x) <- c(\"a\", \"b\", \"c\", \"d\")\nx\n\na b c d \n1 2 3 4"
  },
  {
    "objectID": "lectures/data-structures.html#missing-and-emptynull-values",
    "href": "lectures/data-structures.html#missing-and-emptynull-values",
    "title": "Data structures in R",
    "section": "Missing and empty/null values",
    "text": "Missing and empty/null values\nNA for missing, and note that this has a data type.\nNaN for “not a number”, e.g., 0 / 0\nNULL is empty, and has 0 length\n\nc(NA, 1) ## different from the next line\n\n[1] NA  1\n\nc(NA, \"a\")\n\n[1] NA  \"a\"\n\nc(NULL, \"a\")\n\n[1] \"a\"\n\nlist(NULL, NULL, 1:3)\n\n[[1]]\nNULL\n\n[[2]]\nNULL\n\n[[3]]\n[1] 1 2 3"
  },
  {
    "objectID": "lectures/data-structures.html#indexing-vectors",
    "href": "lectures/data-structures.html#indexing-vectors",
    "title": "Data structures in R",
    "section": "Indexing vectors",
    "text": "Indexing vectors\nSubsequences of vectors are obtained with square brackets []\nInside the square brackets goes the index, which can be itself a vector of numbers, logicals, or characters (if the vector is named)\n\nx <- 1:6\nnames(x) <- c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")\n\nx[c(1, 3, 5)]\n\na c e \n1 3 5 \n\nx[-c(2, 4, 6)] # negative index only works for numeric\n\na c e \n1 3 5 \n\nx[c(TRUE, FALSE, TRUE, FALSE, TRUE, FALSE)]\n\na c e \n1 3 5 \n\nx[(x %% 2) == 1]\n\na c e \n1 3 5 \n\nx[(x %% 2) != 0]\n\na c e \n1 3 5 \n\nx[c(\"a\", \"c\", \"d\")]\n\na c d \n1 3 4"
  },
  {
    "objectID": "lectures/data-structures.html#lists",
    "href": "lectures/data-structures.html#lists",
    "title": "Data structures in R",
    "section": "Lists",
    "text": "Lists\nA list is a collection of things not required to be the same type. An element of a list can be any R object. Can also be named or not.\n\nlist(1:4, letters[1:4], mean)\n\n[[1]]\n[1] 1 2 3 4\n\n[[2]]\n[1] \"a\" \"b\" \"c\" \"d\"\n\n[[3]]\nfunction (x, ...) \nUseMethod(\"mean\")\n<bytecode: 0x560f0ab478f0>\n<environment: namespace:base>\n\nlist(numbers = 1:4, \n     letters = letters[1:4], \n     mean = mean,\n     list = list(\"a\", 1, TRUE))\n\n$numbers\n[1] 1 2 3 4\n\n$letters\n[1] \"a\" \"b\" \"c\" \"d\"\n\n$mean\nfunction (x, ...) \nUseMethod(\"mean\")\n<bytecode: 0x560f0ab478f0>\n<environment: namespace:base>\n\n$list\n$list[[1]]\n[1] \"a\"\n\n$list[[2]]\n[1] 1\n\n$list[[3]]\n[1] TRUE\n\n## an empty list\nlist()\n\nlist()\n\n## a list of 3 placeholders\nvector(mode = \"list\", length = 3)\n\n[[1]]\nNULL\n\n[[2]]\nNULL\n\n[[3]]\nNULL"
  },
  {
    "objectID": "lectures/data-structures.html#indexing-lists",
    "href": "lectures/data-structures.html#indexing-lists",
    "title": "Data structures in R",
    "section": "Indexing lists",
    "text": "Indexing lists\n\nxl <- list(numbers = 1:4, \n     letters = letters[1:4], \n     mean = mean,\n     list = list(\"a\", 1, TRUE))\n\nA list can be indexed with square brackets [] or double-square brackets [[]], but there is a difference!\n\nxl[[1]] ## returns the first element of the list (vector in this case)\n\n[1] 1 2 3 4\n\nxl[1] ## returns a sublist\n\n$numbers\n[1] 1 2 3 4\n\nxl[-1]\n\n$letters\n[1] \"a\" \"b\" \"c\" \"d\"\n\n$mean\nfunction (x, ...) \nUseMethod(\"mean\")\n<bytecode: 0x560f0ab478f0>\n<environment: namespace:base>\n\n$list\n$list[[1]]\n[1] \"a\"\n\n$list[[2]]\n[1] 1\n\n$list[[3]]\n[1] TRUE\n\nxl[1:2] ## works with vectors\n\n$numbers\n[1] 1 2 3 4\n\n$letters\n[1] \"a\" \"b\" \"c\" \"d\"\n\nxl[[1:2]] ## works but does something different\n\n[1] 2\n\nxl$numbers\n\n[1] 1 2 3 4\n\nxl[[\"numbers\"]]\n\n[1] 1 2 3 4"
  },
  {
    "objectID": "lectures/data-structures.html#concatenating-lists",
    "href": "lectures/data-structures.html#concatenating-lists",
    "title": "Data structures in R",
    "section": "Concatenating lists",
    "text": "Concatenating lists\nNew elements can be added by name or number\n\nxl$LETTERS <- LETTERS[1:4]\nxl[[length(xl) + 1]] <- LETTERS[1:5]\nxl\n\n$numbers\n[1] 1 2 3 4\n\n$letters\n[1] \"a\" \"b\" \"c\" \"d\"\n\n$mean\nfunction (x, ...) \nUseMethod(\"mean\")\n<bytecode: 0x560f0ab478f0>\n<environment: namespace:base>\n\n$list\n$list[[1]]\n[1] \"a\"\n\n$list[[2]]\n[1] 1\n\n$list[[3]]\n[1] TRUE\n\n\n$LETTERS\n[1] \"A\" \"B\" \"C\" \"D\"\n\n[[6]]\n[1] \"A\" \"B\" \"C\" \"D\" \"E\"\n\n\nThe c function concatenates new elements to the list\n\nc(xl, AB = list(LETTERS[1:2]))\n\n$numbers\n[1] 1 2 3 4\n\n$letters\n[1] \"a\" \"b\" \"c\" \"d\"\n\n$mean\nfunction (x, ...) \nUseMethod(\"mean\")\n<bytecode: 0x560f0ab478f0>\n<environment: namespace:base>\n\n$list\n$list[[1]]\n[1] \"a\"\n\n$list[[2]]\n[1] 1\n\n$list[[3]]\n[1] TRUE\n\n\n$LETTERS\n[1] \"A\" \"B\" \"C\" \"D\"\n\n[[6]]\n[1] \"A\" \"B\" \"C\" \"D\" \"E\"\n\n$AB\n[1] \"A\" \"B\"\n\nc(xl, AB = LETTERS[1:2]) # careful!\n\n$numbers\n[1] 1 2 3 4\n\n$letters\n[1] \"a\" \"b\" \"c\" \"d\"\n\n$mean\nfunction (x, ...) \nUseMethod(\"mean\")\n<bytecode: 0x560f0ab478f0>\n<environment: namespace:base>\n\n$list\n$list[[1]]\n[1] \"a\"\n\n$list[[2]]\n[1] 1\n\n$list[[3]]\n[1] TRUE\n\n\n$LETTERS\n[1] \"A\" \"B\" \"C\" \"D\"\n\n[[6]]\n[1] \"A\" \"B\" \"C\" \"D\" \"E\"\n\n$AB1\n[1] \"A\"\n\n$AB2\n[1] \"B\""
  },
  {
    "objectID": "lectures/data-structures.html#matrices",
    "href": "lectures/data-structures.html#matrices",
    "title": "Data structures in R",
    "section": "Matrices",
    "text": "Matrices\nJust like in math, R matrices are like vectors that have 2 dimensions, and are indexed also by square brackets.\nThere are lots of matrix manipulation functions in base R\n\nM1 <- matrix(1:12, nrow = 3, ncol = 4)\nM1\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    4    7   10\n[2,]    2    5    8   11\n[3,]    3    6    9   12\n\nM2 <- matrix(1:12, nrow = 3, ncol = 4, \n       dimnames = list(letters[1:3], LETTERS[1:4]))\nM2\n\n  A B C  D\na 1 4 7 10\nb 2 5 8 11\nc 3 6 9 12\n\ndiag(M1)\n\n[1] 1 5 9\n\nlower.tri(M1)\n\n      [,1]  [,2]  [,3]  [,4]\n[1,] FALSE FALSE FALSE FALSE\n[2,]  TRUE FALSE FALSE FALSE\n[3,]  TRUE  TRUE FALSE FALSE\n\nrow(M1)\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    1    1    1\n[2,]    2    2    2    2\n[3,]    3    3    3    3\n\ncol(M2)\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    2    3    4\n[2,]    1    2    3    4\n[3,]    1    2    3    4\n\ndiag(3) %*% M1\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    4    7   10\n[2,]    2    5    8   11\n[3,]    3    6    9   12"
  },
  {
    "objectID": "lectures/data-structures.html#indexing-matrices",
    "href": "lectures/data-structures.html#indexing-matrices",
    "title": "Data structures in R",
    "section": "Indexing matrices",
    "text": "Indexing matrices\nUsing square brackets, we get a single value by using two numbers or names separated by a comma:\n\nM1[2, 3]\n\n[1] 8\n\nM2[\"b\", \"C\"]\n\n[1] 8\n\n\nA missing index means “everything”, so this returns a vector\n\nM1[2,]\n\n[1]  2  5  8 11\n\n## if you want the result to be a matrix (with 1 row)\nM1[2, , drop = FALSE]\n\n     [,1] [,2] [,3] [,4]\n[1,]    2    5    8   11\n\n\nCan also use a logical matrix or numeric as a single index\n\nM1[M1 < 7] ## but this returns a vector\n\n[1] 1 2 3 4 5 6\n\nM1[M1 < 7] <- 0 ## when used with assignment, the matrix is preserved\nM1\n\n     [,1] [,2] [,3] [,4]\n[1,]    0    0    7   10\n[2,]    0    0    8   11\n[3,]    0    0    9   12\n\n\nIndex matrices are convenient but hard to understand\nBefore we used a single index for each dimension:\n\nM2[1, 3]\n\n[1] 7\n\nM2[2, 1]\n\n[1] 2\n\nM2[3, 4]\n\n[1] 12\n\n\nIf we create a series of paired single indices, and store them in a matrix with 2 columns, we can use that matrix as an index:\n\nimat <- rbind(c(1, 3), \n              c(2, 1), \n              c(3, 4))\nimat\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    1\n[3,]    3    4\n\nM2[imat]\n\n[1]  7  2 12\n\nM2[imat] <- NA\nM2\n\n   A B  C  D\na  1 4 NA 10\nb NA 5  8 11\nc  3 6  9 NA"
  },
  {
    "objectID": "lectures/data-structures.html#matrix-arithmetic",
    "href": "lectures/data-structures.html#matrix-arithmetic",
    "title": "Data structures in R",
    "section": "Matrix arithmetic",
    "text": "Matrix arithmetic\nMatrix transpose, multiplication, inversion, eigenvalues, etc, are all available in R\n\nS1 <- matrix(runif(9), nrow = 3, ncol = 3)\nS2 <- matrix(runif(9), nrow = 3, ncol = 3)\nx <- c(1, 1.5, 3)\n\nS1 %*% S2\n\n          [,1]      [,2]      [,3]\n[1,] 0.6587070 0.6965718 1.1737759\n[2,] 0.7830573 0.9580960 1.5028809\n[3,] 0.4827637 0.5341077 0.8383423\n\nt(S1) %*% S2\n\n          [,1]      [,2]      [,3]\n[1,] 0.4584430 0.8289592 0.9932262\n[2,] 0.3711350 0.7880124 0.9088781\n[3,] 0.7661185 1.4433036 1.6456170\n\nx %*% solve(S1) %*% x\n\n          [,1]\n[1,] -23.41644"
  },
  {
    "objectID": "lectures/data-structures.html#arrays",
    "href": "lectures/data-structures.html#arrays",
    "title": "Data structures in R",
    "section": "Arrays",
    "text": "Arrays\nArrays are like matrices, but with more dimensions. A matrix is an array with 2 dimensions. Arrays can have more than 2 dimensions.\nThe data gets filled in by the first dimension, then the second, then the third, …\n\nA1 <- array(1:32, dim = c(4, 4, 2))\nA1\n\n, , 1\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    5    9   13\n[2,]    2    6   10   14\n[3,]    3    7   11   15\n[4,]    4    8   12   16\n\n, , 2\n\n     [,1] [,2] [,3] [,4]\n[1,]   17   21   25   29\n[2,]   18   22   26   30\n[3,]   19   23   27   31\n[4,]   20   24   28   32\n\n\nThe data also get “unrolled” in the same way.\n\nc(A1)\n\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32\n\n\nIndexing works like it does with matrices:\n\nA1[2, 4, 2] # value\n\n[1] 30\n\nA1[2, 4, ] # vector\n\n[1] 14 30\n\nA1[, , 2] # matrix\n\n     [,1] [,2] [,3] [,4]\n[1,]   17   21   25   29\n[2,]   18   22   26   30\n[3,]   19   23   27   31\n[4,]   20   24   28   32\n\nA1[, , 2, drop = FALSE] ## still an array\n\n, , 1\n\n     [,1] [,2] [,3] [,4]\n[1,]   17   21   25   29\n[2,]   18   22   26   30\n[3,]   19   23   27   31\n[4,]   20   24   28   32\n\ni3 <- rbind(c(2, 4, 2), \n            c(2, 4, 1), \n            c(3, 2, 1))\n\nA1[i3]\n\n[1] 30 14  7"
  },
  {
    "objectID": "lectures/data-structures.html#data-frames",
    "href": "lectures/data-structures.html#data-frames",
    "title": "Data structures in R",
    "section": "Data frames",
    "text": "Data frames\nData frames look like matrices, but the columns can be different data types:\n\nd1 <- data.frame(logical = c(FALSE, TRUE, FALSE), \n                 numeric = c(1, 2, 3), \n                 char = c(\"a\", \"b\", \"c\"))\nd1\n\n  logical numeric char\n1   FALSE       1    a\n2    TRUE       2    b\n3   FALSE       3    c\n\nd1[, \"char\"]\n\n[1] \"a\" \"b\" \"c\"\n\nd1[, \"numeric\"]\n\n[1] 1 2 3\n\n\nWhile they look like matrices, they act more like lists:\n\nd1$numeric\n\n[1] 1 2 3\n\nd1[[\"char\"]]\n\n[1] \"a\" \"b\" \"c\"\n\nd1[[1]]\n\n[1] FALSE  TRUE FALSE\n\nnames(d1)\n\n[1] \"logical\" \"numeric\" \"char\"   \n\nd1$missing <- c(NA, NA, NA)\nd1\n\n  logical numeric char missing\n1   FALSE       1    a      NA\n2    TRUE       2    b      NA\n3   FALSE       3    c      NA"
  },
  {
    "objectID": "lectures/data-structures.html#indexing-and-manipulating-data-frames",
    "href": "lectures/data-structures.html#indexing-and-manipulating-data-frames",
    "title": "Data structures in R",
    "section": "Indexing and manipulating data frames",
    "text": "Indexing and manipulating data frames\nMultiple ways to refer to a particular column:\n\nd1$numeric\n\n[1] 1 2 3\n\nd1[[\"numeric\"]]\n\n[1] 1 2 3\n\nd1[, \"numeric\"]\n\n[1] 1 2 3\n\nd1[, 2]\n\n[1] 1 2 3\n\nd1[[2]]\n\n[1] 1 2 3\n\n\nSubsetting\n\nsubset(d1, logical == TRUE) ## knows where to find logical\n\n  logical numeric char missing\n2    TRUE       2    b      NA\n\nd1[d1$numeric <= 2, ] ## need to tell it that numeric is in d1\n\n  logical numeric char missing\n1   FALSE       1    a      NA\n2    TRUE       2    b      NA\n\n\nManipulation\n\nd1$numeric.squared <- d1$numeric^2\nd1\n\n  logical numeric char missing numeric.squared\n1   FALSE       1    a      NA               1\n2    TRUE       2    b      NA               4\n3   FALSE       3    c      NA               9\n\nd1 <- within(d1, {\n  numeric.cubed <- numeric^3\n  not.logical <- !logical\n})\nd1\n\n  logical numeric char missing numeric.squared not.logical numeric.cubed\n1   FALSE       1    a      NA               1        TRUE             1\n2    TRUE       2    b      NA               4       FALSE             8\n3   FALSE       3    c      NA               9        TRUE            27\n\nwith(d1, {\n  \n  sqrt(numeric)\n  \n})\n\n[1] 1.000000 1.414214 1.732051\n\nattach(d1) ## this is like a global with/within\n### many texts recommend not using attach\n\nnumeric\n\n[1] 1 2 3\n\n!logical\n\n[1]  TRUE FALSE  TRUE\n\nnumeric.squared\n\n[1] 1 4 9\n\nog.num <- sqrt(numeric.squared) ## this does not work like within\n\ndetach(d1)\nog.num ## still here\n\n[1] 1 2 3\n\nnumeric.squared ## not attached anymore\n\nError in eval(expr, envir, enclos): object 'numeric.squared' not found"
  },
  {
    "objectID": "lectures/data-structures.html#coercion",
    "href": "lectures/data-structures.html#coercion",
    "title": "Data structures in R",
    "section": "Coercion",
    "text": "Coercion\nCoercion is what happens when two different types of data meet during an operation. In order to perform the operation, one of the data types may need to be coerced into the other data type. This can also be done explicitly using the as. family of functions.\nExamples\n\nc(FALSE, TRUE, FALSE) * 1.0\n\n[1] 0 1 0\n\n1 - c(FALSE, TRUE)\n\n[1] 1 0\n\nas.logical(1 - c(FALSE, TRUE))\n\n[1]  TRUE FALSE\n\npaste(\"A\", 1:4, sep = \"_\")\n\n[1] \"A_1\" \"A_2\" \"A_3\" \"A_4\"\n\n\nThis is useful sometimes, other times it can cause problems:\n\nas.numeric(c(\"1.35\", \"2.5\", \"<.01\"))\n\n[1] 1.35 2.50   NA"
  },
  {
    "objectID": "lectures/data-structures.html#recycling",
    "href": "lectures/data-structures.html#recycling",
    "title": "Data structures in R",
    "section": "Recycling",
    "text": "Recycling\nVector and array arithmetic works elementwise, as long as the things have the same dimension.\nIf not, the shorter one is sometimes recycled to match the larger dimension thing\n\nc(1, 2) * c(1:6)\n\n[1]  1  4  3  8  5 12\n\nc(1, 2) * c(1:5)\n\n[1] 1 4 3 8 5\n\n\nI often make this mistake when calculating proportions from a table:\n\nt1 <- table(mtcars$cyl, mtcars$gear)\nt1\n\n   \n     3  4  5\n  4  1  8  2\n  6  2  4  1\n  8 12  0  2\n\n## I want column proportions\nt1 / colSums(t1)  ## this is wrong because of recycling rowwise\n\n   \n             3          4          5\n  4 0.06666667 0.53333333 0.13333333\n  6 0.16666667 0.33333333 0.08333333\n  8 2.40000000 0.00000000 0.40000000\n\n## create matrix of the same dimensions\nt1 / rbind(colSums(t1), colSums(t1), colSums(t1))\n\n   \n             3          4          5\n  4 0.06666667 0.66666667 0.40000000\n  6 0.13333333 0.33333333 0.20000000\n  8 0.80000000 0.00000000 0.40000000\n\n## or use a built-in function\nproportions(t1, margin = 2)\n\n   \n             3          4          5\n  4 0.06666667 0.66666667 0.40000000\n  6 0.13333333 0.33333333 0.20000000\n  8 0.80000000 0.00000000 0.40000000"
  },
  {
    "objectID": "lectures/data-structures.html#environments-how-does-r-find-things",
    "href": "lectures/data-structures.html#environments-how-does-r-find-things",
    "title": "Data structures in R",
    "section": "Environments – how does R find things?",
    "text": "Environments – how does R find things?\nAn environment is kind of like a list, it contains a number of arbitrary objects.\nThe global environment is a special one, look at the upper right pane of Rstudio, or run\n\n## all of the objects in the global environment\nls()\n\n [1] \"A1\"     \"d1\"     \"i3\"     \"imat\"   \"M1\"     \"M2\"     \"og.num\" \"S1\"    \n [9] \"S2\"     \"t1\"     \"x\"      \"xl\"    \n\n\nWhen you type a name in the console, it will first look for it in the global environment. If it cannot find it there, it will then look in the attached packages.\nWe will come back to environments when we talk about functions."
  },
  {
    "objectID": "lectures/data-structures.html#packages",
    "href": "lectures/data-structures.html#packages",
    "title": "Data structures in R",
    "section": "Packages",
    "text": "Packages\nAdd on packages can be installed from a few different places, CRAN, Bioconductor, github, R-forge, and locally from package files.\nThey are installed to your system with install.packages(\"pkgname\")\nWhen you use library(\"pkgname\"), the package is attached, so that objects in the package can be found just by typing the name:\n\nlibrary(palmerpenguins)\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_…¹ body_…² sex    year\n   <fct>   <fct>              <dbl>         <dbl>      <int>   <int> <fct> <int>\n 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007\n 2 Adelie  Torgersen           39.5          17.4        186    3800 fema…  2007\n 3 Adelie  Torgersen           40.3          18          195    3250 fema…  2007\n 4 Adelie  Torgersen           NA            NA           NA      NA <NA>   2007\n 5 Adelie  Torgersen           36.7          19.3        193    3450 fema…  2007\n 6 Adelie  Torgersen           39.3          20.6        190    3650 male   2007\n 7 Adelie  Torgersen           38.9          17.8        181    3625 fema…  2007\n 8 Adelie  Torgersen           39.2          19.6        195    4675 male   2007\n 9 Adelie  Torgersen           34.1          18.1        193    3475 <NA>   2007\n10 Adelie  Torgersen           42            20.2        190    4250 <NA>   2007\n# … with 334 more rows, and abbreviated variable names ¹​flipper_length_mm,\n#   ²​body_mass_g\n# ℹ Use `print(n = ...)` to see more rows\n\n\nYou can use objects from packages without attaching them with :: (two colons)\n\nhead(survival::aml)\n\n  time status          x\n1    9      1 Maintained\n2   13      1 Maintained\n3   13      0 Maintained\n4   18      1 Maintained\n5   23      1 Maintained\n6   28      0 Maintained\n\n\nand you can get internal objects from a package with ::: (three colons)\n\nlibrary(survival)\nplot.aareg ## error\n\nError in eval(expr, envir, enclos): object 'plot.aareg' not found\n\nhead(survival:::plot.aareg) ## finds it\n\n                                                    \n1 function (x, se = TRUE, maxtime, type = \"s\", ...) \n2 {                                                 \n3     if (!inherits(x, \"aareg\"))                    \n4         stop(\"Must be an aareg object\")           \n5     if (missing(maxtime))                         \n6         keep <- 1:length(x$time)"
  },
  {
    "objectID": "lectures/data-structures.html#s4-objects",
    "href": "lectures/data-structures.html#s4-objects",
    "title": "Data structures in R",
    "section": "S4 objects",
    "text": "S4 objects\nSome packages you may use (e.g., from Bioconductor) return S4 objects. These are kind of like lists, but to access objects (called ‘slots’) inside, use @ (the at symbol).\nFor example\n\n## A simple class with two slots\ntrack <- setClass(\"track\", slots = c(x=\"numeric\", y=\"numeric\"))\n## an object from the class\nts1 <- track(x = 1:10, y = 1:10 + rnorm(10))\nts1\n\nAn object of class \"track\"\nSlot \"x\":\n [1]  1  2  3  4  5  6  7  8  9 10\n\nSlot \"y\":\n [1] 2.886477 2.553311 2.446268 4.762766 4.026077 7.092351 8.516321 7.487054\n [9] 8.025095 9.846235\n\nts1@x\n\n [1]  1  2  3  4  5  6  7  8  9 10"
  },
  {
    "objectID": "lectures/data-structures.html#tibbles",
    "href": "lectures/data-structures.html#tibbles",
    "title": "Data structures in R",
    "section": "Tibbles",
    "text": "Tibbles\nTibbles (cute name for ‘table’) are data frames with enhanced printing.\n\nlibrary(tibble)\nlibrary(palmerpenguins)\nclass(penguins)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_…¹ body_…² sex    year\n   <fct>   <fct>              <dbl>         <dbl>      <int>   <int> <fct> <int>\n 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007\n 2 Adelie  Torgersen           39.5          17.4        186    3800 fema…  2007\n 3 Adelie  Torgersen           40.3          18          195    3250 fema…  2007\n 4 Adelie  Torgersen           NA            NA           NA      NA <NA>   2007\n 5 Adelie  Torgersen           36.7          19.3        193    3450 fema…  2007\n 6 Adelie  Torgersen           39.3          20.6        190    3650 male   2007\n 7 Adelie  Torgersen           38.9          17.8        181    3625 fema…  2007\n 8 Adelie  Torgersen           39.2          19.6        195    4675 male   2007\n 9 Adelie  Torgersen           34.1          18.1        193    3475 <NA>   2007\n10 Adelie  Torgersen           42            20.2        190    4250 <NA>   2007\n# … with 334 more rows, and abbreviated variable names ¹​flipper_length_mm,\n#   ²​body_mass_g\n# ℹ Use `print(n = ...)` to see more rows\n\n\nYou can convert a regular data.frame to a tibble\n\nmttbl <- as_tibble(mtcars)\nmttbl\n\n# A tibble: 32 × 11\n     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4\n 2  21       6  160    110  3.9   2.88  17.0     0     1     4     4\n 3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1\n 4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1\n 5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2\n 6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1\n 7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4\n 8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2\n 9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2\n10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4\n# … with 22 more rows\n# ℹ Use `print(n = ...)` to see more rows\n\n\nThe indexing behavior is slightly different from data frames:\n\nmttbl[, \"mpg\"] ## still a tibble\n\n# A tibble: 32 × 1\n     mpg\n   <dbl>\n 1  21  \n 2  21  \n 3  22.8\n 4  21.4\n 5  18.7\n 6  18.1\n 7  14.3\n 8  24.4\n 9  22.8\n10  19.2\n# … with 22 more rows\n# ℹ Use `print(n = ...)` to see more rows\n\nmtcars[, \"mpg\"]\n\n [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4\n[16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7\n[31] 15.0 21.4\n\nmttbl[[\"mpg\"]] ## gives a vector\n\n [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4\n[16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7\n[31] 15.0 21.4\n\nmttbl$mpg ## same as data.frame\n\n [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4\n[16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7\n[31] 15.0 21.4"
  },
  {
    "objectID": "lectures/data-structures.html#data.tables",
    "href": "lectures/data-structures.html#data.tables",
    "title": "Data structures in R",
    "section": "data.tables",
    "text": "data.tables\ndata.table is a package that provides another data.frame extension.\nIt has many features for data manipulation and management with a focus on speed, both typing and computer speed for large datasets.\nThere is a special syntax for indexing and merging using square brackets, we will come back to this (because it is my favorite tool for data management)\n\nlibrary(data.table)\n\nmtdt <- data.table(mtcars)\nclass(mtdt)\n\n[1] \"data.table\" \"data.frame\"\n\nhead(mtdt)\n\n    mpg cyl disp  hp drat    wt  qsec vs am gear carb\n1: 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\n2: 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\n3: 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n4: 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n5: 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n6: 18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\nsetkey(mtdt, \"mpg\")\nhead(mtdt)\n\n    mpg cyl disp  hp drat    wt  qsec vs am gear carb\n1: 10.4   8  472 205 2.93 5.250 17.98  0  0    3    4\n2: 10.4   8  460 215 3.00 5.424 17.82  0  0    3    4\n3: 13.3   8  350 245 3.73 3.840 15.41  0  0    3    4\n4: 14.3   8  360 245 3.21 3.570 15.84  0  0    3    4\n5: 14.7   8  440 230 3.23 5.345 17.42  0  0    3    4\n6: 15.0   8  301 335 3.54 3.570 14.60  0  1    5    8\n\nmtdt[, .(meanwt = mean(wt)), by = .(cyl)]\n\n   cyl   meanwt\n1:   8 3.999214\n2:   6 3.117143\n3:   4 2.285727"
  },
  {
    "objectID": "lectures/data-structures.html#reading-in-external-data",
    "href": "lectures/data-structures.html#reading-in-external-data",
    "title": "Data structures in R",
    "section": "Reading in external data",
    "text": "Reading in external data\nThe basic functions are read.table, read.csv, read.csv2\nVia add on packages, R supports import of any data format I can think of.\nThe most flexible way to read in data is with the rio package. It guesses what the format is and uses the correct import tool (most of the time)\n\nlibrary(rio)\n\ndf <- import(\"https://github.com/leeper/rio/blob/main/inst/examples/iris.xls?raw=true\")\nhead(df)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa"
  },
  {
    "objectID": "lectures/data-structures.html#big-datasets",
    "href": "lectures/data-structures.html#big-datasets",
    "title": "Data structures in R",
    "section": "Big datasets",
    "text": "Big datasets\nThe slowness of reading in data usually comes from format guessing.\nSupplying known column types can dramatically speed up import:\n\ndf1 <- read.csv(\"https://raw.githubusercontent.com/leeper/rio/main/inst/examples/noheader.csv\", \n                header = FALSE)\n\ndf1b <- read.csv(\"https://raw.githubusercontent.com/leeper/rio/main/inst/examples/noheader.csv\", \n                header = FALSE, \n                colClasses = c(\"integer\", \"character\", \"factor\", \"factor\", \n                               \"numeric\", \"numeric\"))\n\nfread from the data.table package is fast and also flexible:\n\nfread(\"https://raw.githubusercontent.com/leeper/rio/main/inst/examples/noheader.csv\", \n      header = FALSE)\n\n    V1 V2       V3    V4   V5       V6       V7       V8\n 1:  0 ??        ? Total 1998 46991171 23594034 23397137\n 2:  0 ??   0 - 4?     0 1998  3390678  1788561  1602117\n 3:  0 ??   5 - 9?     5 1998  3428387  1820224  1608163\n 4:  0 ?? 10 - 14?    10 1998  3195174  1668531  1526643\n 5:  0 ?? 15 - 19?    15 1998  4094035  2102515  1991520\n 6:  0 ?? 20 - 24?    20 1998  3942827  2022535  1920292\n 7:  0 ?? 25 - 29?    25 1998  4637577  2371635  2265942\n 8:  0 ?? 30 - 34?    30 1998  4375695  2239107  2136588\n 9:  0 ?? 35 - 39?    35 1998  4502137  2308132  2194005\n10:  0 ?? 40 - 44?    40 1998  3754895  1924704  1830191"
  },
  {
    "objectID": "lectures/data-structures.html#exporting-data",
    "href": "lectures/data-structures.html#exporting-data",
    "title": "Data structures in R",
    "section": "Exporting data",
    "text": "Exporting data\nMost import functions have their output counterparts, e.g., write.table, write.csv, write.csv2, fwrite. These are useful for writing out rectangular data for use in other programs.\nAnother under-used way of exporting objects is to use saveRDS, this saves any R object to a file, which then gives you exactly the same object when read into R using readRDS. I use this frequently for intermediate datasets, analysis results stored in a list, and even functions.\nExample\n\nlmfit <- lm(mpg ~ wt, data = mtcars)\nlmfit\n\n\nCall:\nlm(formula = mpg ~ wt, data = mtcars)\n\nCoefficients:\n(Intercept)           wt  \n     37.285       -5.344  \n\nsaveRDS(lmfit, file = \"reg-ex.rds\")\n\nreadRDS(\"reg-ex.rds\")\n\n\nCall:\nlm(formula = mpg ~ wt, data = mtcars)\n\nCoefficients:\n(Intercept)           wt  \n     37.285       -5.344"
  },
  {
    "objectID": "lectures/data-structures.html#practical",
    "href": "lectures/data-structures.html#practical",
    "title": "Data structures in R",
    "section": "Practical",
    "text": "Practical\n\nPractice working with vectors and matrices\nThing about ways to organize data and output into data structures\nCompare and contrast the base R, data.table, and tibble packages for working with data.\n\nLink to lesson\nLink home"
  },
  {
    "objectID": "lectures/index.html",
    "href": "lectures/index.html",
    "title": "Lectures",
    "section": "",
    "text": "Introduction and Overview\n\n\nDay 1\n\n\n\n\n \n\n\n\n\n\n\nProject organization and workflow\n\n\nDay 1, A\n\n\n\n\n \n\n\n\n\n\n\nData structures in R\n\n\nDay 1, B\n\n\n\n\n \n\n\n\n\n\n\nFlow control and loops\n\n\nDay 2, A\n\n\n\n\n \n\n\n\n\n\n\nFunctions\n\n\nDay 2, B\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\nNo matching items"
  },
  {
    "objectID": "lectures/flow-and-loops.html#what",
    "href": "lectures/flow-and-loops.html#what",
    "title": "Flow control and loops",
    "section": "What?",
    "text": "What?\n\nNormally the code gets run line by line, in order, top to bottom\nThere are special commands that allow you change that\nConditional execution, choose which code to run depending on logical conditions\n\nif(<condition>)\nelse if\nelse\n\nLoops, repeat a chunk of code several times\n\nrepeat\nfor\nwhile"
  },
  {
    "objectID": "lectures/flow-and-loops.html#if-then-else",
    "href": "lectures/flow-and-loops.html#if-then-else",
    "title": "Flow control and loops",
    "section": "If then else",
    "text": "If then else\n\nif(<condition>) {\n  \n  <do something>\n    \n} else {\n  \n  <do something else>\n  \n}\n\nIf the <condition> evaluates to TRUE, then something gets executed, otherwise something else gets executed.\n<condition> must be length one. No vectors allowed."
  },
  {
    "objectID": "lectures/flow-and-loops.html#examples",
    "href": "lectures/flow-and-loops.html#examples",
    "title": "Flow control and loops",
    "section": "Examples",
    "text": "Examples\n\nnum_reps <- if(final_report) 5000 else 200\n\nbrackets are helpful for understanding and clarity\n\np_value <- if(nonparametric) {\n  wilcox.test(mpg ~ vs, data = mtcars, exact = FALSE)$p.value\n} else {\n  t.test(mpg ~ vs, data = mtcars)$p.value\n}\n\nThere does not need to be anything returned from the expression\n\nif(log_transform) {\n  \n  data$Y <- log(data$Y)\n  \n}"
  },
  {
    "objectID": "lectures/flow-and-loops.html#ifelse",
    "href": "lectures/flow-and-loops.html#ifelse",
    "title": "Flow control and loops",
    "section": "ifelse",
    "text": "ifelse\nThis is a function, not a statement like if and else.\nIt is vectorized and hence better suited for working with data.\nifelse(<logical vector>, <yes vector>, <no vector>). All three vectors should be the same length or recycling happens.\nIt returns a vector with elements from yes when TRUE, and elements from no when FALSE.\n\nrawdata <- c(\"12.63\", \"62.45\", \"<2\") ## lower limit of detection\nas.numeric(ifelse(rawdata == \"<2\", 1, rawdata))\n\n[1] 12.63 62.45  1.00"
  },
  {
    "objectID": "lectures/flow-and-loops.html#basic-concepts",
    "href": "lectures/flow-and-loops.html#basic-concepts",
    "title": "Flow control and loops",
    "section": "Basic concepts",
    "text": "Basic concepts\nA loop repeatedly and sequentially evaluates an expression, i.e.,\n\n{\n  <stuff contained inside curly brackets>\n}\n\nA loop will continue forever unless you tell it to stop. You tell it to stop in different ways for different loop expressions"
  },
  {
    "objectID": "lectures/flow-and-loops.html#repeat",
    "href": "lectures/flow-and-loops.html#repeat",
    "title": "Flow control and loops",
    "section": "Repeat",
    "text": "Repeat\nThis is the simplest of loops, it will repeat an expression until it encounters break\nThis will run forever\n\nrepeat {\n  print(\"hello\")\n}\n\nThis will run exactly once\n\nrepeat {\n  print(\"hello\")\n  break\n}\n\nThis will run 5 times\n\ni <- 1\nrepeat {\n  print(\"hello\")\n  if(i == 5) break\n  i <- i + 1\n}"
  },
  {
    "objectID": "lectures/flow-and-loops.html#while",
    "href": "lectures/flow-and-loops.html#while",
    "title": "Flow control and loops",
    "section": "While",
    "text": "While\nNotice the pattern, repeat an expression until a condition is met.\nThe condition usually depends on a variable that changes at each iteration, in this case i, the iterator\nwhile loops explicitly state the condition at the start:\n\ni <- 1\nwhile(i <= 5) {\n  print(\"hello\")\n  i <- i + 1\n}\n\n[1] \"hello\"\n[1] \"hello\"\n[1] \"hello\"\n[1] \"hello\"\n[1] \"hello\""
  },
  {
    "objectID": "lectures/flow-and-loops.html#for-loops",
    "href": "lectures/flow-and-loops.html#for-loops",
    "title": "Flow control and loops",
    "section": "For loops",
    "text": "For loops\nA for loop explicitly states the sequence of the iterator at the start. Then the “end condition” is that the loop has reached the end of the sequence.\n\nfor(i in 1:5) {\n  print(\"hello\")\n}\n\n[1] \"hello\"\n[1] \"hello\"\n[1] \"hello\"\n[1] \"hello\"\n[1] \"hello\"\n\n\nIn this case, it is the most concise. I personally use for loops more than any other loop.\nbreak can be used inside any loop to end it. next can be used to go to the next iteration.\n\nfor(i in 1:5) {\n  if(i == 2) next\n  print(paste(\"hello\", i))\n}\n\n[1] \"hello 1\"\n[1] \"hello 3\"\n[1] \"hello 4\"\n[1] \"hello 5\""
  },
  {
    "objectID": "lectures/flow-and-loops.html#examples-1",
    "href": "lectures/flow-and-loops.html#examples-1",
    "title": "Flow control and loops",
    "section": "Examples",
    "text": "Examples\nBootstrap\n\nlibrary(palmerpenguins)\n\nmu.body_mass <- mean(penguins$body_mass_g, na.rm = TRUE)\nbsmeans <- vector(\"numeric\", length = 2000)\nfor(i in 1:length(bsmeans)) {\n  resampled.body_mass <- sample(penguins$body_mass_g, replace = TRUE)\n  bsmeans[i] <- mean(resampled.body_mass, na.rm = TRUE)\n}\nhist(bsmeans)\nabline(v = mu.body_mass, col = \"red\")"
  },
  {
    "objectID": "lectures/flow-and-loops.html#example-2",
    "href": "lectures/flow-and-loops.html#example-2",
    "title": "Flow control and loops",
    "section": "Example 2",
    "text": "Example 2\nIterating through species\n\nlibrary(colorspace)\n\nspecies_names <- levels(penguins$species)\ncolors <- colorspace::qualitative_hcl(length(species_names))\nfor(i in 1:length(species_names)){\n  \n  if(i == 1) {\n    \n    plot(bill_length_mm ~ bill_depth_mm, \n         pch = 20, col = colors[i],\n         data = subset(penguins, species == species_names[i]), \n         xlim = range(penguins$bill_depth_mm, na.rm = TRUE), \n         ylim = range(penguins$bill_length_mm, na.rm = TRUE)\n         )\n    \n  } else {\n    \n    points(bill_length_mm ~ bill_depth_mm, \n         pch = 20, col = colors[i],\n         data = subset(penguins, species == species_names[i]))\n    \n  }\n  \n}\nlegend(\"topleft\", fill = colors, legend = species_names)"
  },
  {
    "objectID": "lectures/flow-and-loops.html#nested-loops",
    "href": "lectures/flow-and-loops.html#nested-loops",
    "title": "Flow control and loops",
    "section": "Nested loops",
    "text": "Nested loops\nA loop can itself contain a loop, or multiple loops.\n\nspecies_names <- levels(penguins$species)\nisland_names <- levels(penguins$island)\nmean_bm_matrix <- matrix(NA, nrow = length(species_names), \n                         ncol = length(island_names), \n                         dimnames = list(species_names, island_names))\n\nfor(i in 1:nrow(mean_bm_matrix)) {\n  for(j in 1:ncol(mean_bm_matrix)) {\n   \n    thisset <- subset(penguins, species == species_names[i] & \n                        island == island_names[j])\n    \n    if(nrow(thisset) == 0) next\n    \n    mean_bm_matrix[i, j] <- mean(thisset$body_mass_g, na.rm = TRUE)\n     \n  }\n}\nmean_bm_matrix\n\n            Biscoe    Dream Torgersen\nAdelie    3709.659 3688.393  3706.373\nChinstrap       NA 3733.088        NA\nGentoo    5076.016       NA        NA"
  },
  {
    "objectID": "lectures/flow-and-loops.html#note-on-speed",
    "href": "lectures/flow-and-loops.html#note-on-speed",
    "title": "Flow control and loops",
    "section": "Note on speed",
    "text": "Note on speed\nYou may see people warn you not to use for loops in R, “because they are slow”.\nThat is partially true, but speed is not the only thing, for loops can be much clearer and more understandable than the alternatives.\nBut, the slow thing in R is changing the size of an object, so you can avoid that by creating a vector/matrix/array of the correct size to hold the results of the loop:\n\nsystem.time({\nA1 <- NULL\nfor(i in 1:100000) {\n  A1 <- c(A1, rnorm(1))\n}\n})\n\n   user  system elapsed \n 12.496   0.044  12.557 \n\nsystem.time({\nA2 <- rep(NA, 100000)\nfor(i in 1:length(A2)) {\n  A2[i] <- rnorm(1)\n}\n})\n\n   user  system elapsed \n  0.163   0.004   0.167"
  },
  {
    "objectID": "lectures/flow-and-loops.html#practical",
    "href": "lectures/flow-and-loops.html#practical",
    "title": "Flow control and loops",
    "section": "Practical",
    "text": "Practical\n\nPractice working if and else statements\nPractice working with loops\n\nLink to lesson\nLink home"
  },
  {
    "objectID": "lectures/introduction.html#learning-objectives",
    "href": "lectures/introduction.html#learning-objectives",
    "title": "Introduction and Overview",
    "section": "Learning objectives",
    "text": "Learning objectives\n\nUnderstand and apply programming principles to handle repetitive tasks\nUnderstand how to use and make your own functions in R\nUse loops in R\nApply these principles to perform efficient data manipulation, analysis, and reporting"
  },
  {
    "objectID": "lectures/introduction.html#why",
    "href": "lectures/introduction.html#why",
    "title": "Introduction and Overview",
    "section": "Why?",
    "text": "Why?\n\nIf your research involves any data, it likely also involves:\n\nData management and manipulation\nAnalysis\nReporting of results\n\nThis means lots of code.\nWe can borrow some ideas from software development to\n\nMake our lives easier – repetitive tasks, updates with new data\nMake science better – reproducible, understandable, reusable"
  },
  {
    "objectID": "lectures/introduction.html#goals",
    "href": "lectures/introduction.html#goals",
    "title": "Introduction and Overview",
    "section": "Goals",
    "text": "Goals\nAt a bare minimum, we want our code to be:\n\n\nOrganized\n\nCoherent structure of\n\nfolders, files, and scripts\n\n\nTransportable\n\nWorks on\n\nmy future computer\nother people’s computers\n\n\n\nUnderstandable\n\nClearly specified dependencies\nReadable code, sensible naming of things\nWritten documentation explaining what and how"
  },
  {
    "objectID": "lectures/introduction.html#extras",
    "href": "lectures/introduction.html#extras",
    "title": "Introduction and Overview",
    "section": "Extras",
    "text": "Extras\nNice to have, but not absolutely necessary\nProvably correct\nThrough automated testing\n\nPieces of code correctly do what they should\nCode works together correctly, not sensitive to minor changes in the data\nValid statistical properties\n\nVersion controlled\n\nHistory of development is tracked and documented"
  },
  {
    "objectID": "lectures/introduction.html#overview-of-this-course",
    "href": "lectures/introduction.html#overview-of-this-course",
    "title": "Introduction and Overview",
    "section": "Overview of this course",
    "text": "Overview of this course\nLectures\nLessons\nWork through a problem together, learn tools and strategies\nSticky note system\n = “I need help!”\n = “Good to go!”\nNo sticky = still working\nShare solutions/questions/responses on padlet:\nhttps://padlet.com/sachsmc/rprog\nCourse website:\nhttps://sachsmc.github.io/r-programming/"
  },
  {
    "objectID": "lectures/introduction.html#schedule-of-topics",
    "href": "lectures/introduction.html#schedule-of-topics",
    "title": "Introduction and Overview",
    "section": "Schedule of topics",
    "text": "Schedule of topics\n\n\nToday\n\nProject organization\nData structures and indexing\n\nFriday\n\nFlow control and loops\nCreating and using functions\n\n\nTuesday\n\nWorking with data, merging and reshaping\nWorking with data, dates and characters\n\nNext Friday\n\nReporting, dynamic documents\nCase study, analysis of register data"
  },
  {
    "objectID": "lectures/introduction.html#what-i-do",
    "href": "lectures/introduction.html#what-i-do",
    "title": "Introduction and Overview",
    "section": "What I do",
    "text": "What I do\n\nDevelop and evaluate statistical methods\n\nWrite R packages\nWrite R code to test the methods\n\nCollaborate on research projects involving data analysis\n\nUse register and other data from stats Denmark\nData analysis, visualization and reporting"
  },
  {
    "objectID": "lectures/introduction.html#my-r-philosophy",
    "href": "lectures/introduction.html#my-r-philosophy",
    "title": "Introduction and Overview",
    "section": "My R philosophy",
    "text": "My R philosophy\n\nI started learning R in 2005 (version 2.2)\nThere is almost no problem that can’t be solved with R\n\nFlexible and dynamic\nPlays nicely with almost any other programming language"
  },
  {
    "objectID": "lectures/introduction.html#course-philosophy",
    "href": "lectures/introduction.html#course-philosophy",
    "title": "Introduction and Overview",
    "section": "Course philosophy",
    "text": "Course philosophy\n\nThere are no stupid questions\nThere are many ways to solve a problem, there is no single “right way”\nI will not force you to learn any particular way, e.g., tidyverse vs data.table, we will focus on learning the general principles.\n\nTry them out, then choose one and get good at it\nSame with project organization, choose a system and stick with it\n\nShow up to class and participate, you will pass and hopefully learn something useful"
  },
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "Resources and tools about R",
    "section": "",
    "text": "Long list of cheatsheets:\nhttps://www.rstudio.com/resources/cheatsheets/\n\n\n\nBase R\nUsing Rstudio\nData manipulation with dplyr\nData manipulation with data.table\nStrings and regular expressions\nDates and times\nRmarkdown and dynamic documents"
  },
  {
    "objectID": "resources.html#online-books",
    "href": "resources.html#online-books",
    "title": "Resources and tools about R",
    "section": "Online books",
    "text": "Online books\n\nIntroductory\n\nIntroduction to R, by the R core team\nIntroduction to R, by Susanne Rosthøj\n\n\n\nData analysis\n\nR for Data Science, by Hadley Wickham and Garret Grolemund\nStatistical Inference via Data Science, by Chester Ismay and Albert Y. Kim\n\n\n\nProgramming\n\nHands-On Programming with R, by Garrett Grolemund\nAdvanced R, by Hadley Wickham\n\n\n\nGraphics and dynamic documents\n\nR Graphics Cookbook, 2nd edition, by Winston Chang\nR Markdown: The Definitive Guide, by Yihui Xie, J. J. Allaire, Garrett Grolemund\nR Markdown Cookbook, by Yihui Xie, Christophe Dervieux, Emily Riederer"
  },
  {
    "objectID": "exercises/dynamic-documents.html",
    "href": "exercises/dynamic-documents.html",
    "title": "Dynamic documents – exercises",
    "section": "",
    "text": "Learning objectives\nIn this lesson you will\n\nLearn how to set up a quarto or rmarkdown document\nPractice managing code chunks to get output to look the way you want"
  },
  {
    "objectID": "exercises/projects.html",
    "href": "exercises/projects.html",
    "title": "Project organization and workflow – exercises",
    "section": "",
    "text": "In this lesson you will\n\nUnderstand how R interacts with the current working directory\nPractice using relative paths in R input and output\nTry out using the here package for managing file paths in a project"
  },
  {
    "objectID": "exercises/projects.html#create-your-project-directory",
    "href": "exercises/projects.html#create-your-project-directory",
    "title": "Project organization and workflow – exercises",
    "section": "Create your project directory",
    "text": "Create your project directory\nIn this lesson we will organize a toy project about the Palmer Penguins dataset. In the end you will share the project with your neighbor and ask them to reproduce your results, so keep that in mind.\n\nCreate a new folder on your computer for this project. Name it whatever you want but something short but informative.\nUsing a directory structure of your choice, set it up as a project template. Remember to include a README file. This project will involve some data input, manipulation, and some output of figures.\nAcquire the Palmer Penguins dataset from here"
  },
  {
    "objectID": "exercises/projects.html#do-some-data-manipulation",
    "href": "exercises/projects.html#do-some-data-manipulation",
    "title": "Project organization and workflow – exercises",
    "section": "Do some data manipulation",
    "text": "Do some data manipulation\n\nCreate a new .R script in the appropriate directory of your project.\nOpen up the R script in your favorite integrated development environment (IDE, aka script editor, e.g., Rstudio or vscode)\nRead in the penguins dataset and create a new variable called the “penguin body mass index”. It is the body mass in grams divided by the square of flipper length in millimeters\nSave the results in your project directory, try using the here function."
  },
  {
    "objectID": "exercises/projects.html#do-some-data-analysis",
    "href": "exercises/projects.html#do-some-data-analysis",
    "title": "Project organization and workflow – exercises",
    "section": "Do some data analysis",
    "text": "Do some data analysis\n\nCreate another .R script\nMake a scatterplot of body mass index versus bill length, with color by species\nMake a boxplot of body mass index by sex.\nDo a t-test for body mass index by sex.\nSave the results in your project directory, try using the here function.\n\n\nStop and think\nYou are going to share this project with your friend. In order for them to reproduce the results that you obtained, they will need the same data. Think about different ways that they can obtain the dataset. What are the pros and cons?"
  },
  {
    "objectID": "exercises/projects.html#share-with-your-neighbor",
    "href": "exercises/projects.html#share-with-your-neighbor",
    "title": "Project organization and workflow – exercises",
    "section": "Share with your neighbor",
    "text": "Share with your neighbor\n\nUpdate your README file.\nZip up the project folder and send it to your partner.\nWhen you receive their project, unzip it, open it in a new R session and try to reproduce their results."
  },
  {
    "objectID": "exercises/merge-and-reshape.html",
    "href": "exercises/merge-and-reshape.html",
    "title": "Merging and reshaping – exercises",
    "section": "",
    "text": "Learning objectives\nIn this lesson you will\n\nPractice doing the different types of data merges/joins\nSee and understand how to reshape data from wide to long and long to wide"
  },
  {
    "objectID": "exercises/functions.html",
    "href": "exercises/functions.html",
    "title": "Functions – exercises",
    "section": "",
    "text": "In this lesson you will\n\nLearn how the apply family of functions works, and the alternatives using dplyr and data.table\nPractice writing and reusing your own functions"
  },
  {
    "objectID": "exercises/functions.html#iterating-over-data-with-functions",
    "href": "exercises/functions.html#iterating-over-data-with-functions",
    "title": "Functions – exercises",
    "section": "Iterating over data with functions",
    "text": "Iterating over data with functions\n\nLoad the Palmer penguins dataset.\nWrite a function to compute the mean and standard deviation of a numeric vector. We will apply this function to the numeric variables in penguins, and also by different subgroups\n\n\nStop and think\n\nWhat are the components of a function?\nDo I have to worry about missing data? How can I deal with it?\nWhat sort of data structure should I return?"
  },
  {
    "objectID": "exercises/functions.html#using-the-function",
    "href": "exercises/functions.html#using-the-function",
    "title": "Functions – exercises",
    "section": "Using the function",
    "text": "Using the function\n\nUse your function to compute the mean and sd of all the numeric variables in penguins.\nUse your function to compute the mean and sd of body mass by species and sex\n\nTry using one of the apply functions\nTry using dplyr: check out the functions group_by and summarize\nTry using data.table: use the .by argument in the ["
  },
  {
    "objectID": "exercises/functions.html#more-functions",
    "href": "exercises/functions.html#more-functions",
    "title": "Functions – exercises",
    "section": "More functions",
    "text": "More functions\n\nWrite another function that constructs a one-sample t-statistic from an estimated mean and standard deviation. Recall that the t-statistic to test the null hypothesis that \\(\\mu = \\mu_0\\) is \\[\nT = \\frac{\\overline{X} - \\mu_0}{\\hat{\\sigma}/\\sqrt{n}}\n\\] where \\(\\overline{X}\\) is the sample mean and \\(\\hat{\\sigma}\\) is the sample standard deviation and \\(n\\) is the sample size.\nWrite another function that takes the t-statistic and calculates a p-value\nCompose your custom functions in order to test the null hypothesis that the mean body mass of penguins is 4000g. Try using the pipe operator |>."
  },
  {
    "objectID": "exercises/functions.html#classes-and-custom-generics",
    "href": "exercises/functions.html#classes-and-custom-generics",
    "title": "Functions – exercises",
    "section": "Classes and custom generics",
    "text": "Classes and custom generics\nNow that you have some functions to do something interesting, let’s create a “class” to indicate that the object has a specific meaning.\n\nModify your mean and sd function so that the data structure that is returned has class “meansd”. There are two ways to do this:\n\nSay the object you currently return is called x, instead of x, return structure(x, class = \"meansd\")\nAdd the line class(x) <- \"meansd\" before returning x\n\nWrite a custom print function print.meansd that nicely prints the mean and standard deviation. Use the functions sprintf, round, and/or format."
  },
  {
    "objectID": "exercises/data-structures.html",
    "href": "exercises/data-structures.html",
    "title": "Data structures – exercises",
    "section": "",
    "text": "In this lesson you will\n\nPractice working with vectors and matrices\nThing about ways to organize data and output into data structures\nCompare and contrast the base R, data.table, and tibble packages for working with data."
  },
  {
    "objectID": "exercises/data-structures.html#vectors-and-matrices",
    "href": "exercises/data-structures.html#vectors-and-matrices",
    "title": "Data structures – exercises",
    "section": "Vectors and matrices",
    "text": "Vectors and matrices\nThe following code creates a matrix with some integers:\n\nM1 <- matrix(1:16, nrow = 4, ncol = 4)\n\n\nTake the sum of each row of M1\nCreate a new matrix called M2 that is M1 with the diagonal elements replaced by 0s\nCreate a new matrix called M3 that is M1 but with all values less than 4 replaced by -1\nAppend the three matrices into an array with dimensions 4, 4, 3."
  },
  {
    "objectID": "exercises/data-structures.html#organizing-output-from-a-statistical-analysis",
    "href": "exercises/data-structures.html#organizing-output-from-a-statistical-analysis",
    "title": "Data structures – exercises",
    "section": "Organizing output from a statistical analysis",
    "text": "Organizing output from a statistical analysis\nThe Palmer penguins data are available in the package palmerpenguins. Install the package and inspect the data called palmerpenguins. You can read about the data in the help file:\n\nlibrary(palmerpenguins)\nhead(penguins)\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_l…¹ body_…² sex    year\n  <fct>   <fct>              <dbl>         <dbl>       <int>   <int> <fct> <int>\n1 Adelie  Torgersen           39.1          18.7         181    3750 male   2007\n2 Adelie  Torgersen           39.5          17.4         186    3800 fema…  2007\n3 Adelie  Torgersen           40.3          18           195    3250 fema…  2007\n4 Adelie  Torgersen           NA            NA            NA      NA <NA>   2007\n5 Adelie  Torgersen           36.7          19.3         193    3450 fema…  2007\n6 Adelie  Torgersen           39.3          20.6         190    3650 male   2007\n# … with abbreviated variable names ¹​flipper_length_mm, ²​body_mass_g\n\n?palmerpenguins-package\n\nLet’s do some basic analyses on this dataset.\n\nby(penguins$body_mass_g, list(penguins$sex, penguins$species), summary)\n\n: female\n: Adelie\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   2850    3175    3400    3369    3550    3900 \n------------------------------------------------------------ \n: male\n: Adelie\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   3325    3800    4000    4043    4300    4775 \n------------------------------------------------------------ \n: female\n: Chinstrap\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   2700    3362    3550    3527    3694    4150 \n------------------------------------------------------------ \n: male\n: Chinstrap\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   3250    3731    3950    3939    4100    4800 \n------------------------------------------------------------ \n: female\n: Gentoo\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   3950    4462    4700    4680    4875    5200 \n------------------------------------------------------------ \n: male\n: Gentoo\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   4750    5300    5500    5485    5700    6300 \n\nmassfit <- lm(body_mass_g ~ sex * species, data = penguins)\nsummary(massfit)\n\n\nCall:\nlm(formula = body_mass_g ~ sex * species, data = penguins)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-827.21 -213.97   11.03  206.51  861.03 \n\nCoefficients:\n                         Estimate Std. Error t value Pr(>|t|)    \n(Intercept)               3368.84      36.21  93.030  < 2e-16 ***\nsexmale                    674.66      51.21  13.174  < 2e-16 ***\nspeciesChinstrap           158.37      64.24   2.465  0.01420 *  \nspeciesGentoo             1310.91      54.42  24.088  < 2e-16 ***\nsexmale:speciesChinstrap  -262.89      90.85  -2.894  0.00406 ** \nsexmale:speciesGentoo      130.44      76.44   1.706  0.08886 .  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 309.4 on 327 degrees of freedom\n  (11 observations deleted due to missingness)\nMultiple R-squared:  0.8546,    Adjusted R-squared:  0.8524 \nF-statistic: 384.3 on 5 and 327 DF,  p-value: < 2.2e-16\n\nboxplot(body_mass_g ~ sex * species, data = penguins, \n        col = rep(c(\"slateblue\", \"salmon\"), 3))\nlegend(\"topleft\", fill = c(\"slateblue\", \"salmon\"), \n       legend = c(\"Female\", \"Male\"))\n\n\n\n\nInspect the massfit object. What type of data structure is it, and what does it contain?\nYou are planning a publication about the association/interaction between species and sex on body mass. The paper will include descriptive statistics, statistical inference, and some figures. You will likely present the results at a conference or in a lab meeting.\n\nWhat are some different approaches to save the results?\nDiscuss the pros and cons of your suggested approaches.\n\n\nStop and think\nHow do you plan to use the statistical output, immediately and in the future? Thinking about this question helps guide what and how I will store output from an analysis.\n\nWill I read the data into another program before putting it into tables for my paper?\nIs it a result of a computation that takes a long time to run that will be used in subsequent analyses?\nWhat about figures?"
  },
  {
    "objectID": "exercises/data-structures.html#working-with-data-using-different-structures",
    "href": "exercises/data-structures.html#working-with-data-using-different-structures",
    "title": "Data structures – exercises",
    "section": "Working with data using different structures",
    "text": "Working with data using different structures\nThe penguins data is stored as a tibble, which is a special type of data structure that is an enhanced data frame. That is, a tibble is still a data.frame, but it is also more than that.\n\nlibrary(tibble)\nclass(penguins) \n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\nis.data.frame(penguins)\n\n[1] TRUE\n\nis_tibble(penguins)\n\n[1] TRUE\n\n\n\nTry it yourself\nThere are other packages out there that enhance data frames. In this exercise we will introduce and compare base data frames, data.tables, and tibbles. For these you will need the tibble, dplyr, and data.table packages.\nIf you have used any of these before, try one of the others. Read the help files and try out some other functions.\n\n\nCode\n\nBase Rtibble/dplyrdata.table\n\n\n\noptions(max.print = 48)\n\npeng_df <- as.data.frame(penguins)\nclass(peng_df)\n\n[1] \"data.frame\"\n\n## subset\nsubset(peng_df, !is.na(body_mass_g))\n\n  species    island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n1  Adelie Torgersen           39.1          18.7               181        3750\n2  Adelie Torgersen           39.5          17.4               186        3800\n3  Adelie Torgersen           40.3          18.0               195        3250\n5  Adelie Torgersen           36.7          19.3               193        3450\n6  Adelie Torgersen           39.3          20.6               190        3650\n7  Adelie Torgersen           38.9          17.8               181        3625\n     sex year\n1   male 2007\n2 female 2007\n3 female 2007\n5 female 2007\n6   male 2007\n7 female 2007\n [ reached 'max' / getOption(\"max.print\") -- omitted 336 rows ]\n\nsubset(peng_df, sex == \"male\")\n\n   species    island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n1   Adelie Torgersen           39.1          18.7               181        3750\n6   Adelie Torgersen           39.3          20.6               190        3650\n8   Adelie Torgersen           39.2          19.6               195        4675\n14  Adelie Torgersen           38.6          21.2               191        3800\n15  Adelie Torgersen           34.6          21.1               198        4400\n18  Adelie Torgersen           42.5          20.7               197        4500\n    sex year\n1  male 2007\n6  male 2007\n8  male 2007\n14 male 2007\n15 male 2007\n18 male 2007\n [ reached 'max' / getOption(\"max.print\") -- omitted 162 rows ]\n\npeng_df[1:6, ]\n\n  species    island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n1  Adelie Torgersen           39.1          18.7               181        3750\n2  Adelie Torgersen           39.5          17.4               186        3800\n3  Adelie Torgersen           40.3          18.0               195        3250\n4  Adelie Torgersen             NA            NA                NA          NA\n5  Adelie Torgersen           36.7          19.3               193        3450\n6  Adelie Torgersen           39.3          20.6               190        3650\n     sex year\n1   male 2007\n2 female 2007\n3 female 2007\n4   <NA> 2007\n5 female 2007\n6   male 2007\n\n## sort\npeng_df[order(peng_df$year), ]\n\n  species    island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n1  Adelie Torgersen           39.1          18.7               181        3750\n2  Adelie Torgersen           39.5          17.4               186        3800\n3  Adelie Torgersen           40.3          18.0               195        3250\n4  Adelie Torgersen             NA            NA                NA          NA\n5  Adelie Torgersen           36.7          19.3               193        3450\n6  Adelie Torgersen           39.3          20.6               190        3650\n     sex year\n1   male 2007\n2 female 2007\n3 female 2007\n4   <NA> 2007\n5 female 2007\n6   male 2007\n [ reached 'max' / getOption(\"max.print\") -- omitted 338 rows ]\n\npeng_df[order(peng_df$year, decreasing = TRUE), ]\n\n    species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n101  Adelie Biscoe           35.0          17.9               192        3725\n102  Adelie Biscoe           41.0          20.0               203        4725\n103  Adelie Biscoe           37.7          16.0               183        3075\n104  Adelie Biscoe           37.8          20.0               190        4250\n105  Adelie Biscoe           37.9          18.6               193        2925\n106  Adelie Biscoe           39.7          18.9               184        3550\n       sex year\n101 female 2009\n102   male 2009\n103 female 2009\n104   male 2009\n105 female 2009\n106   male 2009\n [ reached 'max' / getOption(\"max.print\") -- omitted 338 rows ]\n\n## select columns\npeng_df[c(\"species\", \"sex\", \"year\")]\n\n   species    sex year\n1   Adelie   male 2007\n2   Adelie female 2007\n3   Adelie female 2007\n4   Adelie   <NA> 2007\n5   Adelie female 2007\n6   Adelie   male 2007\n7   Adelie female 2007\n8   Adelie   male 2007\n9   Adelie   <NA> 2007\n10  Adelie   <NA> 2007\n11  Adelie   <NA> 2007\n12  Adelie   <NA> 2007\n13  Adelie female 2007\n14  Adelie   male 2007\n15  Adelie   male 2007\n16  Adelie female 2007\n [ reached 'max' / getOption(\"max.print\") -- omitted 328 rows ]\n\npeng_df[grep(\"^bill\", names(peng_df), value = TRUE)]\n\n   bill_length_mm bill_depth_mm\n1            39.1          18.7\n2            39.5          17.4\n3            40.3          18.0\n4              NA            NA\n5            36.7          19.3\n6            39.3          20.6\n7            38.9          17.8\n8            39.2          19.6\n9            34.1          18.1\n10           42.0          20.2\n11           37.8          17.1\n12           37.8          17.3\n13           41.1          17.6\n14           38.6          21.2\n15           34.6          21.1\n16           36.6          17.8\n17           38.7          19.0\n18           42.5          20.7\n19           34.4          18.4\n20           46.0          21.5\n21           37.8          18.3\n22           37.7          18.7\n23           35.9          19.2\n24           38.2          18.1\n [ reached 'max' / getOption(\"max.print\") -- omitted 320 rows ]\n\nsubset(peng_df, select = bill_length_mm:body_mass_g)\n\n   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n1            39.1          18.7               181        3750\n2            39.5          17.4               186        3800\n3            40.3          18.0               195        3250\n4              NA            NA                NA          NA\n5            36.7          19.3               193        3450\n6            39.3          20.6               190        3650\n7            38.9          17.8               181        3625\n8            39.2          19.6               195        4675\n9            34.1          18.1               193        3475\n10           42.0          20.2               190        4250\n11           37.8          17.1               186        3300\n12           37.8          17.3               180        3700\n [ reached 'max' / getOption(\"max.print\") -- omitted 332 rows ]\n\n## create new columns\npeng_df$bill_ratio <- with(peng_df, bill_length_mm / bill_depth_mm)\n# or\npeng_df <- within(peng_df, {\n  bill_ratio <- bill_length_mm / bill_depth_mm\n})\n#or\npeng_df <- transform(peng_df, bill_ratio = bill_length_mm / bill_depth_mm)\n\n# reorder\npeng_df[c(\"species\", \"island\", \"bill_length_mm\", \n                     \"bill_depth_mm\", \"bill_ratio\", \"flipper_length_mm\", \n                     \"body_mass_g\", \"sex\", \"year\")]\n\n  species    island bill_length_mm bill_depth_mm bill_ratio flipper_length_mm\n1  Adelie Torgersen           39.1          18.7   2.090909               181\n2  Adelie Torgersen           39.5          17.4   2.270115               186\n3  Adelie Torgersen           40.3          18.0   2.238889               195\n4  Adelie Torgersen             NA            NA         NA                NA\n5  Adelie Torgersen           36.7          19.3   1.901554               193\n  body_mass_g    sex year\n1        3750   male 2007\n2        3800 female 2007\n3        3250 female 2007\n4          NA   <NA> 2007\n5        3450 female 2007\n [ reached 'max' / getOption(\"max.print\") -- omitted 339 rows ]\n\n\n\n\nTibble is often paired with dplyr, which is another package for data manipulation.\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n## subset\nfilter(penguins, !is.na(body_mass_g))\n\n# A tibble: 342 × 8\n   species island    bill_length_mm bill_depth_mm flipper_…¹ body_…² sex    year\n   <fct>   <fct>              <dbl>         <dbl>      <int>   <int> <fct> <int>\n 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007\n 2 Adelie  Torgersen           39.5          17.4        186    3800 fema…  2007\n 3 Adelie  Torgersen           40.3          18          195    3250 fema…  2007\n 4 Adelie  Torgersen           36.7          19.3        193    3450 fema…  2007\n 5 Adelie  Torgersen           39.3          20.6        190    3650 male   2007\n 6 Adelie  Torgersen           38.9          17.8        181    3625 fema…  2007\n 7 Adelie  Torgersen           39.2          19.6        195    4675 male   2007\n 8 Adelie  Torgersen           34.1          18.1        193    3475 <NA>   2007\n 9 Adelie  Torgersen           42            20.2        190    4250 <NA>   2007\n10 Adelie  Torgersen           37.8          17.1        186    3300 <NA>   2007\n# … with 332 more rows, and abbreviated variable names ¹​flipper_length_mm,\n#   ²​body_mass_g\n# ℹ Use `print(n = ...)` to see more rows\n\nfilter(penguins, sex == \"male\")\n\n# A tibble: 168 × 8\n   species island    bill_length_mm bill_depth_mm flipper_…¹ body_…² sex    year\n   <fct>   <fct>              <dbl>         <dbl>      <int>   <int> <fct> <int>\n 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007\n 2 Adelie  Torgersen           39.3          20.6        190    3650 male   2007\n 3 Adelie  Torgersen           39.2          19.6        195    4675 male   2007\n 4 Adelie  Torgersen           38.6          21.2        191    3800 male   2007\n 5 Adelie  Torgersen           34.6          21.1        198    4400 male   2007\n 6 Adelie  Torgersen           42.5          20.7        197    4500 male   2007\n 7 Adelie  Torgersen           46            21.5        194    4200 male   2007\n 8 Adelie  Biscoe              37.7          18.7        180    3600 male   2007\n 9 Adelie  Biscoe              38.2          18.1        185    3950 male   2007\n10 Adelie  Biscoe              38.8          17.2        180    3800 male   2007\n# … with 158 more rows, and abbreviated variable names ¹​flipper_length_mm,\n#   ²​body_mass_g\n# ℹ Use `print(n = ...)` to see more rows\n\nslice(penguins, 1:6)\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_l…¹ body_…² sex    year\n  <fct>   <fct>              <dbl>         <dbl>       <int>   <int> <fct> <int>\n1 Adelie  Torgersen           39.1          18.7         181    3750 male   2007\n2 Adelie  Torgersen           39.5          17.4         186    3800 fema…  2007\n3 Adelie  Torgersen           40.3          18           195    3250 fema…  2007\n4 Adelie  Torgersen           NA            NA            NA      NA <NA>   2007\n5 Adelie  Torgersen           36.7          19.3         193    3450 fema…  2007\n6 Adelie  Torgersen           39.3          20.6         190    3650 male   2007\n# … with abbreviated variable names ¹​flipper_length_mm, ²​body_mass_g\n\n## sort\narrange(penguins, year)\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_…¹ body_…² sex    year\n   <fct>   <fct>              <dbl>         <dbl>      <int>   <int> <fct> <int>\n 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007\n 2 Adelie  Torgersen           39.5          17.4        186    3800 fema…  2007\n 3 Adelie  Torgersen           40.3          18          195    3250 fema…  2007\n 4 Adelie  Torgersen           NA            NA           NA      NA <NA>   2007\n 5 Adelie  Torgersen           36.7          19.3        193    3450 fema…  2007\n 6 Adelie  Torgersen           39.3          20.6        190    3650 male   2007\n 7 Adelie  Torgersen           38.9          17.8        181    3625 fema…  2007\n 8 Adelie  Torgersen           39.2          19.6        195    4675 male   2007\n 9 Adelie  Torgersen           34.1          18.1        193    3475 <NA>   2007\n10 Adelie  Torgersen           42            20.2        190    4250 <NA>   2007\n# … with 334 more rows, and abbreviated variable names ¹​flipper_length_mm,\n#   ²​body_mass_g\n# ℹ Use `print(n = ...)` to see more rows\n\narrange(penguins, desc(year))\n\n# A tibble: 344 × 8\n   species island bill_length_mm bill_depth_mm flipper_len…¹ body_…² sex    year\n   <fct>   <fct>           <dbl>         <dbl>         <int>   <int> <fct> <int>\n 1 Adelie  Biscoe           35            17.9           192    3725 fema…  2009\n 2 Adelie  Biscoe           41            20             203    4725 male   2009\n 3 Adelie  Biscoe           37.7          16             183    3075 fema…  2009\n 4 Adelie  Biscoe           37.8          20             190    4250 male   2009\n 5 Adelie  Biscoe           37.9          18.6           193    2925 fema…  2009\n 6 Adelie  Biscoe           39.7          18.9           184    3550 male   2009\n 7 Adelie  Biscoe           38.6          17.2           199    3750 fema…  2009\n 8 Adelie  Biscoe           38.2          20             190    3900 male   2009\n 9 Adelie  Biscoe           38.1          17             181    3175 fema…  2009\n10 Adelie  Biscoe           43.2          19             197    4775 male   2009\n# … with 334 more rows, and abbreviated variable names ¹​flipper_length_mm,\n#   ²​body_mass_g\n# ℹ Use `print(n = ...)` to see more rows\n\n## select columns\nselect(penguins, species, sex, year)\n\n# A tibble: 344 × 3\n   species sex     year\n   <fct>   <fct>  <int>\n 1 Adelie  male    2007\n 2 Adelie  female  2007\n 3 Adelie  female  2007\n 4 Adelie  <NA>    2007\n 5 Adelie  female  2007\n 6 Adelie  male    2007\n 7 Adelie  female  2007\n 8 Adelie  male    2007\n 9 Adelie  <NA>    2007\n10 Adelie  <NA>    2007\n# … with 334 more rows\n# ℹ Use `print(n = ...)` to see more rows\n\nselect(penguins, starts_with(\"bill\"))\n\n# A tibble: 344 × 2\n   bill_length_mm bill_depth_mm\n            <dbl>         <dbl>\n 1           39.1          18.7\n 2           39.5          17.4\n 3           40.3          18  \n 4           NA            NA  \n 5           36.7          19.3\n 6           39.3          20.6\n 7           38.9          17.8\n 8           39.2          19.6\n 9           34.1          18.1\n10           42            20.2\n# … with 334 more rows\n# ℹ Use `print(n = ...)` to see more rows\n\nselect(penguins, bill_length_mm:body_mass_g)\n\n# A tibble: 344 × 4\n   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n            <dbl>         <dbl>             <int>       <int>\n 1           39.1          18.7               181        3750\n 2           39.5          17.4               186        3800\n 3           40.3          18                 195        3250\n 4           NA            NA                  NA          NA\n 5           36.7          19.3               193        3450\n 6           39.3          20.6               190        3650\n 7           38.9          17.8               181        3625\n 8           39.2          19.6               195        4675\n 9           34.1          18.1               193        3475\n10           42            20.2               190        4250\n# … with 334 more rows\n# ℹ Use `print(n = ...)` to see more rows\n\n## create new columns\nmutate(penguins, bill_ratio = bill_length_mm / bill_depth_mm) |>\n  select(starts_with(\"bill\"))\n\n# A tibble: 344 × 3\n   bill_length_mm bill_depth_mm bill_ratio\n            <dbl>         <dbl>      <dbl>\n 1           39.1          18.7       2.09\n 2           39.5          17.4       2.27\n 3           40.3          18         2.24\n 4           NA            NA        NA   \n 5           36.7          19.3       1.90\n 6           39.3          20.6       1.91\n 7           38.9          17.8       2.19\n 8           39.2          19.6       2   \n 9           34.1          18.1       1.88\n10           42            20.2       2.08\n# … with 334 more rows\n# ℹ Use `print(n = ...)` to see more rows\n\nmutate(penguins, bill_ratio = bill_length_mm / bill_depth_mm) |>\n  relocate(bill_ratio, .after = bill_depth_mm)\n\n# A tibble: 344 × 9\n   species island    bill_length_mm bill_d…¹ bill_…² flipp…³ body_…⁴ sex    year\n   <fct>   <fct>              <dbl>    <dbl>   <dbl>   <int>   <int> <fct> <int>\n 1 Adelie  Torgersen           39.1     18.7    2.09     181    3750 male   2007\n 2 Adelie  Torgersen           39.5     17.4    2.27     186    3800 fema…  2007\n 3 Adelie  Torgersen           40.3     18      2.24     195    3250 fema…  2007\n 4 Adelie  Torgersen           NA       NA     NA         NA      NA <NA>   2007\n 5 Adelie  Torgersen           36.7     19.3    1.90     193    3450 fema…  2007\n 6 Adelie  Torgersen           39.3     20.6    1.91     190    3650 male   2007\n 7 Adelie  Torgersen           38.9     17.8    2.19     181    3625 fema…  2007\n 8 Adelie  Torgersen           39.2     19.6    2        195    4675 male   2007\n 9 Adelie  Torgersen           34.1     18.1    1.88     193    3475 <NA>   2007\n10 Adelie  Torgersen           42       20.2    2.08     190    4250 <NA>   2007\n# … with 334 more rows, and abbreviated variable names ¹​bill_depth_mm,\n#   ²​bill_ratio, ³​flipper_length_mm, ⁴​body_mass_g\n# ℹ Use `print(n = ...)` to see more rows\n\n\n\n\n\nlibrary(data.table)\n\n\nAttaching package: 'data.table'\n\n\nThe following objects are masked from 'package:dplyr':\n\n    between, first, last\n\npeng_dt <- data.table(penguins)\n\n## subset\npeng_dt[!is.na(body_mass_g)]\n\n       species    island bill_length_mm bill_depth_mm flipper_length_mm\n  1:    Adelie Torgersen           39.1          18.7               181\n  2:    Adelie Torgersen           39.5          17.4               186\n  3:    Adelie Torgersen           40.3          18.0               195\n  4:    Adelie Torgersen           36.7          19.3               193\n  5:    Adelie Torgersen           39.3          20.6               190\n ---                                                                   \n     body_mass_g    sex year\n  1:        3750   male 2007\n  2:        3800 female 2007\n  3:        3250 female 2007\n  4:        3450 female 2007\n  5:        3650   male 2007\n ---                        \n [ reached getOption(\"max.print\") -- omitted 5 rows ]\n\npeng_dt[sex == \"male\"]\n\n       species    island bill_length_mm bill_depth_mm flipper_length_mm\n  1:    Adelie Torgersen           39.1          18.7               181\n  2:    Adelie Torgersen           39.3          20.6               190\n  3:    Adelie Torgersen           39.2          19.6               195\n  4:    Adelie Torgersen           38.6          21.2               191\n  5:    Adelie Torgersen           34.6          21.1               198\n ---                                                                   \n     body_mass_g  sex year\n  1:        3750 male 2007\n  2:        3650 male 2007\n  3:        4675 male 2007\n  4:        3800 male 2007\n  5:        4400 male 2007\n ---                      \n [ reached getOption(\"max.print\") -- omitted 5 rows ]\n\npeng_dt[1:6]\n\n   species    island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n1:  Adelie Torgersen           39.1          18.7               181        3750\n2:  Adelie Torgersen           39.5          17.4               186        3800\n3:  Adelie Torgersen           40.3          18.0               195        3250\n4:  Adelie Torgersen             NA            NA                NA          NA\n5:  Adelie Torgersen           36.7          19.3               193        3450\n6:  Adelie Torgersen           39.3          20.6               190        3650\n      sex year\n1:   male 2007\n2: female 2007\n3: female 2007\n4:   <NA> 2007\n5: female 2007\n6:   male 2007\n\n## sort\nsetorder(peng_dt, year) # doesn't return anything but modifies the table\npeng_dt\n\n       species    island bill_length_mm bill_depth_mm flipper_length_mm\n  1:    Adelie Torgersen           39.1          18.7               181\n  2:    Adelie Torgersen           39.5          17.4               186\n  3:    Adelie Torgersen           40.3          18.0               195\n  4:    Adelie Torgersen             NA            NA                NA\n  5:    Adelie Torgersen           36.7          19.3               193\n ---                                                                   \n     body_mass_g    sex year\n  1:        3750   male 2007\n  2:        3800 female 2007\n  3:        3250 female 2007\n  4:          NA   <NA> 2007\n  5:        3450 female 2007\n ---                        \n [ reached getOption(\"max.print\") -- omitted 5 rows ]\n\nsetorder(peng_dt, -year)\npeng_dt\n\n       species island bill_length_mm bill_depth_mm flipper_length_mm\n  1:    Adelie Biscoe           35.0          17.9               192\n  2:    Adelie Biscoe           41.0          20.0               203\n  3:    Adelie Biscoe           37.7          16.0               183\n  4:    Adelie Biscoe           37.8          20.0               190\n  5:    Adelie Biscoe           37.9          18.6               193\n ---                                                                \n     body_mass_g    sex year\n  1:        3725 female 2009\n  2:        4725   male 2009\n  3:        3075 female 2009\n  4:        4250   male 2009\n  5:        2925 female 2009\n ---                        \n [ reached getOption(\"max.print\") -- omitted 5 rows ]\n\n## select columns\npeng_dt[, .(species, sex, year)]\n\n       species    sex year\n  1:    Adelie female 2009\n  2:    Adelie   male 2009\n  3:    Adelie female 2009\n  4:    Adelie   male 2009\n  5:    Adelie female 2009\n ---                      \n340: Chinstrap   male 2007\n341: Chinstrap female 2007\n342: Chinstrap   male 2007\n343: Chinstrap female 2007\n344: Chinstrap   male 2007\n\npeng_dt[, grep(\"^bill\", names(peng_dt)), with = FALSE]\n\n     bill_length_mm bill_depth_mm\n  1:           35.0          17.9\n  2:           41.0          20.0\n  3:           37.7          16.0\n  4:           37.8          20.0\n  5:           37.9          18.6\n ---                             \n340:           48.5          17.5\n341:           43.2          16.6\n342:           50.6          19.4\n343:           46.7          17.9\n344:           52.0          19.0\n\npeng_dt[, bill_length_mm:body_mass_g]\n\n     bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  1:           35.0          17.9               192        3725\n  2:           41.0          20.0               203        4725\n  3:           37.7          16.0               183        3075\n  4:           37.8          20.0               190        4250\n  5:           37.9          18.6               193        2925\n ---                                                           \n340:           48.5          17.5               191        3400\n341:           43.2          16.6               187        2900\n342:           50.6          19.4               193        3800\n343:           46.7          17.9               195        3300\n344:           52.0          19.0               197        4150\n\n## create new columns\npeng_dt[, bill_ratio := bill_length_mm / bill_depth_mm]\npeng_dt\n\n       species island bill_length_mm bill_depth_mm flipper_length_mm\n  1:    Adelie Biscoe           35.0          17.9               192\n  2:    Adelie Biscoe           41.0          20.0               203\n  3:    Adelie Biscoe           37.7          16.0               183\n  4:    Adelie Biscoe           37.8          20.0               190\n  5:    Adelie Biscoe           37.9          18.6               193\n     body_mass_g    sex year bill_ratio\n  1:        3725 female 2009   1.955307\n  2:        4725   male 2009   2.050000\n  3:        3075 female 2009   2.356250\n  4:        4250   male 2009   1.890000\n  5:        2925 female 2009   2.037634\n [ reached getOption(\"max.print\") -- omitted 6 rows ]\n\n# transform but doesn't modify the dt\npeng_dt[, .(bill_ratio = bill_length_mm / bill_depth_mm)]\n\n     bill_ratio\n  1:   1.955307\n  2:   2.050000\n  3:   2.356250\n  4:   1.890000\n  5:   2.037634\n ---           \n340:   2.771429\n341:   2.602410\n342:   2.608247\n343:   2.608939\n344:   2.736842\n\n# returns a vector\npeng_dt[, (bill_ratio = bill_length_mm / bill_depth_mm)]\n\n [1] 1.955307 2.050000 2.356250 1.890000 2.037634 2.100529 2.244186 1.910000\n [9] 2.241176 2.273684 2.309091 2.246305 2.242938 2.164103 1.913043 2.333333\n[17] 2.270588 1.819512 2.100000 2.209677 2.104651 1.904040 2.364706 2.237838\n[25] 2.213836 2.136842 2.204545 2.267760 2.280702 2.450000 2.150838 2.244792\n[33] 1.989189 2.027027 2.164773 2.348571 2.034286 2.000000 2.242424 2.217877\n[41] 2.350877 2.360465 2.070968 2.394118 2.220238 2.085561 2.107527 1.989130\n [ reached getOption(\"max.print\") -- omitted 296 entries ]\n\n# reorder columns\n\nsetcolorder(peng_dt, c(\"species\", \"island\", \"bill_length_mm\", \n                     \"bill_depth_mm\", \"bill_ratio\"))\npeng_dt\n\n       species island bill_length_mm bill_depth_mm bill_ratio flipper_length_mm\n  1:    Adelie Biscoe           35.0          17.9   1.955307               192\n  2:    Adelie Biscoe           41.0          20.0   2.050000               203\n  3:    Adelie Biscoe           37.7          16.0   2.356250               183\n  4:    Adelie Biscoe           37.8          20.0   1.890000               190\n  5:    Adelie Biscoe           37.9          18.6   2.037634               193\n     body_mass_g    sex year\n  1:        3725 female 2009\n  2:        4725   male 2009\n  3:        3075 female 2009\n  4:        4250   male 2009\n  5:        2925 female 2009\n [ reached getOption(\"max.print\") -- omitted 6 rows ]\n\n\n\n\n\n\n\nNotes\nIn the above we used the function grep(\"^bill\", names(penguins)). The first string is called a ‘regular expression’, and in this case \"^bill\" can be translated to “starts with bill”. This defines a pattern that is checked against the names(penguins) which contains species, island, bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g, sex, year. Which column names match the pattern?\nRegular expressions are very flexible in terms of how you can define patterns. We will use them again in more depth when we talk about working with character data."
  },
  {
    "objectID": "exercises/index.html",
    "href": "exercises/index.html",
    "title": "Exercises",
    "section": "",
    "text": "Project organization and workflow – exercises\n\n\nDay 1, A\n\n\nUnderstanding how R deals with the current working directory, practice using relative paths in R input and output, and testing out the here package for managing file paths in a project\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nData structures – exercises\n\n\nDay 1, B\n\n\nUnderstanding basic data structures in R, including vectors, arrays, lists, and data frames\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nFlow control and loops – exercises\n\n\nDay 2, A\n\n\nUnderstanding conditional and repeated execution of R expressions\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nFunctions – exercises\n\n\nDay 2, B\n\n\nUnderstanding how to create and use your own functions\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nMerging and reshaping – exercises\n\n\nDay 3, B\n\n\nPractice manipulating data by merging and reshaping\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nDates and character strings – exercises\n\n\nDay 3, B\n\n\nUnderstanding the pitfalls of dealing with dates, times, and manipulating strings with regular expressions\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nDynamic documents – exercises\n\n\nDay 4, A\n\n\nUsing rmarkdown and quarto to create reproducible and dynamic documents for reporting statistical analyses\n\n\n\n\n \n\n\n\n\nNo matching items"
  },
  {
    "objectID": "exercises/flow-and-loops.html",
    "href": "exercises/flow-and-loops.html",
    "title": "Flow control and loops – exercises",
    "section": "",
    "text": "In this lesson you will\n\nPractice working with if and else statements for conditional execution\nPractice working with loops for repeated execution"
  },
  {
    "objectID": "exercises/flow-and-loops.html#simple-loops-and-conditional-statements",
    "href": "exercises/flow-and-loops.html#simple-loops-and-conditional-statements",
    "title": "Flow control and loops – exercises",
    "section": "Simple loops and conditional statements",
    "text": "Simple loops and conditional statements\n\nUse a loop to print every number from 1 to 10\nModify the loop to print every even number from 1 to 10 (hint: add an if statement)"
  },
  {
    "objectID": "exercises/flow-and-loops.html#loops-to-do-data-manipulation",
    "href": "exercises/flow-and-loops.html#loops-to-do-data-manipulation",
    "title": "Flow control and loops – exercises",
    "section": "Loops to do data manipulation",
    "text": "Loops to do data manipulation\nLoad the palmerpenguins dataset:\n\nlibrary(palmerpenguins)\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_…¹ body_…² sex    year\n   <fct>   <fct>              <dbl>         <dbl>      <int>   <int> <fct> <int>\n 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007\n 2 Adelie  Torgersen           39.5          17.4        186    3800 fema…  2007\n 3 Adelie  Torgersen           40.3          18          195    3250 fema…  2007\n 4 Adelie  Torgersen           NA            NA           NA      NA <NA>   2007\n 5 Adelie  Torgersen           36.7          19.3        193    3450 fema…  2007\n 6 Adelie  Torgersen           39.3          20.6        190    3650 male   2007\n 7 Adelie  Torgersen           38.9          17.8        181    3625 fema…  2007\n 8 Adelie  Torgersen           39.2          19.6        195    4675 male   2007\n 9 Adelie  Torgersen           34.1          18.1        193    3475 <NA>   2007\n10 Adelie  Torgersen           42            20.2        190    4250 <NA>   2007\n# … with 334 more rows, and abbreviated variable names ¹​flipper_length_mm,\n#   ²​body_mass_g\n# ℹ Use `print(n = ...)` to see more rows\n\n\nYou may notice that some of the variables have missing values. We would like to replace the missing values with the “typical” value that is observed.\n\nWrite a loop that goes through the variables in penguins and replaces missing values with the mean for numeric variables, and the most frequent value for characters or factors."
  },
  {
    "objectID": "exercises/flow-and-loops.html#loops-for-statistical-analysis",
    "href": "exercises/flow-and-loops.html#loops-for-statistical-analysis",
    "title": "Flow control and loops – exercises",
    "section": "Loops for statistical analysis",
    "text": "Loops for statistical analysis\n\nWrite a loop that prints out the mean for each numeric variable in the penguins dataset\nModify your loop in 1 so that it prints out the mean, standard deviation, median, and interquartile range for each numeric variable in penguins. Hint: use a nested loop where one of the iterators is a function.\nWrite a loop to compute 500 bootstrap replicates of the means of bill length, bill depth, and flipper length. Remember to pre-allocate a data structure to store the 500 times 3 values. Provide an estimate of the correlation of the sample means."
  },
  {
    "objectID": "exercises/dates-and-strings.html",
    "href": "exercises/dates-and-strings.html",
    "title": "Dates and character strings – exercises",
    "section": "",
    "text": "Learning objectives\nIn this lesson you will\n\nManipulate dates and times with lubridate\nLearn some basic regular expressions for matching ICD-10 code"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Programming and statistical modelling in R",
    "section": "",
    "text": "Programming and statistical modelling in R\n\n\n\nThe aim of the course is to make the participants able to\n\nuse programming principles (loops and functions) to handle repetitive tasks\nuse functions in R\nuse loops in R\ndo efficient data manipulation and aggregation\n\n\n\n\nThe course covers use of the statistical software package R. The aim is to take the intermediate R user to the next level, and make use of programming techniques for more efficient use of R. A key focus in on introducing loops and functions. The course will consist of lectures and exercises over 4 days. This will give the students a chance to use and work with different aspects of R.\n\n\n\nPh.D.-students and health researchers with a basic knowledge of statistics corresponding to the course on basic statistics for health researchers and with a good working knowledge of R, e.g., as obtained by having already followed an introductory course on R.\nParticipants are expected to bring their own laptop with R installed for the exercises.\n\n\n\nThe course is relevant to PhD students from the following graduate programmes at the Graduate School of Health and Medical Sciences, UCPH:\nALL GRADUATE PROGRAMMES\n\n\n\nEnglish.\n\n\n\nLectures in four half days, four optional exercise hours placed as one each week.\n\n\n\nMichael Sachs, Section of Biostatistics\n\n\n\nMichael Sachs and other members of the staff at the Section of Biostatistics.\n\n\n\n1, 4, 8, 11 November 2022, all days from 8.00-12.00.\n\n\n\nCSS"
  }
]