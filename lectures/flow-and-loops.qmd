---
title: "Flow control and loops"
subtitle: "Day 2, A"
author: "Michael C Sachs"
format: 
    revealjs:
      scrollable: true
execute:
  echo: true
---

# Flow control

## What?

- Normally the code gets run line by line, in order, top to bottom
- There are special commands that allow you change that

- _Conditional execution_, choose which code to run depending on logical conditions
    + `if(<condition>)`
    + `else if`
    + `else` 
- _Loops_, repeat a chunk of code several times
    + `repeat`
    + `for`
    + `while`

## If then else

```{r}
#| eval: false
#| echo: true
if(<condition>) {
  
  <do something>
    
} else {
  
  <do something else>
  
}
```

If the `<condition>` evaluates to `TRUE`, then `something` gets executed, otherwise `something else` gets executed. 

`<condition>` must be length one. No vectors allowed.


## Examples

```{r}
#| eval: false
num_reps <- if(final_report) 5000 else 200
```

brackets are helpful for understanding and clarity
```{r}
#| eval: false
p_value <- if(nonparametric) {
  wilcox.test(mpg ~ vs, data = mtcars, exact = FALSE)$p.value
} else {
  t.test(mpg ~ vs, data = mtcars)$p.value
}
```

There does not need to be anything returned from the expression
```{r}
#| eval: false

if(log_transform) {
  
  data$Y <- log(data$Y)
  
}
```


## `ifelse`

This is a function, not a statement like `if` and `else`. 

It is vectorized and hence better suited for working with data. 

`ifelse(<logical vector>, <yes vector>, <no vector>)`. All three vectors should be the same length or recycling happens. 

It returns a vector with elements from `yes` when TRUE, and elements from `no` when FALSE. 

```{r}
rawdata <- c("12.63", "62.45", "<2") ## lower limit of detection
as.numeric(ifelse(rawdata == "<2", 1, rawdata))
```

# Loops

## Basic concepts

A loop repeatedly and sequentially evaluates an expression, i.e., 

```{r}
#| eval: false
{
  <stuff contained inside curly brackets>
}
```

A loop will continue forever unless you tell it to stop. You tell it to stop in different ways for different loop expressions


## Repeat

This is the simplest of loops, it will repeat an expression until it encounters `break`

This will run forever
```{r}
#| eval: false
repeat {
  print("hello")
}
```

This will run exactly once
```{r}
#| eval: false
repeat {
  print("hello")
  break
}
```

This will run 5 times
```{r}
#| eval: false
i <- 1
repeat {
  print("hello")
  if(i == 5) break
  i <- i + 1
}
```


## While

Notice the pattern, repeat an expression until a condition is met. 

The condition usually depends on a variable that changes at each iteration, in this case `i`, the _iterator_

`while` loops explicitly state the condition at the start: 

```{r}
i <- 1
while(i <= 5) {
  print("hello")
  i <- i + 1
}
```


## For loops

A `for` loop explicitly states the sequence of the iterator at the start. Then the "end condition" is that the loop has reached the end of the sequence. 

```{r}
for(i in 1:5) {
  print("hello")
}
```

In this case, it is the most concise. I personally use `for` loops more than any other loop.

`break` can be used inside any loop to end it. `next` can be used to go to the next iteration. 

```{r}
for(i in 1:5) {
  if(i == 2) next
  print(paste("hello", i))
}
```


## Examples

### Bootstrap

```{r}
library(palmerpenguins)

mu.body_mass <- mean(penguins$body_mass_g, na.rm = TRUE)
bsmeans <- vector("numeric", length = 2000)
for(i in 1:length(bsmeans)) {
  resampled.body_mass <- sample(penguins$body_mass_g, replace = TRUE)
  bsmeans[i] <- mean(resampled.body_mass, na.rm = TRUE)
}
hist(bsmeans)
abline(v = mu.body_mass, col = "red")
```

## Example 2
Iterating through species

```{r}
#| out.height: 600px
library(colorspace)

species_names <- levels(penguins$species)
colors <- colorspace::qualitative_hcl(length(species_names))
for(i in 1:length(species_names)){
  
  if(i == 1) {
    
    plot(bill_length_mm ~ bill_depth_mm, 
         pch = 20, col = colors[i],
         data = subset(penguins, species == species_names[i]), 
         xlim = range(penguins$bill_depth_mm, na.rm = TRUE), 
         ylim = range(penguins$bill_length_mm, na.rm = TRUE)
         )
    
  } else {
    
    points(bill_length_mm ~ bill_depth_mm, 
         pch = 20, col = colors[i],
         data = subset(penguins, species == species_names[i]))
    
  }
  
}
legend("topleft", fill = colors, legend = species_names)
```


## Nested loops

A loop can itself contain a loop, or multiple loops. 

```{r}
species_names <- levels(penguins$species)
island_names <- levels(penguins$island)
mean_bm_matrix <- matrix(NA, nrow = length(species_names), 
                         ncol = length(island_names), 
                         dimnames = list(species_names, island_names))

for(i in 1:nrow(mean_bm_matrix)) {
  for(j in 1:ncol(mean_bm_matrix)) {
   
    thisset <- subset(penguins, species == species_names[i] & 
                        island == island_names[j])
    
    if(nrow(thisset) == 0) next
    
    mean_bm_matrix[i, j] <- mean(thisset$body_mass_g, na.rm = TRUE)
     
  }
}
mean_bm_matrix
```


## Note on speed

You may see people warn you not to use for loops in R, "because they are slow". 

That is partially true, but speed is not the only thing, for loops can be much clearer and more understandable than the alternatives. 

__But__, the slow thing in R is changing the size of an object, so you can avoid that by creating a vector/matrix/array of the correct size to hold the results of the loop: 

```{r}
system.time({
A1 <- NULL
for(i in 1:100000) {
  A1 <- c(A1, rnorm(1))
}
})

system.time({
A2 <- rep(NA, 100000)
for(i in 1:length(A2)) {
  A2[i] <- rnorm(1)
}
})
```



## Practical

1. Practice working if and else statements
2. Practice working with loops

[Link to lesson](../exercises/flow-and-loops.html)

[Link home](../index.html)