---
title: "Data structures in R"
subtitle: "Day 1, B"
author: "Michael C Sachs"
format: 
    revealjs:
      scrollable: true
execute:
  echo: true
---

## Overview

- R is a programming language, most often used to work with data
- I use the term 'data' loosely, can refer to
    + data to be analyzed
    + results from a data analysis
    + information used in an analysis (e.g., ICD diagnosis codes)
- Think carefully about organizing your data structures

# {.middle .center .inverse}

> "Bad programmers worry about the code. Good programmers worry about data structures and their relationships."

- Linus Torvalds, creator of Linux

## Types of data

logical, numeric, character, factor, date, ... 

```{r}
TRUE
1.2
"hello"
factor("low", levels = c("low", "med", "high"))
as.Date("2022-05-11", format = "%Y-%m-%d")
NULL
```

## Vectors

A one dimensional collection of data with the same type. Can be named or unnamed. 
Can be created in many ways: 

```{r}
1:4
seq(1, 4, by = 1)
letters
rep(TRUE, times = 5)

x <- 1:4
names(x) <- c("a", "b", "c", "d")
x
```


## Indexing vectors

Subsequences of vectors are obtained with square brackets `[]`

Inside the square brackets goes the _index_, which can be itself a vector of numbers, logicals, or characters (if the vector is _named_)


```{r}
x <- 1:6
names(x) <- c("a", "b", "c", "d", "e", "f")

x[c(1, 3, 5)]
x[-c(2, 4, 6)] # negative index only works for numeric
x[c(TRUE, FALSE, TRUE, FALSE, TRUE, FALSE)]
x[(x %% 2) == 1]
x[(x %% 2) != 0]
x[c("a", "c", "d")]
```


## Lists

A _list_ is a collection of things not required to be the same type. An element of a list can be any R object. Can also be named or not.

```{r}
list(1:4, letters[1:4], mean)

list(numbers = 1:4, 
     letters = letters[1:4], 
     mean = mean,
     list = list("a", 1, TRUE))

## an empty list
list()

## a list of 3 placeholders
vector(mode = "list", length = 3)
```


## Indexing lists

```{r}
xl <- list(numbers = 1:4, 
     letters = letters[1:4], 
     mean = mean,
     list = list("a", 1, TRUE))

```

A list can be indexed with square brackets `[]` or double-square brackets `[[]]`, but there is a difference! 

```{r}
xl[[1]] ## returns the first element of the list (vector in this case)
xl[1] ## returns a sublist
xl[-1]

xl[1:2] ## works with vectors
xl[[1:2]] ## works but does something different

xl$numbers
xl[["numbers"]]
```


## Concatenating lists

New elements can be added by name or number

```{r}
xl$LETTERS <- LETTERS[1:4]
xl[[length(xl) + 1]] <- LETTERS[1:5]
xl
```

The `c` function concatenates new elements to the list

```{r}
c(xl, AB = list(LETTERS[1:2]))
c(xl, AB = LETTERS[1:2]) # careful!
```


## Matrices

## Indexing matrices

## Matrix arithmetic


## Arrays

## Data frames

## Indexing data frames

## Coercion


# Special structures

## Environments -- how does R find things?

## Packages

## S4 objects

## Tibbles

## data.tables





