---
title: "Functions"
subtitle: "Day 2, B"
author: "Michael C Sachs"
format: 
    revealjs:
      scrollable: true
execute:
  echo: true
image: "../images/functions.png"
---

# Using functions

## A function and its components

Almost everything you do in R involves functions. You call a function by typing its name with its arguments (inputs) inside the parentheses: 

```{r}
sample(x = 1:5, size = 2)
```

The function takes the arguments you provide, does something, and then returns an object. To see what a function does, you can type its name without parentheses to see the source: 
```{r}
sample
```

The source shows you the arguments, their default values, and the expression defining the function. You can also look at the help file for the documentation: 

```{r}
help("sample")
# or
?sample
```


## Using functions -- arguments

Functions can have 0 or more arguments, with or without defaults. 

The arguments can be given in order, or by name
```{r}
set.seed(100)
sample(1:5, 2, FALSE)
## same as
set.seed(100)
sample(size = 2, replace = FALSE, x = 1:5)
```

Names can be partially matched, which can be confusing: 
```{r}
set.seed(100)
sample(si = 2, re = FALSE, x = 1:5)
```


## The ellipsis argument

Some functions take `...` as an argument, e.g., `paste`, `list`, also the `apply` family. 

There are 2 reasons for this: 

1. There could be varying numbers of arguments
```{r}
c(1, 2, 3)
##
c(1, 2)
```


2. To pass optional arguments to other functions involved
```{r}
library(palmerpenguins)
with(penguins, 
     by(body_mass_g, species, mean)
     )
## na.rm gets passed to "mean"
with(penguins, 
     by(body_mass_g, species, mean, 
        na.rm = TRUE)
     )
```


## Using functions -- composition

Often we want to use the result of one function as the argument to another function. There are many ways to do this: 

1. Intermediate variables
```{r}
set.seed(100)
x <- rgamma(100, shape = 1, rate = 2)
logx <- log(x)
stdlogx <- scale(logx)
quantile(stdlogx, c(.25, .75))
```

2. Nested function calls
```{r}
quantile(scale(log(x)), c(.25, .75))
```


3. The pipe operator `|>` (available in R 4.0.1)
```{r}
x |> log() |> scale() |> quantile(c(.25, .75))
  
```

## Using functions -- the apply family

Some functions will take other functions as arguments. An example is the `apply` family of functions, which applies a function over an index or iterator. See `help(apply)`

`apply` repeated applies a function over the dimensions of an array. `MARGIN` indicates which dimension, and then for each index in that dimension, it applies `FUN` to the sub-array
```{r}
M1 <- matrix(rnorm(1000), nrow = 100, ncol = 10)
colnames(M1) <- paste0("X", 1:10)
apply(M1, MARGIN = 2, FUN = median)
```

## Apply continued

`tapply` is commonly used with data. It subsets the data `X` based on the `INDEX` argument, then applies a function to each subset: 
```{r}
library(palmerpenguins)
tapply(X = penguins$bill_depth_mm, INDEX = penguins$species, 
       FUN = mean)

```

`lapply` is more general, in that it can take any index and apply any function that takes the index as an argument. It always returns a list. 
```{r}
lapply(split(penguins$bill_depth_mm, penguins$species), 
       FUN = mean)
```


## Notes on speed and flexibility

The apply family of functions is computationally equivalent to a loop (with pre-allocation)

Using apply instead of a for loop will not be faster computationally

It may be faster to write, but it may also be much harder to understand

You can do whatever you want inside a for loop, how would you do something more complex with `lapply`?

# Writing your own functions


## A simple function

```{r}
hello <- function() {
  
  "Hello"
  
}

hello()
```

## A function with arguments


```{r}
hello <- function(name) {
  
  paste("Hello", name)
  
}
hello("Jim")
lapply(c("Jim", "Heather", "Bob"), hello)
```


## Local variables and scoping

```{r}
#| error: true
hello <- function(name) {
  
  name2 <- "Mike"
  paste("Hello", name, "meet", name2)
  
}
hello("Jim")
name2
``` 

`name2` is a local variable. It exists only inside the function.

```{r}
name2 <- "Billie"
hello("Jim")
```

Modifying local variables outside the function has no effect. But be careful: 

```{r}
hello2 <- function(name) {
  
  paste("Hello", name, "meet", name2)
  
}
hello2("Jim")
```

## Lexical scoping

This is called _lexical scoping_: it defines how R looks for objects when they are referred to by name 

If R sees a variable it needs to use inside a function, and it is not an argument or local variable, then it follows these rules to find the object with that name: 

1. Look in the environment where the function was defined.
2. If not found, look in the parent environment of 1
3. If not found continue going down into parents until there are no more.

Note the specification sees a variable _and needs to use it_. This is called _lazy evaluation_: R does not evaluate anything until it needs to use it


## Lexical scoping example

This can be used to your advantage, e.g., 

```{r}
least_squares_constructor <- function(dataY, dataX) {
  
  function(beta) {
    sum((dataY - (beta[1] + beta[2] * dataX))^2, na.rm  =TRUE)
  }
    
}

model_penguin <- least_squares_constructor(penguins$flipper_length_mm, 
                                        penguins$body_mass_g)
model_penguin
ls(environment(model_penguin))

optim(par = c(0,0), fn = model_penguin)
```

## Lazy evaluation example

```{r}
h01 <- function(x) {
    
    "Hello world!"
    
}
h01()
h01(stop("Error"))
```

One way to manually check for arguments is with `missing`: 

```{r}
h02 <- function(x) {
    
    if(missing(x)) {
        return("Missing x!")
    }
    "Hello world!"
    
}

h02()
h02(1)
```


## Anonymous functions

Your own functions do not need to be saved and assigned names. If a function does not have a name it is `anonymous`, I use these often with the apply family: 

```{r}
bootmeans <- sapply(1:1000, function(i) {
  
  sample(penguins$body_mass_g, replace = TRUE) |>
    mean(na.rm = TRUE)

})
summary(bootmeans)
```

Since R 4.0.1, `\()` can be used as shorthand for `function()`: 
```{r}
bootmeans <- sapply(1:1000, \(i) {
  
   sample(penguins$body_mass_g, replace = TRUE) |>
    mean(na.rm = TRUE)
  
})
summary(bootmeans)
```


## Operators

Operators are symbols like `+`, `<-`, `%*%`, `[`. 

These are functions! To treat them like functions instead of operators, use backticks:
```{r}
2 + 2
`+`(2, 2)
```

You can then treat operators as you would any other function, using them in apply or otherwise

You can also define your own operators: 

```{r}
`% %` <- function(a, b) {
    
    paste(a, b)
    
}

"my" % % "name"
"my" % % "name" % % "is" % % "Mike"
```


Assignment operators have a special syntax: 

```{r}
`second<-` <- function(x, value){
    
    x[2] <- value
    x
    
}

x <- 1:10
second(x) <- 11
x
```



## Generic methods/functions

Look at the function `print`

```{r}
print
```

It is a _generic function_. `UseMethod` says depending on the _class_ of argument `object`, R will call a suitable _method_ (a function) that does something designed for whatever `object` is.

You can find all the special methods by running `methods("print")` (try it now). 

The class of the object is a simple attribute and the method is defined by appending the class name after the function name separated by a dot. This is called the __S3 class system__: 

```{r}
x <- 1:4
class(x)
class(x) <- "myclass"

inherits(x, "myclass")

print.myclass <- function(x, ...) {
  
  cat(x, sep = "\n")
  
}

x
```


## Summary

In R, everything that happens is due to a function, and everything that exists is an object. Functions themselves are objects.

How do functions work together? We can classify functions according to their inputs and outputs: 

Input/Output | Data             | Function 
-------------|------------------|-----------------
Data         | Regular function | Function factory
Function     | Functional       | Function operator


These concepts are loosely defined, because functions can take both data and function arguments and return data and function results.



# Some more advanced topics

## `get` and `assign`

Recall that we can retrieve a variable from a data frame by using a character string, e.g., `penguins[["species"]]`. 

We can use a character string to get or assign any other object using these functions. For example, this returns the function called mean
```{r}
get("mean")
```

which we can use like a function
```{r}
get("mean")(penguins$body_mass_g, na.rm = TRUE)
```

Likewise, an object can be created with `assign`
```{r}
assign("mean.body.mass", mean(penguins$body_mass_g, na.rm = TRUE))
mean.body.mass
```

## Uses of `get` and `assign`

Example, iterating over functions by name:
```{r}
summary_funcs <- c("mean", "sd", "median")
for(fn in summary_funcs) {
  cat(fn, "body mass: ")
  cat(get(fn)(penguins$body_mass_g, na.rm = TRUE), "\n")
}
```

Example, retrieving a function programmatically, 
```{r}
converter <- get(paste0("as.", class(penguins$flipper_length_mm)))
converter(mean(penguins$flipper_length_mm, na.rm = TRUE))
```

Example, programmatically creating new variables, 
```{r}
numeric_cols <- names(penguins)[sapply(penguins, is.numeric)]
for(col in numeric_cols){
  assign(paste0(col, ".scaled"), 
         scale(penguins[[col]]))
}
```



## `do.call` 

A variant on `get` is `do.call`. This takes a function as the first argument, then a list containing the arguments for the function, `do.call(<function>, <list of arguments to function>)`. 

A common use for this is with functions that take a variable number of arguments, e.g., `cbind`, `paste`, where the arguments are created programmatically.

simple example, 
```{r}
do.call("paste", list("A", "B", sep = "."))
```


arranging a list into a matrix 
```{r}
mean.sd.by.species <- lapply(split(penguins$flipper_length_mm, penguins$species), 
                             function(x) c(mean = mean(x, na.rm = TRUE), sd = sd(x, na.rm = TRUE)))
do.call("rbind", mean.sd.by.species)
```

## Global assigment operator

There is the `<<-` operator, which is used in functions and does (re)assignment __outside the function__. It searches the parent environments and reassigns where found, if not found it assigns in the global environment. 

This is generally considered to be a bad idea, but now you know about it. 

```{r}
name2 <- "Billie"
name2
hello <- function(name) {
  
  name2 <<- "Mike"
  paste("Hello", name, "meet", name2)
  
}
hello("Jim")
name2
```



## Recursive functions

Functions that call themselves are possible. 

As with repeat loops, they need to have a _break condition_ 

```{r}

fibbo <- function(n) {
  
  if(n <= 2) {  ## exit condition
    1
  } else {
    n + fibbo(n - 1)
  }
  
}
```


These are actually useful when working with nested lists and directed acyclic graphs, for example. 


## Practical

1. Modify and write functions
2. Use apply to iterate functions over data
3. Write your own class and generic print function


[Link to lesson](../exercises/functions.html)

[Link home](../index.html)
